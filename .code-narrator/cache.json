[
	{
		"name": "code-narrator.config.js",
		"path": "code-narrator.config.js",
		"folderPath": "./",
		"fileContent": "const ConfigurationBuilder = require(\"./src/documentation/plugins/builders/Configuration/ConfigurationBuilder\");\r\nconst FilesBuilder = require(\"./src/documentation/plugins/builders/Files/FilesBuilder\");\r\nconst FoldersBuilder = require(\"./src/documentation/plugins/builders/Folders/FoldersBuilder\");\r\nconst UserDefinedBuilder = require(\"./src/documentation/plugins/builders/UserDefined/UserDefinedBuilder\");\r\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot: true,\r\n    folderRootFileName: 'README',\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    generatorPlugin : [],\r\n    builderPlugins: [\r\n        ConfigurationBuilder,\r\n        FilesBuilder,\r\n        FoldersBuilder,\r\n        UserDefinedBuilder,\r\n    ],\r\n    builders: [\r\n        {\r\n            type: \"README\",\r\n            sidebarPosition: 1,\r\n            template: \"README\",\r\n            name: \"ReadMe\",\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    JSONPath: [\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.author\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            name: \"FAQ\",\r\n            template : \"faq\",\r\n            sidebarPosition: 2,\r\n            type: \"faq\",\r\n            args : {\r\n                projectFile : 'content(package.json)'\r\n            }\r\n        },\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            sidebarPosition: 3,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n\r\n        {\r\n            //https://github.com/ingig/code-narrator/tree/master/docs/howto\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"README\",\r\n            path: \"howto\",\r\n            files: [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_howto\",\r\n                    name: \"How to create HowTo\",\r\n                    files: [\r\n                        {\r\n                            path: \"code-narrator.config.js\",\r\n                            extract: \"builders\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_content_to_long\",\r\n                    name: \"Content to long\",\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    name:\"HowTo run CLI\",\r\n                    template: \"howto_run_cli\",\r\n                    args : {\r\n                        docUrl : \"https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\"\r\n                    },\r\n                    files : [\r\n                        {\r\n                            path:\"src/utils/CliHelper.ts\",\r\n                            extract: \"what arguments are available\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_custom_builder\",\r\n                    name: \"Create your own custom builder\",\r\n                    files: [\r\n                        {\r\n                            path: 'code-narrator.config.js',\r\n                            extract: 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                        },\r\n                        {\r\n                            path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                            extract: 'how code parses content(...) and extract:'\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            //https://github.com/ingig/code-narrator/tree/master/docs/howto\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"README\",\r\n            path: \"tutorial\",\r\n            files: [{\r\n                path: \"tutorial/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_create_builder_plugin\",\r\n                    name: \"Tutorial - Create builder plugin\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/documentation/plugins/builders/Files/FilesBuilder.ts\"\r\n                        },\r\n                        {\r\n                            path: \"code-narrator.config.js\",\r\n                            extract: \"builderPlugins\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_create_generator_plugin\",\r\n                    name: \"Tutorial - Create generator plugin\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/documentation/plugins/generators/JekyllGenerator.ts\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_custom_llm\",\r\n                    name: \"Tutorial - Use Custom LLM service\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/services/IGenericAIService.ts\"\r\n                        },\r\n                        {\r\n                            path: \"src/model/GenericAIResponse.ts\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nmodule.exports = config;",
		"documentation": "The `code-narrator.config.js` file is a configuration file for the Code Narrator documentation generator. It contains various settings and options that determine how the documentation is generated for a project. Here's a detailed description of the configuration options:\n\n1. `entry_file`: The main entry point file for the application (e.g., `./dist/src/App.js`).\n2. `cli_file`: The command-line interface file for the application (e.g., `./dist/src/cli.js`).\n3. `project_name`: The name of the project (e.g., `code-narrator`).\n4. `config_files`: An array of configuration files for the project (e.g., `[\"code-narrator.config.js\"]`).\n5. `readmeRoot`: A boolean value indicating whether the root README file should be generated.\n6. `folderRootFileName`: The name of the root file for each folder (e.g., `README`).\n7. `repository_url`: The URL of the project's repository (e.g., `https://github.com/ingig/code-narrator`).\n8. `project_file`: The main project file (e.g., `package.json`).\n9. `source_path`: The path to the source code (e.g., `src`).\n10. `documentation_path`: The path to the documentation folder (e.g., `docs`).\n11. `test_path`: The path to the test folder (e.g., `__tests__`).\n12. `include`: An array of file patterns to include in the documentation (e.g., `[\"code-narrator.config.js\", \"src/**/*.ts\"]`).\n13. `generatorPlugin`: An array of generator plugins for the documentation.\n14. `builderPlugins`: An array of builder plugins for the documentation (e.g., `ConfigurationBuilder`, `FilesBuilder`, `FoldersBuilder`, `UserDefinedBuilder`).\n15. `builders`: An array of builder configurations for generating different types of documentation pages.\n\nTo retrieve a value from the config file, you can use the following example:\n\n```javascript\nconst config = require(\"./code-narrator.config.js\");\n\nconsole.log(config.entry_file); // Output: \"./dist/src/App.js\"\n```\n\n:::note\nPlease note that any sensitive information in the configuration file should be replaced with `*****` to protect it from unauthorized access.\n:::",
		"isFolder": false,
		"updated": "2023-04-29T15:14:52.218Z",
		"sidebar_position": 0,
		"sidebar_label": "Code-narrator.config.js",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration/",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "These are the app-specific config files called code-narrator.config.js.\r\nWhen you use code-narrator in your project, you need set these configurations correctly to match your project.\r\nGive me a detailed description of them, and what their purpose is in the application if you can decide.\r\nGive example on how to retrieve from the config file\r\n###\r\nconst ConfigurationBuilder = require(\"./src/documentation/plugins/builders/Configuration/ConfigurationBuilder\");\r\nconst FilesBuilder = require(\"./src/documentation/plugins/builders/Files/FilesBuilder\");\r\nconst FoldersBuilder = require(\"./src/documentation/plugins/builders/Folders/FoldersBuilder\");\r\nconst UserDefinedBuilder = require(\"./src/documentation/plugins/builders/UserDefined/UserDefinedBuilder\");\r\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot: true,\r\n    folderRootFileName: 'README',\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    generatorPlugin : [],\r\n    builderPlugins: [\r\n        ConfigurationBuilder,\r\n        FilesBuilder,\r\n        FoldersBuilder,\r\n        UserDefinedBuilder,\r\n    ],\r\n    builders: [\r\n        {\r\n            type: \"README\",\r\n            sidebarPosition: 1,\r\n            template: \"README\",\r\n            name: \"ReadMe\",\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    JSONPath: [\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.author\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            name: \"FAQ\",\r\n            template : \"faq\",\r\n            sidebarPosition: 2,\r\n            type: \"faq\",\r\n            args : {\r\n                projectFile : 'content(package.json)'\r\n            }\r\n        },\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            sidebarPosition: 3,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n\r\n        {\r\n            //https://github.com/ingig/code-narrator/tree/master/docs/howto\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"README\",\r\n            path: \"howto\",\r\n            files: [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_howto\",\r\n                    name: \"How to create HowTo\",\r\n                    files: [\r\n                        {\r\n                            path: \"code-narrator.config.js\",\r\n                            extract: \"builders\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_content_to_long\",\r\n                    name: \"Content to long\",\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    name:\"HowTo run CLI\",\r\n                    template: \"howto_run_cli\",\r\n                    args : {\r\n                        docUrl : \"https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\"\r\n                    },\r\n                    files : [\r\n                        {\r\n                            path:\"src/utils/CliHelper.ts\",\r\n                            extract: \"what arguments are available\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_custom_builder\",\r\n                    name: \"Create your own custom builder\",\r\n                    files: [\r\n                        {\r\n                            path: 'code-narrator.config.js',\r\n                            extract: 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                        },\r\n                        {\r\n                            path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                            extract: 'how code parses content(...) and extract:'\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            //https://github.com/ingig/code-narrator/tree/master/docs/howto\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"README\",\r\n            path: \"tutorial\",\r\n            files: [{\r\n                path: \"tutorial/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_create_builder_plugin\",\r\n                    name: \"Tutorial - Create builder plugin\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/documentation/plugins/builders/Files/FilesBuilder.ts\"\r\n                        },\r\n                        {\r\n                            path: \"code-narrator.config.js\",\r\n                            extract: \"builderPlugins\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_create_generator_plugin\",\r\n                    name: \"Tutorial - Create generator plugin\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/documentation/plugins/generators/JekyllGenerator.ts\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_custom_llm\",\r\n                    name: \"Tutorial - Use Custom LLM service\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/services/IGenericAIService.ts\"\r\n                        },\r\n                        {\r\n                            path: \"src/model/GenericAIResponse.ts\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nmodule.exports = config;\r\n###"
			}
		],
		"id": "code-narrator.config.js",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "Configuration",
		"path": "Configuration",
		"folderPath": "./Configuration",
		"fileContent": "",
		"documentation": "The `code-narrator.config.js` file is an app-specific configuration file for the Code Narrator application. It is used to define various settings and configurations for the application, such as entry files, project name, repository URL, source and documentation paths, and more. This file also includes settings for builder plugins and generator plugins, which are used to customize the documentation generation process.\n\nHere's an example of usage for the app-specific configs:\n\n```markdown\n- Entry file: `./dist/src/App.js`\n- CLI file: `./dist/src/cli.js`\n- Project name: `code-narrator`\n- Config files: `[\"code-narrator.config.js\"]`\n- Repository URL: `https://github.com/ingig/code-narrator`\n- Source path: `src`\n- Documentation path: `docs`\n- Test path: `__tests__`\n- Include: `[\"code-narrator.config.js\", \"src/**/*.ts\"]`\n- Builder plugins: `[ConfigurationBuilder, FilesBuilder, FoldersBuilder, UserDefinedBuilder]`\n```\n\nThe configuration file also defines various builders, which are used to generate different sections of the documentation, such as README, FAQ, Prerequisites, HowTo, and Tutorials.\n\nRegarding other configuration files, there are no other files mentioned in the provided content.",
		"isFolder": true,
		"updated": "2023-04-29T15:15:32.377Z",
		"sidebar_position": 3,
		"sidebar_label": "Configuration",
		"init": false,
		"postInit": false,
		"generator": "Configuration",
		"saveToPath": "./Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "This is (or are) the app-specific config file(s) for code-narrator.\r\nGive me a detailed description, and what their purpose is in the application if you can decide.\r\nGive an example of usage for the app-specific configs\r\n###\r\ncode-narrator.config.js\r\n###\r\n\r\nHere is the content of the app specific config file(s)\r\n###\r\n--- Start code-narrator.config.js ---\n            const ConfigurationBuilder = require(\"./src/documentation/plugins/builders/Configuration/ConfigurationBuilder\");\r\nconst FilesBuilder = require(\"./src/documentation/plugins/builders/Files/FilesBuilder\");\r\nconst FoldersBuilder = require(\"./src/documentation/plugins/builders/Folders/FoldersBuilder\");\r\nconst UserDefinedBuilder = require(\"./src/documentation/plugins/builders/UserDefined/UserDefinedBuilder\");\r\n/**\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    entry_file: \"./dist/src/App.js\",\r\n    cli_file: \"./dist/src/cli.js\",\r\n    project_name: \"code-narrator\",\r\n    config_files: [\r\n        \"code-narrator.config.js\"\r\n    ],\r\n    readmeRoot: true,\r\n    folderRootFileName: 'README',\r\n    repository_url: \"https://github.com/ingig/code-narrator\",\r\n    project_file: \"package.json\",\r\n    source_path: \"src\",\r\n    documentation_path: \"docs\",\r\n    test_path: \"__tests__\",\r\n    include: [\r\n        \"code-narrator.config.js\",\r\n        \"src/**/*.ts\"\r\n    ],\r\n    generatorPlugin : [],\r\n    builderPlugins: [\r\n        ConfigurationBuilder,\r\n        FilesBuilder,\r\n        FoldersBuilder,\r\n        UserDefinedBuilder,\r\n    ],\r\n    builders: [\r\n        {\r\n            type: \"README\",\r\n            sidebarPosition: 1,\r\n            template: \"README\",\r\n            name: \"ReadMe\",\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    JSONPath: [\r\n                        \"$.name\",\r\n                        \"$.description\",\r\n                        \"$.version\",\r\n                        \"$.homepage\",\r\n                        \"$.bugs\",\r\n                        \"$.author\",\r\n                        \"$.repository\", \"$.license\"\r\n                    ]\r\n                }\r\n            ]\r\n\r\n        },\r\n        {\r\n            name: \"FAQ\",\r\n            template : \"faq\",\r\n            sidebarPosition: 2,\r\n            type: \"faq\",\r\n            args : {\r\n                projectFile : 'content(package.json)'\r\n            }\r\n        },\r\n        {\r\n            name: \"Prerequisites\",\r\n            template: `prerequisites`,\r\n            sidebarPosition: 3,\r\n            args: {\r\n                entryFileContent: 'content(./dist/src/cli.js)',\r\n                configFile: 'content(code-narrator.config.js)'\r\n            },\r\n            files: [\r\n                {\r\n                    path: \"package.json\",\r\n                    jsonPaths: [\r\n                        \"$.dependencies\",\r\n                        \"$.devDependencies\",\r\n                        \"$.engine\"\r\n                    ]\r\n                }\r\n            ],\r\n            type: 'Custom'\r\n        },\r\n\r\n        {\r\n            //https://github.com/ingig/code-narrator/tree/master/docs/howto\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"README\",\r\n            path: \"howto\",\r\n            files: [{\r\n                path: \"howto/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_howto\",\r\n                    name: \"How to create HowTo\",\r\n                    files: [\r\n                        {\r\n                            path: \"code-narrator.config.js\",\r\n                            extract: \"builders\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_content_to_long\",\r\n                    name: \"Content to long\",\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    name:\"HowTo run CLI\",\r\n                    template: \"howto_run_cli\",\r\n                    args : {\r\n                        docUrl : \"https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\"\r\n                    },\r\n                    files : [\r\n                        {\r\n                            path:\"src/utils/CliHelper.ts\",\r\n                            extract: \"what arguments are available\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"howto\",\r\n                    template: \"howto_create_custom_builder\",\r\n                    name: \"Create your own custom builder\",\r\n                    files: [\r\n                        {\r\n                            path: 'code-narrator.config.js',\r\n                            extract: 'builders' //You can use natural language to extract, e.g. \"first 20 lines\", \"first paragraph\"\r\n                        },\r\n                        {\r\n                            path: 'src/documentation/builders/UserDefinedBuilderHelper.ts',\r\n                            extract: 'how code parses content(...) and extract:'\r\n                        }\r\n                    ]\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            //https://github.com/ingig/code-narrator/tree/master/docs/howto\r\n            type: \"README\",\r\n            template: \"overview_readme\",\r\n            name: \"README\",\r\n            path: \"tutorial\",\r\n            files: [{\r\n                path: \"tutorial/*.md\"\r\n            }\r\n            ],\r\n            pages: [\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_create_builder_plugin\",\r\n                    name: \"Tutorial - Create builder plugin\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/documentation/plugins/builders/Files/FilesBuilder.ts\"\r\n                        },\r\n                        {\r\n                            path: \"code-narrator.config.js\",\r\n                            extract: \"builderPlugins\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_create_generator_plugin\",\r\n                    name: \"Tutorial - Create generator plugin\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/documentation/plugins/generators/JekyllGenerator.ts\"\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    type: \"tutorial\",\r\n                    template: \"tutorial_custom_llm\",\r\n                    name: \"Tutorial - Use Custom LLM service\",\r\n                    files: [\r\n                        {\r\n                            path: \"src/services/IGenericAIService.ts\"\r\n                        },\r\n                        {\r\n                            path: \"src/model/GenericAIResponse.ts\"\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        }\r\n    ]\r\n};\r\n\r\nmodule.exports = config;\n            --- End code-narrator.config.js ---\n            \r\n###\r\n\r\nThese are other configuration files, give short general information about each of them, but only if you recognize them.\r\nIf you do not recognize them, then don't mention the config\r\n###\r\n\r\n###\r\n"
			}
		],
		"id": "Configuration",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"appSpecificConfigFiles": [
				"code-narrator.config.js"
			],
			"configFiles": [],
			"has_children": true
		}
	},
	{
		"name": "App.ts",
		"path": "src\\App.ts",
		"folderPath": "src",
		"fileContent": "import DocumentationBuilder from \"./documentation/DocumentationBuilder\";\r\nimport DocumentationCache from \"./documentation/DocumentationCache\";\r\nimport DocumentationGenerator from \"./documentation/DocumentationGenerator\";\r\nimport IProjectDocumentedSettings from \"./model/IProjectDocumentedSettings\";\r\nimport ConfigHelper from \"./config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\n\r\n/*\r\nAbout code-narrator\r\nThis application is installed with \"npm i code-narrator\", and executed either by npm run start or by using cli.\r\nWhen starting it will load up the configuration and cached documentation.\r\nThen it will go through the project code, reading the file & folder structure\r\nif the file or folder does not exist in the cache or the file has changed since last cached\r\ncode-narrator will send the code to GPT and ask for documentation in an .md format.\r\nWhen it receives the documentation, it writes it to the cache.\r\nWhen all files and folders have been parsed, then code-narrator creates the documentation from the cache\r\n\r\nThere are few rules to follow\r\n- Write description about the project in the project file (e.g. package.json)\r\n- If GPT generates wrong documentation, the code is probably not clear for humans either. Try adjusting code or adding one line comment to make code clearer\r\n- You can use :::tip or :::danger in you comments in your code files.\r\n */\r\nexport default class App {\r\n    static StartTime = new Date();\r\n    public async run(config? : Partial<ICodeNarratorConfig>) {\r\n        await ConfigHelper.load(config);\r\n        DocumentationCache.load();\r\n\r\n        let builder = new DocumentationBuilder();\r\n        await builder.build();\r\n\r\n\r\n        let generator = new DocumentationGenerator();\r\n        generator.make();\r\n\r\n        console.log('Done generating documents')\r\n    }\r\n}\r\n",
		"documentation": "# App.ts\n\nThe `App.ts` file is the main entry point for the `code-narrator` application. This application is installed with `npm i code-narrator` and executed either by `npm run start` or by using the CLI. The purpose of this application is to generate documentation for a project by parsing the project's code and using GPT to generate documentation in Markdown format.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [App Class](#app-class)\n  - [run Method](#run-method)\n- [Usage](#usage)\n- [Rules](#rules)\n\n## Overview\n\nWhen the application starts, it will load up the configuration and cached documentation. Then, it will go through the project code, reading the file and folder structure. If the file or folder does not exist in the cache or the file has changed since last cached, `code-narrator` will send the code to GPT and ask for documentation in an `.md` format. When it receives the documentation, it writes it to the cache. When all files and folders have been parsed, then `code-narrator` creates the documentation from the cache.\n\n## App Class\n\nThe `App` class is the main class of the application and contains the `run` method, which is responsible for executing the documentation generation process.\n\n### run Method\n\nThe `run` method is an asynchronous method that takes an optional `config` parameter of type `Partial<ICodeNarratorConfig>`. The method performs the following steps:\n\n1. Load the configuration using `ConfigHelper.load(config)`.\n2. Load the documentation cache using `DocumentationCache.load()`.\n3. Create a new instance of `DocumentationBuilder` and call its `build` method.\n4. Create a new instance of `DocumentationGenerator` and call its `make` method.\n5. Log a message to the console indicating that the document generation is complete.\n\n## Usage\n\nTo use the `App` class, simply import it and create a new instance, then call the `run` method with the desired configuration:\n\n```typescript\nimport App from \"./App\";\n\nconst app = new App();\napp.run();\n```\n\n## Rules\n\nThere are a few rules to follow when using `code-narrator`:\n\n1. Write a description about the project in the project file (e.g., `package.json`).\n2. If GPT generates incorrect documentation, the code is probably not clear for humans either. Try adjusting the code or adding a one-line comment to make the code clearer.\n3. You can use `:::tip` or `:::danger` in your comments in your code files.\n\n:::tip\nRemember to write clear and concise code, as it will help GPT generate better documentation for your project.\n:::\n\n:::danger\nBe cautious when using sensitive information in your code, as it might be included in the generated documentation. Always replace sensitive information with `*****` in the documentation.\n:::",
		"isFolder": false,
		"updated": "2023-04-16T11:06:25.664Z",
		"sidebar_position": 0,
		"sidebar_label": "App.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"App.ts\"\r\nThe file name is: App.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport DocumentationBuilder from \"./documentation/DocumentationBuilder\";\r\nimport DocumentationCache from \"./documentation/DocumentationCache\";\r\nimport DocumentationGenerator from \"./documentation/DocumentationGenerator\";\r\nimport IProjectDocumentedSettings from \"./model/IProjectDocumentedSettings\";\r\nimport ConfigHelper from \"./config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\n\r\n/*\r\nAbout code-narrator\r\nThis application is installed with \"npm i code-narrator\", and executed either by npm run start or by using cli.\r\nWhen starting it will load up the configuration and cached documentation.\r\nThen it will go through the project code, reading the file & folder structure\r\nif the file or folder does not exist in the cache or the file has changed since last cached\r\ncode-narrator will send the code to GPT and ask for documentation in an .md format.\r\nWhen it receives the documentation, it writes it to the cache.\r\nWhen all files and folders have been parsed, then code-narrator creates the documentation from the cache\r\n\r\nThere are few rules to follow\r\n- Write description about the project in the project file (e.g. package.json)\r\n- If GPT generates wrong documentation, the code is probably not clear for humans either. Try adjusting code or adding one line comment to make code clearer\r\n- You can use :::tip or :::danger in you comments in your code files.\r\n */\r\nexport default class App {\r\n    static StartTime = new Date();\r\n    public async run(config? : Partial<ICodeNarratorConfig>) {\r\n        await ConfigHelper.load(config);\r\n        DocumentationCache.load();\r\n\r\n        let builder = new DocumentationBuilder();\r\n        await builder.build();\r\n\r\n\r\n        let generator = new DocumentationGenerator();\r\n        generator.make();\r\n\r\n        console.log('Done generating documents')\r\n    }\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "src\\App.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "cli.ts",
		"path": "src\\cli.ts",
		"folderPath": "src",
		"fileContent": "#!/usr/bin/env node\r\n\r\nimport App from \"./App\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport yargs from \"yargs\";\r\nimport path from \"path\";\r\nimport * as process from \"process\";\r\nimport CliHelper from \"./utils/CliHelper\";\r\n\r\n(async () => {\r\n\r\n    let cliHelper = new CliHelper()\r\n    const argv = await cliHelper.getArgv();\r\n    let userConfig = await cliHelper.getConfig(argv);\r\n\r\n    console.log('Starting code-narrator')\r\n\r\n    let app = new App();\r\n    await app.run(userConfig);\r\n\r\n})().catch((e: any) => {\r\n    console.error(e);\r\n});",
		"documentation": "# cli.ts\n\n`cli.ts` is a command-line interface (CLI) script that serves as the entry point for the Code Narrator application. It handles the parsing of command-line arguments, loading of user configurations, and the execution of the main application logic.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [getArgv](#getargv)\n  - [getConfig](#getconfig)\n- [Code Example](#code-example)\n\n## Usage\n\nTo use the CLI, run the following command in your terminal:\n\n```bash\n$ code-narrator [options]\n```\n\n## Methods\n\n### getArgv\n\nThis method is responsible for parsing command-line arguments using the `yargs` library. It returns an object containing the parsed arguments.\n\n### getConfig\n\nThis method takes the parsed command-line arguments as input and returns a user configuration object. It reads the configuration file specified by the user, validates it, and merges it with the default configuration.\n\n#### Parameters\n\n- `argv`: An object containing the parsed command-line arguments.\n\n## Code Example\n\nBelow is the content of the `cli.ts` file:\n\n```javascript\n#!/usr/bin/env node\n\nimport App from \"./App\";\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\nimport fs from \"fs\";\nimport yargs from \"yargs\";\nimport path from \"path\";\nimport * as process from \"process\";\nimport CliHelper from \"./utils/CliHelper\";\n\n(async () => {\n\n    let cliHelper = new CliHelper()\n    const argv = await cliHelper.getArgv();\n    let userConfig = await cliHelper.getConfig(argv);\n\n    console.log('Starting code-narrator')\n\n    let app = new App();\n    await app.run(userConfig);\n\n})().catch((e: any) => {\n    console.error(e);\n});\n```\n\nIn this file, an instance of `CliHelper` is created, and its `getArgv` and `getConfig` methods are used to obtain the command-line arguments and user configuration, respectively. The main `App` class is then instantiated and executed with the user configuration.",
		"isFolder": false,
		"updated": "2023-04-14T14:56:52.453Z",
		"sidebar_position": 1,
		"sidebar_label": "cli.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"cli.ts\"\r\nThe file name is: cli.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\n#!/usr/bin/env node\r\n\r\nimport App from \"./App\";\r\nimport ICodeNarratorConfig from \"./config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport yargs from \"yargs\";\r\nimport path from \"path\";\r\nimport * as process from \"process\";\r\nimport CliHelper from \"./utils/CliHelper\";\r\n\r\n(async () => {\r\n\r\n    let cliHelper = new CliHelper()\r\n    const argv = await cliHelper.getArgv();\r\n    let userConfig = await cliHelper.getConfig(argv);\r\n\r\n    console.log('Starting code-narrator')\r\n\r\n    let app = new App();\r\n    await app.run(userConfig);\r\n\r\n})().catch((e: any) => {\r\n    console.error(e);\r\n});\r\n###\r\n"
			}
		],
		"id": "src\\cli.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "src"
		}
	},
	{
		"name": "ConfigGenerator.ts",
		"path": "src\\config\\ConfigGenerator.ts",
		"folderPath": "src\\config",
		"fileContent": "import ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport ConfigQuestion from \"./ConfigQuestion\";\r\nimport ConfigHelper from \"./ConfigHelper\";\r\nimport ConfigFileSerializer from \"./ConfigFileSerializer\";\r\n\r\nexport default class ConfigGenerator {\r\n\r\n    public static async generate(projectConfig: Partial<ICodeNarratorConfig> = {}): Promise<Partial<ICodeNarratorConfig>> {\r\n        console.log('Understanding project and auto generating code-narrator.config.js')\r\n        let config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n        let configQuestion = new ConfigQuestion();\r\n        let result = await configQuestion.getProjectSetup();\r\n        config.gptModel = DefaultSettings.gptModel;\r\n        config.project_file = result.project_file ?? config.project_file;\r\n        config.source_path = result.source_path ?? config.source_path;\r\n        config.documentation_path = this.getDocPath(config, result);\r\n        config.test_path = result.test_path ?? config.test_path;\r\n        try {\r\n            result = await configQuestion.getProjectDetails(config);\r\n\r\n            config.entry_file = result.entry_file ?? config.entry_file;\r\n            config.cli_file = result.cli_file ?? config.cli_file;\r\n            config.project_name = result.project_name ?? config.project_name;\r\n            config.config_files = result.config_files ?? config.config_files;\r\n            config.repository_url = result.repository_url ?? config.repository_url\r\n        } catch (e) {\r\n\r\n        }\r\n        config.include = [...config.config_files, config.source_path + \"/**/*\"]\r\n        config.builders = ConfigHelper.getUserDefinedExamples(config);\r\n\r\n        let serializer = new ConfigFileSerializer();\r\n        await serializer.serialize(config);\r\n        return config;\r\n    }\r\n\r\n    private static getDocPath(config: ICodeNarratorConfig, json: any) {\r\n        if (json.documentation_path?.indexOf('.') != -1) return config.documentation_path;\r\n        return json.documentation_path ?? config.documentation_path\r\n    }\r\n\r\n}",
		"documentation": "# ConfigGenerator.ts\n\nThis is a TypeScript code file that contains the `ConfigGenerator` class. The class is responsible for generating a configuration object for the Code Narrator project based on user input and default settings. It also serializes the configuration object into a file.\n\n## Usage\n\nTo use the `ConfigGenerator` class, you need to import it and call the `generate` method with an optional `projectConfig` parameter.\n\n```typescript\nimport ConfigGenerator from \"./ConfigGenerator\";\n\n(async () => {\n  const projectConfig = {};\n  const generatedConfig = await ConfigGenerator.generate(projectConfig);\n  console.log(generatedConfig);\n})();\n```\n\n## Class: ConfigGenerator\n\n### Method: generate\n\n```typescript\npublic static async generate(projectConfig: Partial<ICodeNarratorConfig> = {}): Promise<Partial<ICodeNarratorConfig>>\n```\n\nThis method generates a configuration object for the Code Narrator project. It takes an optional `projectConfig` parameter, which is a partial `ICodeNarratorConfig` object. The method returns a Promise that resolves to a partial `ICodeNarratorConfig` object.\n\n#### Parameters\n\n- `projectConfig` (Optional): A partial `ICodeNarratorConfig` object that contains the initial configuration values. Default is an empty object.\n\n### Method: getDocPath\n\n```typescript\nprivate static getDocPath(config: ICodeNarratorConfig, json: any): string\n```\n\nThis private method returns the documentation path based on the provided `config` and `json` objects. It is used internally by the `generate` method.\n\n#### Parameters\n\n- `config`: An `ICodeNarratorConfig` object that contains the current configuration values.\n- `json`: An object that contains the user input values.\n\n## Technical Concepts\n\n### ICodeNarratorConfig\n\n`ICodeNarratorConfig` is an interface that defines the structure of the configuration object for the Code Narrator project. It includes properties such as `gptModel`, `project_file`, `source_path`, `documentation_path`, `test_path`, `entry_file`, `cli_file`, `project_name`, `config_files`, `repository_url`, `include`, and `builders`.\n\n### DefaultSettings\n\n`DefaultSettings` is a class that provides default values for the configuration object. It has a static `get` method that returns an object with default values.\n\n### ConfigQuestion\n\n`ConfigQuestion` is a class that handles user input for generating the configuration object. It has methods like `getProjectSetup` and `getProjectDetails` that prompt the user for input and return the results.\n\n### ConfigHelper\n\n`ConfigHelper` is a class that provides helper methods for working with the configuration object. It has a static method `getUserDefinedExamples` that returns an array of user-defined examples based on the configuration object.\n\n### ConfigFileSerializer\n\n`ConfigFileSerializer` is a class that handles the serialization of the configuration object into a file. It has a method `serialize` that takes the configuration object and writes it to a file named `code-narrator.config.js`.",
		"isFolder": false,
		"updated": "2023-04-28T14:37:50.659Z",
		"sidebar_position": 1,
		"sidebar_label": "ConfigGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigGenerator.ts\"\r\nThe file name is: ConfigGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport ConfigQuestion from \"./ConfigQuestion\";\r\nimport ConfigHelper from \"./ConfigHelper\";\r\nimport ConfigFileSerializer from \"./ConfigFileSerializer\";\r\n\r\nexport default class ConfigGenerator {\r\n\r\n    public static async generate(projectConfig: Partial<ICodeNarratorConfig> = {}): Promise<Partial<ICodeNarratorConfig>> {\r\n        console.log('Understanding project and auto generating code-narrator.config.js')\r\n        let config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n        let configQuestion = new ConfigQuestion();\r\n        let result = await configQuestion.getProjectSetup();\r\n        config.gptModel = DefaultSettings.gptModel;\r\n        config.project_file = result.project_file ?? config.project_file;\r\n        config.source_path = result.source_path ?? config.source_path;\r\n        config.documentation_path = this.getDocPath(config, result);\r\n        config.test_path = result.test_path ?? config.test_path;\r\n        try {\r\n            result = await configQuestion.getProjectDetails(config);\r\n\r\n            config.entry_file = result.entry_file ?? config.entry_file;\r\n            config.cli_file = result.cli_file ?? config.cli_file;\r\n            config.project_name = result.project_name ?? config.project_name;\r\n            config.config_files = result.config_files ?? config.config_files;\r\n            config.repository_url = result.repository_url ?? config.repository_url\r\n        } catch (e) {\r\n\r\n        }\r\n        config.include = [...config.config_files, config.source_path + \"/**/*\"]\r\n        config.builders = ConfigHelper.getUserDefinedExamples(config);\r\n\r\n        let serializer = new ConfigFileSerializer();\r\n        await serializer.serialize(config);\r\n        return config;\r\n    }\r\n\r\n    private static getDocPath(config: ICodeNarratorConfig, json: any) {\r\n        if (json.documentation_path?.indexOf('.') != -1) return config.documentation_path;\r\n        return json.documentation_path ?? config.documentation_path\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\ConfigGenerator.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "ConfigHelper.ts",
		"path": "src\\config\\ConfigHelper.ts",
		"folderPath": "src\\config",
		"fileContent": "import * as dotnet from \"dotenv\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport ConfigGenerator from \"./ConfigGenerator\";\r\nimport IBuilder from \"./IBuilder\";\r\nimport OpenAIService from \"../services/OpenAIService\";\r\n\r\n/*\r\nref: ICodeNarratorConfig.ts\r\n */\r\nexport default class ConfigHelper {\r\n    static env: any;\r\n    static OpenAiKey : string;\r\n    static DocumentingProject: any;\r\n    static BuilderPlugins: any[] = [];\r\n    static DocumentationType = 'md';\r\n    static DocumentExtension = '.md';\r\n    static CacheFilePath = '.code-narrator/cache.json';\r\n    static config: ICodeNarratorConfig;\r\n\r\n    public static async load(projectConfig: Partial<ICodeNarratorConfig> = {}) {\r\n        dotnet.config()\r\n        ConfigHelper.env = process.env;\r\n        ConfigHelper.OpenAiKey = ConfigHelper.env['OPENAI_API_KEY']\r\n\r\n        if (!ConfigHelper.OpenAiKey) {\r\n            console.error('Missing OPENAI_API_KEY in .env file. Make sure to create .env file in your root and include OPENAI_API_KEY=Your_OpenAI_Key')\r\n            throw new Error('Missing OpenAI API key')\r\n        }\r\n\r\n        if (!(projectConfig as any).fromFile) {\r\n            projectConfig = await ConfigGenerator.generate(projectConfig);\r\n            console.log(`\r\n============ Config generated =====================================\r\nConfig file has been generated in project root, code-narrator.config.js. \r\n            \r\nPlease read through it and see if it maps correctly to your project. You can modify it. \r\nThe important properties to look at are \"source_path\", \"include\" and \"config_files\" if you have some app specific config files.\r\n\r\nNext time you will run the CLI it will start generating documentation\r\n===================================================================`)\r\n            process.exit(1);\r\n        }\r\n\r\n        this.config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n\r\n        if (!this.config.exclude.includes(`*${this.config.document_file_extension}`)) {\r\n            this.config.exclude.push(`*${this.config.document_file_extension}`)\r\n        }\r\n\r\n        ConfigHelper.DocumentingProject = this.config.documentation_path;\r\n        ConfigHelper.BuilderPlugins = this.config.builderPlugins;\r\n        ConfigHelper.DocumentExtension = this.config.document_file_extension ?? '.md';\r\n        ConfigHelper.DocumentationType = this.config.documentation_type ?? 'md'\r\n        if (ConfigHelper.DocumentExtension.indexOf('.') != 0) ConfigHelper.DocumentExtension = '.' + ConfigHelper.DocumentExtension;\r\n        if (projectConfig.aiService) {\r\n            this.config.aiService = new projectConfig.aiService()\r\n        } else {\r\n            this.config.aiService = new OpenAIService();\r\n        }\r\n        ConfigHelper.CacheFilePath = this.config.cache_file ?? '.code-narrator/cache.json';\r\n    }\r\n\r\n    public static getUserDefinedExamples(config : ICodeNarratorConfig) {\r\n        let readMeBuilder: IBuilder = {\r\n            name: \"README\",\r\n            type: \"README\",\r\n            template: \"README\",\r\n            sidebarPosition: 1,\r\n            args:\r\n                {\r\n                    entryFileContent: `content(${config.project_file ?? ''})`\r\n                }\r\n        }\r\n        let howToPage : IBuilder = {\r\n            name : \"HowTo Example\",\r\n            type : \"howto\",\r\n            template : \"howto_create_howto\"\r\n        }\r\n        let howToBuilder : IBuilder = {\r\n            name : \"HowTo Overview\",\r\n            type : \"README\",\r\n            template : 'overview_readme',\r\n            path : 'howto',\r\n            files : [\r\n                {\r\n                    path: 'howto/*.md'\r\n\r\n                }\r\n            ],\r\n            pages : [\r\n                howToPage\r\n            ]\r\n        }\r\n        return [readMeBuilder, howToBuilder]\r\n    }\r\n}",
		"documentation": "# ConfigHelper.ts\n\nThe `ConfigHelper.ts` file is a TypeScript module that provides a helper class for managing the configuration of a Code Narrator project. This class is responsible for loading and generating project configurations, as well as providing access to various settings and services used throughout the project.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Usage Examples](#usage-examples)\n- [Methods](#methods)\n  - [load](#load)\n  - [getUserDefinedExamples](#getuserdefinedexamples)\n- [Properties](#properties)\n\n## Class Description\n\nThe `ConfigHelper` class is a static class that provides methods and properties for managing the configuration of a Code Narrator project. It is responsible for loading and generating project configurations, as well as providing access to various settings and services used throughout the project.\n\n## Usage Examples\n\nHere are some examples of how to use the `ConfigHelper` class:\n\n```typescript\n// Load the project configuration\nawait ConfigHelper.load(projectConfig);\n\n// Get user-defined examples\nconst examples = ConfigHelper.getUserDefinedExamples(config);\n```\n\n## Methods\n\n### load\n\n```typescript\npublic static async load(projectConfig: Partial<ICodeNarratorConfig> = {}): Promise<void>\n```\n\nThe `load` method is responsible for loading the project configuration. It takes an optional `projectConfig` parameter, which is a partial `ICodeNarratorConfig` object. If no configuration is provided, the method will generate a default configuration using the `ConfigGenerator` class.\n\n#### Parameters\n\n- `projectConfig`: A partial `ICodeNarratorConfig` object representing the project configuration. This parameter is optional and defaults to an empty object.\n\n### getUserDefinedExamples\n\n```typescript\npublic static getUserDefinedExamples(config: ICodeNarratorConfig): IBuilder[]\n```\n\nThe `getUserDefinedExamples` method returns an array of `IBuilder` objects representing user-defined examples for the project. It takes a `config` parameter, which is an `ICodeNarratorConfig` object representing the project configuration.\n\n#### Parameters\n\n- `config`: An `ICodeNarratorConfig` object representing the project configuration.\n\n## Properties\n\n- `env`: An object representing the environment variables.\n- `OpenAiKey`: A string representing the OpenAI API key.\n- `DocumentingProject`: An object representing the project being documented.\n- `BuilderPlugins`: An array of builder plugins.\n- `DocumentationType`: A string representing the documentation type (e.g., 'md' for Markdown).\n- `DocumentExtension`: A string representing the document file extension (e.g., '.md' for Markdown files).\n- `CacheFilePath`: A string representing the cache file path.\n- `config`: An `ICodeNarratorConfig` object representing the project configuration.",
		"isFolder": false,
		"updated": "2023-04-29T15:16:55.828Z",
		"sidebar_position": 2,
		"sidebar_label": "ConfigHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigHelper.ts\"\r\nThe file name is: ConfigHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport * as dotnet from \"dotenv\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport DefaultSettings from \"./DefaultSettings\";\r\nimport ConfigGenerator from \"./ConfigGenerator\";\r\nimport IBuilder from \"./IBuilder\";\r\nimport OpenAIService from \"../services/OpenAIService\";\r\n\r\n/*\r\nref: ICodeNarratorConfig.ts\r\n */\r\nexport default class ConfigHelper {\r\n    static env: any;\r\n    static OpenAiKey : string;\r\n    static DocumentingProject: any;\r\n    static BuilderPlugins: any[] = [];\r\n    static DocumentationType = 'md';\r\n    static DocumentExtension = '.md';\r\n    static CacheFilePath = '.code-narrator/cache.json';\r\n    static config: ICodeNarratorConfig;\r\n\r\n    public static async load(projectConfig: Partial<ICodeNarratorConfig> = {}) {\r\n        dotnet.config()\r\n        ConfigHelper.env = process.env;\r\n        ConfigHelper.OpenAiKey = ConfigHelper.env['OPENAI_API_KEY']\r\n\r\n        if (!ConfigHelper.OpenAiKey) {\r\n            console.error('Missing OPENAI_API_KEY in .env file. Make sure to create .env file in your root and include OPENAI_API_KEY=Your_OpenAI_Key')\r\n            throw new Error('Missing OpenAI API key')\r\n        }\r\n\r\n        if (!(projectConfig as any).fromFile) {\r\n            projectConfig = await ConfigGenerator.generate(projectConfig);\r\n            console.log(`\r\n============ Config generated =====================================\r\nConfig file has been generated in project root, code-narrator.config.js. \r\n            \r\nPlease read through it and see if it maps correctly to your project. You can modify it. \r\nThe important properties to look at are \"source_path\", \"include\" and \"config_files\" if you have some app specific config files.\r\n\r\nNext time you will run the CLI it will start generating documentation\r\n===================================================================`)\r\n            process.exit(1);\r\n        }\r\n\r\n        this.config = {\r\n            ...DefaultSettings.get(),\r\n            ...projectConfig,\r\n        };\r\n\r\n        if (!this.config.exclude.includes(`*${this.config.document_file_extension}`)) {\r\n            this.config.exclude.push(`*${this.config.document_file_extension}`)\r\n        }\r\n\r\n        ConfigHelper.DocumentingProject = this.config.documentation_path;\r\n        ConfigHelper.BuilderPlugins = this.config.builderPlugins;\r\n        ConfigHelper.DocumentExtension = this.config.document_file_extension ?? '.md';\r\n        ConfigHelper.DocumentationType = this.config.documentation_type ?? 'md'\r\n        if (ConfigHelper.DocumentExtension.indexOf('.') != 0) ConfigHelper.DocumentExtension = '.' + ConfigHelper.DocumentExtension;\r\n        if (projectConfig.aiService) {\r\n            this.config.aiService = new projectConfig.aiService()\r\n        } else {\r\n            this.config.aiService = new OpenAIService();\r\n        }\r\n        ConfigHelper.CacheFilePath = this.config.cache_file ?? '.code-narrator/cache.json';\r\n    }\r\n\r\n    public static getUserDefinedExamples(config : ICodeNarratorConfig) {\r\n        let readMeBuilder: IBuilder = {\r\n            name: \"README\",\r\n            type: \"README\",\r\n            template: \"README\",\r\n            sidebarPosition: 1,\r\n            args:\r\n                {\r\n                    entryFileContent: `content(${config.project_file ?? ''})`\r\n                }\r\n        }\r\n        let howToPage : IBuilder = {\r\n            name : \"HowTo Example\",\r\n            type : \"howto\",\r\n            template : \"howto_create_howto\"\r\n        }\r\n        let howToBuilder : IBuilder = {\r\n            name : \"HowTo Overview\",\r\n            type : \"README\",\r\n            template : 'overview_readme',\r\n            path : 'howto',\r\n            files : [\r\n                {\r\n                    path: 'howto/*.md'\r\n\r\n                }\r\n            ],\r\n            pages : [\r\n                howToPage\r\n            ]\r\n        }\r\n        return [readMeBuilder, howToBuilder]\r\n    }\r\n}\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "These files might help with documentation."
			}
		],
		"id": "src\\config\\ConfigHelper.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "DefaultSettings.ts",
		"path": "src\\config\\DefaultSettings.ts",
		"folderPath": "src\\config",
		"fileContent": "import ConfigurationBuilder from \"../documentation/plugins/builders/Configuration/ConfigurationBuilder\";\r\nimport FilesBuilder from \"../documentation/plugins/builders/Files/FilesBuilder\";\r\nimport FoldersBuilder from \"../documentation/plugins/builders/Folders/FoldersBuilder\";\r\nimport UserDefinedBuilder from \"../documentation/plugins/builders/UserDefined/UserDefinedBuilder\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport HowToBuilder from \"../documentation/plugins/builders/Howto/HowToBuilder\";\r\nimport OpenAIService from \"../services/OpenAIService\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default class DefaultSettings {\r\n    static gptModel = 'gpt-4';\r\n    public static get() {\r\n\r\n        return {\r\n            config_files: [\"code-narrator.config.ts\"],\r\n            project_file: \"package.json\",//if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n            entry_file: \"./src/App.ts\",\r\n            cli_file: \"./src/cli.ts\",\r\n            project_path: \"./\",\r\n            source_path: \"./src\",\r\n            documentation_path: \"./docs\",\r\n            test_path: \"./test\",\r\n            exclude: this.getFilesToExclude(),\r\n            readmeRoot: true,\r\n            repository_url : \"https://github.com/ingig/code-narrator\",\r\n\r\n            //Order of plugins matter, ConfigurationGenerator runs first to get overview of the project.\r\n            builderPlugins: [\r\n                ConfigurationBuilder, FilesBuilder, FoldersBuilder, UserDefinedBuilder\r\n            ],\r\n            gptSystemCommands: [\r\n                'Act as a documentation expert for software',\r\n                'If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly',\r\n                `Return your answer in {DocumentationType} format`,\r\n                `If you notice any secret information, replace it with ***** in your response`\r\n            ],\r\n            documentation_type: 'md', //What format should be generated, e.g. md, sphinx\r\n            document_file_extension: \".md\",\r\n            folderRootFileName : 'README',\r\n            cache_file: '.code-narrator/cache.json', //location of the cache file. :::warning '.code-narrator/cache.json' should be committed into git.\r\n            gptModel : this.gptModel,\r\n            aiService : OpenAIService as unknown as IGenericAIService\r\n        } as ICodeNarratorConfig\r\n    }\r\n\r\n    private static getFilesToExclude() {\r\n        let gitIgnore = FileStructure.getContent(path.join(process.cwd(), '.gitignore')).trim().split('\\n');\r\n        gitIgnore = gitIgnore.map(item => item.trim()).filter(item => item !== '')\r\n        let defaults = ['/node_modules', '.env', '/.idea', '/.git',\r\n            '.gitignore', '/.code-narrator', '/dist', '/build', 'package-lock.json']\r\n\r\n        const uniqueArray = [...new Set([...gitIgnore, ...defaults])];\r\n        return uniqueArray;\r\n    }\r\n}",
		"documentation": "# DefaultSettings.ts\n\nThis file contains the `DefaultSettings` class, which is responsible for providing default configuration settings for the Code Narrator application. The class includes methods for retrieving default settings and generating a list of files to exclude from the documentation process.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Methods](#methods)\n  - [get](#get)\n  - [getFilesToExclude](#getfilestoexclude)\n- [Configuration Options](#configuration-options)\n\n## Class Description\n\nThe `DefaultSettings` class is a utility class that provides default configuration settings for the Code Narrator application. These settings include paths, file names, and other options that are used throughout the application. The class also includes methods for retrieving these default settings and generating a list of files to exclude from the documentation process.\n\n## Methods\n\n### get\n\n```typescript\npublic static get(): ICodeNarratorConfig\n```\n\nThis method returns an object containing the default configuration settings for the Code Narrator application. The returned object implements the `ICodeNarratorConfig` interface.\n\n**Returns:**\n\n- `ICodeNarratorConfig`: An object containing the default configuration settings.\n\n### getFilesToExclude\n\n```typescript\nprivate static getFilesToExclude(): string[]\n```\n\nThis method generates a list of files and folders to exclude from the documentation process. It combines the contents of the `.gitignore` file with a set of default exclusions.\n\n**Returns:**\n\n- `string[]`: An array of file and folder paths to exclude from the documentation process.\n\n## Configuration Options\n\nThe following configuration options are available in the `DefaultSettings` class:\n\n- `config_files`: An array of configuration file names.\n- `project_file`: The main project configuration file name.\n- `entry_file`: The entry point file for the application.\n- `cli_file`: The command-line interface file for the application.\n- `project_path`: The root path of the project.\n- `source_path`: The path to the source code files.\n- `documentation_path`: The path to the generated documentation files.\n- `test_path`: The path to the test files.\n- `exclude`: An array of file and folder paths to exclude from the documentation process.\n- `readmeRoot`: A boolean indicating whether to generate a README file at the root of the documentation folder.\n- `repository_url`: The URL of the project's repository.\n- `builderPlugins`: An array of builder plugins to use for generating documentation.\n- `gptSystemCommands`: An array of GPT system commands to use for generating documentation.\n- `documentation_type`: The format of the generated documentation (e.g., 'md' for Markdown).\n- `document_file_extension`: The file extension for the generated documentation files.\n- `folderRootFileName`: The file name for the root file in each documentation folder.\n- `cache_file`: The path to the cache file.\n- `gptModel`: The GPT model to use for generating documentation.\n- `aiService`: The AI service to use for generating documentation.",
		"isFolder": false,
		"updated": "2023-04-29T15:19:11.517Z",
		"sidebar_position": 4,
		"sidebar_label": "DefaultSettings.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DefaultSettings.ts\"\r\nThe file name is: DefaultSettings.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport ConfigurationBuilder from \"../documentation/plugins/builders/Configuration/ConfigurationBuilder\";\r\nimport FilesBuilder from \"../documentation/plugins/builders/Files/FilesBuilder\";\r\nimport FoldersBuilder from \"../documentation/plugins/builders/Folders/FoldersBuilder\";\r\nimport UserDefinedBuilder from \"../documentation/plugins/builders/UserDefined/UserDefinedBuilder\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport HowToBuilder from \"../documentation/plugins/builders/Howto/HowToBuilder\";\r\nimport OpenAIService from \"../services/OpenAIService\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default class DefaultSettings {\r\n    static gptModel = 'gpt-4';\r\n    public static get() {\r\n\r\n        return {\r\n            config_files: [\"code-narrator.config.ts\"],\r\n            project_file: \"package.json\",//if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n            entry_file: \"./src/App.ts\",\r\n            cli_file: \"./src/cli.ts\",\r\n            project_path: \"./\",\r\n            source_path: \"./src\",\r\n            documentation_path: \"./docs\",\r\n            test_path: \"./test\",\r\n            exclude: this.getFilesToExclude(),\r\n            readmeRoot: true,\r\n            repository_url : \"https://github.com/ingig/code-narrator\",\r\n\r\n            //Order of plugins matter, ConfigurationGenerator runs first to get overview of the project.\r\n            builderPlugins: [\r\n                ConfigurationBuilder, FilesBuilder, FoldersBuilder, UserDefinedBuilder\r\n            ],\r\n            gptSystemCommands: [\r\n                'Act as a documentation expert for software',\r\n                'If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly',\r\n                `Return your answer in {DocumentationType} format`,\r\n                `If you notice any secret information, replace it with ***** in your response`\r\n            ],\r\n            documentation_type: 'md', //What format should be generated, e.g. md, sphinx\r\n            document_file_extension: \".md\",\r\n            folderRootFileName : 'README',\r\n            cache_file: '.code-narrator/cache.json', //location of the cache file. :::warning '.code-narrator/cache.json' should be committed into git.\r\n            gptModel : this.gptModel,\r\n            aiService : OpenAIService as unknown as IGenericAIService\r\n        } as ICodeNarratorConfig\r\n    }\r\n\r\n    private static getFilesToExclude() {\r\n        let gitIgnore = FileStructure.getContent(path.join(process.cwd(), '.gitignore')).trim().split('\\n');\r\n        gitIgnore = gitIgnore.map(item => item.trim()).filter(item => item !== '')\r\n        let defaults = ['/node_modules', '.env', '/.idea', '/.git',\r\n            '.gitignore', '/.code-narrator', '/dist', '/build', 'package-lock.json']\r\n\r\n        const uniqueArray = [...new Set([...gitIgnore, ...defaults])];\r\n        return uniqueArray;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\DefaultSettings.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "IBuilder.ts",
		"path": "src\\config\\IBuilder.ts",
		"folderPath": "src\\config",
		"fileContent": "export default interface IBuilder {\r\n    type: BuilderType\r\n    name: string;\r\n    title?: string;\r\n    template: string;\r\n    args?: any;\r\n    files?: IFile[];\r\n    path? : string;\r\n    sidebarPosition?: number;\r\n    sidebarLabel?: string;\r\n    pages? : IBuilder[];\r\n}\r\nexport type BuilderType = 'howto' | 'faq' | 'tutorial' | 'README' | 'custom';\r\n\r\nexport interface IFile {\r\n    path: string;\r\n    JSONPath?: string[];\r\n    extract? : string[];\r\n}\r\n",
		"documentation": "# IBuilder.ts\n\nThis TypeScript file defines the `IBuilder` interface, which is used to represent a builder object in the application. The builder object is responsible for generating documentation pages based on the provided configuration. The file also defines the `BuilderType` type and the `IFile` interface.\n\n## Table of Contents\n\n- [IBuilder Interface](#ibuilder-interface)\n- [BuilderType Type](#buildertype-type)\n- [IFile Interface](#ifile-interface)\n- [Examples](#examples)\n\n## IBuilder Interface\n\nThe `IBuilder` interface represents a builder object with the following properties:\n\n- `type`: A `BuilderType` value that specifies the type of the builder.\n- `name`: A `string` that represents the unique name of the builder.\n- `title?`: An optional `string` that represents the title of the generated documentation page.\n- `template`: A `string` that specifies the template file to be used for generating the documentation page.\n- `args?`: An optional `any` type that can be used to pass additional arguments to the builder.\n- `files?`: An optional array of `IFile` objects that represent the files to be included in the generated documentation page.\n- `path?`: An optional `string` that specifies the output path for the generated documentation page.\n- `sidebarPosition?`: An optional `number` that determines the position of the generated page in the sidebar.\n- `sidebarLabel?`: An optional `string` that specifies the label for the generated page in the sidebar.\n- `pages?`: An optional array of `IBuilder` objects that represent the child pages of the generated documentation page.\n\n## BuilderType Type\n\nThe `BuilderType` type is a union type that can have one of the following values:\n\n- `'howto'`: Represents a how-to guide.\n- `'faq'`: Represents a frequently asked questions (FAQ) page.\n- `'tutorial'`: Represents a tutorial.\n- `'README'`: Represents a README file.\n- `'custom'`: Represents a custom documentation page.\n\n## IFile Interface\n\nThe `IFile` interface represents a file object with the following properties:\n\n- `path`: A `string` that specifies the file path.\n- `JSONPath?`: An optional array of `string` values that represent the JSON paths to be extracted from the file.\n- `extract?`: An optional array of `string` values that specify the sections to be extracted from the file.\n\n## Examples\n\n### Example 1: Creating a How-to Guide Builder\n\n```typescript\nconst howToBuilder: IBuilder = {\n  type: 'howto',\n  name: 'installing-dependencies',\n  title: 'Installing Dependencies',\n  template: 'howto-template.md',\n  path: 'guides/installing-dependencies.md',\n  sidebarPosition: 1,\n  sidebarLabel: 'Installing Dependencies',\n};\n```\n\n### Example 2: Creating a Tutorial Builder with Child Pages\n\n```typescript\nconst tutorialBuilder: IBuilder = {\n  type: 'tutorial',\n  name: 'getting-started',\n  title: 'Getting Started',\n  template: 'tutorial-template.md',\n  path: 'tutorials/getting-started.md',\n  sidebarPosition: 2,\n  sidebarLabel: 'Getting Started',\n  pages: [\n    {\n      type: 'tutorial',\n      name: 'step-1',\n      title: 'Step 1: Setting Up the Environment',\n      template: 'tutorial-step-template.md',\n      path: 'tutorials/getting-started/step-1.md',\n    },\n    {\n      type: 'tutorial',\n      name: 'step-2',\n      title: 'Step 2: Creating Your First Project',\n      template: 'tutorial-step-template.md',\n      path: 'tutorials/getting-started/step-2.md',\n    },\n  ],\n};\n```",
		"isFolder": false,
		"updated": "2023-04-28T09:24:12.314Z",
		"sidebar_position": 5,
		"sidebar_label": "IBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"IBuilder.ts\"\r\nThe file name is: IBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default interface IBuilder {\r\n    type: BuilderType\r\n    name: string;\r\n    title?: string;\r\n    template: string;\r\n    args?: any;\r\n    files?: IFile[];\r\n    path? : string;\r\n    sidebarPosition?: number;\r\n    sidebarLabel?: string;\r\n    pages? : IBuilder[];\r\n}\r\nexport type BuilderType = 'howto' | 'faq' | 'tutorial' | 'README' | 'custom';\r\n\r\nexport interface IFile {\r\n    path: string;\r\n    JSONPath?: string[];\r\n    extract? : string[];\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "src\\config\\IBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "ICodeNarratorConfig.ts",
		"path": "src\\config\\ICodeNarratorConfig.ts",
		"folderPath": "src\\config",
		"fileContent": "import IBuilder from \"./IBuilder\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default interface ICodeNarratorConfig {\r\n    project_name : string;\r\n    repository_url : string;\r\n    project_file: string;\r\n    config_files: string[]; //if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n    entry_file: string;\r\n    cli_file: string;\r\n    project_path: string;\r\n    source_path: string;\r\n    documentation_path: string;\r\n    test_path: string;\r\n\r\n    readmeRoot: boolean;\r\n    builderPlugins: any[]\r\n    generatorPlugin: any[]\r\n    gptSystemCommands: string[]\r\n    documentation_type: string\r\n    document_file_extension: string\r\n    folderRootFileName : string;\r\n    cache_file: string;\r\n    gptModel : string;\r\n    builders : IBuilder[]\r\n    include : string[];\r\n    exclude : string[];\r\n    aiService : any;\r\n}",
		"documentation": "# ICodeNarratorConfig.ts\n\nThis is a TypeScript interface file that defines the structure of the configuration object for the ICodeNarrator application. The ICodeNarratorConfig interface contains properties that are essential for the proper functioning of the application, such as project settings, file paths, and plugin configurations.\n\n## Interface Properties\n\nThe ICodeNarratorConfig interface contains the following properties:\n\n### project_name: string\n\nThe name of the project.\n\n### repository_url: string\n\nThe URL of the project's repository.\n\n### project_file: string\n\nThe main project file.\n\n### config_files: string[]\n\nAn array of configuration files specific to the application, e.g., \"code-narrator.config.ts\" for the Code Narrator application.\n\n### entry_file: string\n\nThe entry point file of the project.\n\n### cli_file: string\n\nThe command-line interface file for the project.\n\n### project_path: string\n\nThe path to the project folder.\n\n### source_path: string\n\nThe path to the source code folder.\n\n### documentation_path: string\n\nThe path to the documentation folder.\n\n### test_path: string\n\nThe path to the test folder.\n\n### readmeRoot: boolean\n\nA flag indicating whether to generate documentation at the root level of the project.\n\n### builderPlugins: any[]\n\nAn array of builder plugins used in the project.\n\n### generatorPlugin: any[]\n\nAn array of generator plugins used in the project.\n\n### gptSystemCommands: string[]\n\nAn array of GPT system commands used in the project.\n\n### documentation_type: string\n\nThe type of documentation to generate, e.g., \"md\" for Markdown.\n\n### document_file_extension: string\n\nThe file extension for the generated documentation files.\n\n### folderRootFileName: string\n\nThe name of the root file in each folder.\n\n### cache_file: string\n\nThe cache file used by the application.\n\n### gptModel: string\n\nThe GPT model used for generating documentation.\n\n### builders: IBuilder[]\n\nAn array of builder instances used in the project.\n\n### include: string[]\n\nAn array of file patterns to include in the documentation generation process.\n\n### exclude: string[]\n\nAn array of file patterns to exclude from the documentation generation process.\n\n### aiService: any\n\nThe AI service used in the project, implementing the IGenericAIService interface.\n\n## Usage\n\nTo use the ICodeNarratorConfig interface, create a configuration object that implements the interface and provide the necessary property values. For example:\n\n```typescript\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\n\nconst config: ICodeNarratorConfig = {\n  project_name: \"MyProject\",\n  repository_url: \"https://github.com/user/myproject\",\n  project_file: \"myproject.ts\",\n  config_files: [\"code-narrator.config.ts\"],\n  entry_file: \"index.ts\",\n  cli_file: \"cli.ts\",\n  project_path: \"/path/to/myproject\",\n  source_path: \"/path/to/myproject/src\",\n  documentation_path: \"/path/to/myproject/docs\",\n  test_path: \"/path/to/myproject/test\",\n  readmeRoot: true,\n  builderPlugins: [],\n  generatorPlugin: [],\n  gptSystemCommands: [],\n  documentation_type: \"md\",\n  document_file_extension: \".md\",\n  folderRootFileName: \"README.md\",\n  cache_file: \"cache.json\",\n  gptModel: \"gpt-3\",\n  builders: [],\n  include: [\"**/*.ts\"],\n  exclude: [\"**/*.test.ts\"],\n  aiService: {},\n};\n```\n\nThis configuration object can then be passed to the ICodeNarrator application to generate documentation based on the provided settings.",
		"isFolder": false,
		"updated": "2023-04-29T15:20:55.264Z",
		"sidebar_position": 6,
		"sidebar_label": "ICodeNarratorConfig.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ICodeNarratorConfig.ts\"\r\nThe file name is: ICodeNarratorConfig.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport IBuilder from \"./IBuilder\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default interface ICodeNarratorConfig {\r\n    project_name : string;\r\n    repository_url : string;\r\n    project_file: string;\r\n    config_files: string[]; //if you have specific app config file, e.g. for code-narrator, \"code-narrator.config.ts\" is the app config file\r\n    entry_file: string;\r\n    cli_file: string;\r\n    project_path: string;\r\n    source_path: string;\r\n    documentation_path: string;\r\n    test_path: string;\r\n\r\n    readmeRoot: boolean;\r\n    builderPlugins: any[]\r\n    generatorPlugin: any[]\r\n    gptSystemCommands: string[]\r\n    documentation_type: string\r\n    document_file_extension: string\r\n    folderRootFileName : string;\r\n    cache_file: string;\r\n    gptModel : string;\r\n    builders : IBuilder[]\r\n    include : string[];\r\n    exclude : string[];\r\n    aiService : any;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\ICodeNarratorConfig.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "Document.ts",
		"path": "src\\documentation\\Document.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import fs from \"fs\";\r\nimport Helper from \"../utils/Helper\";\r\nimport * as path from 'path';\r\n\r\nexport default class Document {\r\n\r\n    id : string;\r\n    name = '';\r\n    path = '';\r\n    folderPath = '';\r\n    fileContent = '';\r\n    documentation = '';\r\n    isFolder = false;\r\n    updated : Date = new Date();\r\n    sidebar_position? : number = undefined;\r\n    sidebar_label? : string = undefined;\r\n    init = false;\r\n    postInit = false;\r\n    generator: string = '';\r\n    saveToPath = '';\r\n    data : any;\r\n    documentation_type = 'md'\r\n    question = '';\r\n    requestMessages : any[] = [];\r\n    lastTouch : Date;\r\n\r\n    constructor(name: string, filePath: string, folderPath : string, updated : Date, sidebar_position? : number, sidebar_label? : string) {\r\n        this.name = name;\r\n        let project_path = process.cwd()\r\n        this.path = path.relative(project_path, filePath);\r\n        this.saveToPath = this.path;\r\n        this.id = (this.path) ? Document.getId(this.path) : Document.getId(name);\r\n        this.folderPath = folderPath;\r\n        this.isFolder = (filePath == folderPath);\r\n        this.updated = updated;\r\n        this.sidebar_position = sidebar_position;\r\n        this.sidebar_label = sidebar_label ?? Helper.upperFirstLetter(name);\r\n        if (!this.isFolder && fs.existsSync(filePath)) {\r\n            this.fileContent = fs.readFileSync(filePath).toString();\r\n        }\r\n        this.lastTouch = new Date();\r\n    }\r\n\r\n    public static getId(path: string) {\r\n        return path;\r\n    }\r\n\r\n\r\n}",
		"documentation": "# Document.ts\n\nThis is a TypeScript code file that defines a `Document` class. The class is used to represent a document with various properties and methods. The file imports necessary modules and utilities to perform its functions.\n\n## Table of Contents\n\n- [Class Definition](#class-definition)\n- [Constructor](#constructor)\n- [Methods](#methods)\n  - [getId](#getid)\n\n## Class Definition\n\nThe `Document` class has the following properties:\n\n- `id`: A unique identifier for the document.\n- `name`: The name of the document.\n- `path`: The relative path of the document.\n- `folderPath`: The path of the folder containing the document.\n- `fileContent`: The content of the document file.\n- `documentation`: The documentation associated with the document.\n- `isFolder`: A boolean indicating if the document is a folder.\n- `updated`: A `Date` object representing the last update time of the document.\n- `sidebar_position`: An optional number representing the position of the document in the sidebar.\n- `sidebar_label`: An optional string representing the label of the document in the sidebar.\n- `init`: A boolean indicating if the document has been initialized.\n- `postInit`: A boolean indicating if the document has been post-initialized.\n- `generator`: A string representing the generator used for the document.\n- `saveToPath`: The path where the document should be saved.\n- `data`: Any additional data associated with the document.\n- `documentation_type`: The type of documentation, default is 'md'.\n- `question`: A string representing a question related to the document.\n- `requestMessages`: An array of request messages.\n- `lastTouch`: A `Date` object representing the last time the document was touched.\n\n## Constructor\n\nThe constructor of the `Document` class takes the following parameters:\n\n- `name`: The name of the document.\n- `filePath`: The path of the document file.\n- `folderPath`: The path of the folder containing the document.\n- `updated`: A `Date` object representing the last update time of the document.\n- `sidebar_position?`: An optional number representing the position of the document in the sidebar.\n- `sidebar_label?`: An optional string representing the label of the document in the sidebar.\n\nThe constructor initializes the properties of the `Document` class and reads the file content if the document is not a folder and the file exists.\n\n## Methods\n\n### getId\n\nThe `getId` method is a static method that takes a `path` parameter and returns the path as the unique identifier for the document.\n\n```typescript\npublic static getId(path: string) {\n    return path;\n}\n```\n\nUsage:\n\n```typescript\nconst documentId = Document.getId(\"path/to/document\");\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:08:16.963Z",
		"sidebar_position": 0,
		"sidebar_label": "Document.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Document.ts\"\r\nThe file name is: Document.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport Helper from \"../utils/Helper\";\r\nimport * as path from 'path';\r\n\r\nexport default class Document {\r\n\r\n    id : string;\r\n    name = '';\r\n    path = '';\r\n    folderPath = '';\r\n    fileContent = '';\r\n    documentation = '';\r\n    isFolder = false;\r\n    updated : Date = new Date();\r\n    sidebar_position? : number = undefined;\r\n    sidebar_label? : string = undefined;\r\n    init = false;\r\n    postInit = false;\r\n    generator: string = '';\r\n    saveToPath = '';\r\n    data : any;\r\n    documentation_type = 'md'\r\n    question = '';\r\n    requestMessages : any[] = [];\r\n    lastTouch : Date;\r\n\r\n    constructor(name: string, filePath: string, folderPath : string, updated : Date, sidebar_position? : number, sidebar_label? : string) {\r\n        this.name = name;\r\n        let project_path = process.cwd()\r\n        this.path = path.relative(project_path, filePath);\r\n        this.saveToPath = this.path;\r\n        this.id = (this.path) ? Document.getId(this.path) : Document.getId(name);\r\n        this.folderPath = folderPath;\r\n        this.isFolder = (filePath == folderPath);\r\n        this.updated = updated;\r\n        this.sidebar_position = sidebar_position;\r\n        this.sidebar_label = sidebar_label ?? Helper.upperFirstLetter(name);\r\n        if (!this.isFolder && fs.existsSync(filePath)) {\r\n            this.fileContent = fs.readFileSync(filePath).toString();\r\n        }\r\n        this.lastTouch = new Date();\r\n    }\r\n\r\n    public static getId(path: string) {\r\n        return path;\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\Document.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "DocumentationBuilder.ts",
		"path": "src\\documentation\\DocumentationBuilder.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import OpenAIService from \"../services/OpenAIService\";\r\nimport BaseBuilder from \"./plugins/builders/BaseBuilder\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default class DocumentationBuilder {\r\n    aiService: IGenericAIService;\r\n    projectPath: string;\r\n\r\n    constructor() {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n        this.projectPath = __dirname;\r\n    }\r\n\r\n    public async build() {\r\n        let plugins = ConfigHelper.BuilderPlugins;\r\n        for (let i = 0; i < plugins.length; i++) {\r\n            let generator: BaseBuilder;\r\n            if (plugins[i].default) {\r\n                generator = new plugins[i].default() as BaseBuilder;\r\n            } else {\r\n                generator = new plugins[i]() as BaseBuilder;\r\n            }\r\n            let userDefined = (ConfigHelper.config as any)?.userDefined;\r\n            if (userDefined && generator.generator != 'UserDefined') {\r\n                continue;\r\n            }\r\n\r\n            await generator.generateUsingPlugin();\r\n        }\r\n    }\r\n\r\n}",
		"documentation": "# DocumentationBuilder.ts\n\nThis is a TypeScript code file that defines the `DocumentationBuilder` class. The class is responsible for building documentation using various plugins. It imports necessary modules and services, and then iterates through the configured plugins to generate documentation.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n  - [build](#build)\n- [Parameters](#parameters)\n\n## Class Description\n\nThe `DocumentationBuilder` class is responsible for building documentation using various plugins. It imports necessary modules and services, and then iterates through the configured plugins to generate documentation.\n\n## Examples\n\nTo use the `DocumentationBuilder` class, you can create an instance and call the `build` method:\n\n```typescript\nconst documentationBuilder = new DocumentationBuilder();\nawait documentationBuilder.build();\n```\n\n## Methods\n\n### constructor\n\nThe constructor initializes the `DocumentationBuilder` instance. It sets the `aiService` and `projectPath` properties.\n\n```typescript\nconstructor()\n```\n\n### build\n\nThe `build` method is an asynchronous method that iterates through the configured plugins and generates documentation using each plugin. It checks if the plugin has a default export, and if not, it uses the plugin directly. It also checks if the user has defined any custom configuration and skips the plugin if it's not a user-defined generator.\n\n```typescript\npublic async build()\n```\n\n## Parameters\n\n- `aiService`: An instance of `IGenericAIService`, which is the AI service used for generating documentation.\n- `projectPath`: A string representing the project path where the documentation will be generated.\n\n## Technical Concepts\n\n- `IGenericAIService`: An interface that defines the structure of an AI service used for generating documentation.\n- `BaseBuilder`: A base class for creating documentation builder plugins.\n- `ConfigHelper`: A helper class for managing configuration settings.\n- `__dirname`: A global variable in Node.js that contains the directory path of the current module.",
		"isFolder": false,
		"updated": "2023-04-29T15:21:58.012Z",
		"sidebar_position": 1,
		"sidebar_label": "DocumentationBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocumentationBuilder.ts\"\r\nThe file name is: DocumentationBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport OpenAIService from \"../services/OpenAIService\";\r\nimport BaseBuilder from \"./plugins/builders/BaseBuilder\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default class DocumentationBuilder {\r\n    aiService: IGenericAIService;\r\n    projectPath: string;\r\n\r\n    constructor() {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n        this.projectPath = __dirname;\r\n    }\r\n\r\n    public async build() {\r\n        let plugins = ConfigHelper.BuilderPlugins;\r\n        for (let i = 0; i < plugins.length; i++) {\r\n            let generator: BaseBuilder;\r\n            if (plugins[i].default) {\r\n                generator = new plugins[i].default() as BaseBuilder;\r\n            } else {\r\n                generator = new plugins[i]() as BaseBuilder;\r\n            }\r\n            let userDefined = (ConfigHelper.config as any)?.userDefined;\r\n            if (userDefined && generator.generator != 'UserDefined') {\r\n                continue;\r\n            }\r\n\r\n            await generator.generateUsingPlugin();\r\n        }\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\DocumentationBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "DocumentationCache.ts",
		"path": "src\\documentation\\DocumentationCache.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import fs from \"fs\";\r\nimport Document from \"../documentation/Document\";\r\nimport path from \"path\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport DocumentationGenerator from \"./DocumentationGenerator\";\r\n\r\n/*\r\n:::danger Make sure to add the cache file (default is .codenarrator\\cache.json) to git, so you don't have to query GPT on each run.\r\n */\r\nexport default class DocumentationCache {\r\n\r\n    static Documents : Document[] | null = null;\r\n\r\n    private constructor() {\r\n        if (fs.existsSync(ConfigHelper.CacheFilePath)) {\r\n            let str = fs.readFileSync(ConfigHelper.CacheFilePath).toString();\r\n            DocumentationCache.Documents = JSON.parse(str) as Document[];\r\n        } else {\r\n            fs.mkdirSync(path.dirname(ConfigHelper.CacheFilePath), {recursive: true})\r\n            fs.writeFileSync(ConfigHelper.CacheFilePath, \"[]\");\r\n            DocumentationCache.Documents = [];\r\n        }\r\n    }\r\n\r\n    public static load() {\r\n        new DocumentationCache();\r\n    }\r\n    public static getIndex(id : string) : number {\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].id == id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    public static get(path: string) : Document | undefined {\r\n        let id = Document.getId(path);\r\n        let idx = this.getIndex(id);\r\n        if (!DocumentationCache.Documents || idx == -1) return;\r\n\r\n        let doc = DocumentationCache.Documents[idx];\r\n        doc.lastTouch = App.StartTime;\r\n        DocumentationCache.set(doc);\r\n        return doc;\r\n    }\r\n    static remove(document : Document) {\r\n        let idx = DocumentationCache.getIndex(Document.getId(document.path))\r\n        if (idx != -1 && DocumentationCache.Documents) {\r\n            delete DocumentationCache.Documents[idx];\r\n        }\r\n        let docPath = ConfigHelper.config.documentation_path;\r\n        let filePath = path.join(docPath, document.path);\r\n        if (fs.existsSync(filePath)) {\r\n            fs.rmSync(filePath)\r\n        }\r\n\r\n    }\r\n\r\n    static set(document: Document) {\r\n        let idx = this.getIndex(document.id);\r\n        if (idx == -1) {\r\n            DocumentationCache.Documents?.push(document);\r\n        } else {\r\n            DocumentationCache.Documents![idx] = document;\r\n        }\r\n        let content = JSON.stringify(DocumentationCache.Documents, null,'\\t');\r\n\r\n        fs.writeFileSync(ConfigHelper.CacheFilePath, content);\r\n    }\r\n\r\n    static getByFolderPath(path: string) {\r\n        let suggestions : Document[] = [];\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].folderPath == path) {\r\n                suggestions.push(DocumentationCache.Documents[i])\r\n            }\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n    static getFolderByFolderPath(path: string) {\r\n\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].generator == 'Folders'\r\n                    && DocumentationCache.Documents[i].folderPath == path) {\r\n                return DocumentationCache.Documents[i]\r\n            }\r\n        }\r\n\r\n    }\r\n}",
		"documentation": "# DocumentationCache.ts\n\nThis file contains the `DocumentationCache` class, which is responsible for managing the cache of documentation files. It provides methods to load, get, set, and remove documents from the cache, as well as methods to retrieve documents by their folder path.\n\n## Table of Contents\n\n- [Class: DocumentationCache](#class-documentationcache)\n  - [Static Properties](#static-properties)\n  - [Constructor](#constructor)\n  - [Static Methods](#static-methods)\n    - [load()](#load)\n    - [getIndex(id: string)](#getindexid-string)\n    - [get(path: string)](#getpath-string)\n    - [remove(document: Document)](#removedocument-document)\n    - [set(document: Document)](#setdocument-document)\n    - [getByFolderPath(path: string)](#getbyfolderpathpath-string)\n    - [getFolderByFolderPath(path: string)](#getfolderbyfolderpathpath-string)\n\n## Class: DocumentationCache\n\n### Static Properties\n\n- `Documents: Document[] | null`: An array of `Document` objects representing the cached documents, or `null` if the cache is not initialized.\n\n### Constructor\n\nThe constructor is private and should not be called directly. Instead, use the `load()` method to initialize the cache.\n\n### Static Methods\n\n#### load()\n\nInitializes the `DocumentationCache` by loading the cache file from disk. If the cache file does not exist, it creates an empty cache file.\n\n#### getIndex(id: string)\n\nReturns the index of the document with the specified `id` in the `Documents` array. If the document is not found, it returns `-1`.\n\n- `id: string`: The ID of the document to find.\n\n#### get(path: string)\n\nReturns the `Document` object with the specified `path`. If the document is not found in the cache, it returns `undefined`.\n\n- `path: string`: The path of the document to retrieve.\n\n#### remove(document: Document)\n\nRemoves the specified `Document` object from the cache and deletes the corresponding file from disk.\n\n- `document: Document`: The document to remove.\n\n#### set(document: Document)\n\nAdds or updates the specified `Document` object in the cache and saves the cache to disk.\n\n- `document: Document`: The document to add or update.\n\n#### getByFolderPath(path: string)\n\nReturns an array of `Document` objects that have the specified `folderPath`.\n\n- `path: string`: The folder path to search for.\n\n#### getFolderByFolderPath(path: string)\n\nReturns the `Document` object that represents a folder with the specified `folderPath` and has a generator of type 'Folders'. If no such document is found, it returns `undefined`.\n\n- `path: string`: The folder path to search for.\n\n:::danger\nMake sure to add the cache file (default is .codenarrator\\cache.json) to git, so you don't have to query GPT on each run.\n:::",
		"isFolder": false,
		"updated": "2023-04-29T12:34:24.349Z",
		"sidebar_position": 2,
		"sidebar_label": "DocumentationCache.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocumentationCache.ts\"\r\nThe file name is: DocumentationCache.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport Document from \"../documentation/Document\";\r\nimport path from \"path\";\r\nimport App from \"../App\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport DocumentationGenerator from \"./DocumentationGenerator\";\r\n\r\n/*\r\n:::danger Make sure to add the cache file (default is .codenarrator\\cache.json) to git, so you don't have to query GPT on each run.\r\n */\r\nexport default class DocumentationCache {\r\n\r\n    static Documents : Document[] | null = null;\r\n\r\n    private constructor() {\r\n        if (fs.existsSync(ConfigHelper.CacheFilePath)) {\r\n            let str = fs.readFileSync(ConfigHelper.CacheFilePath).toString();\r\n            DocumentationCache.Documents = JSON.parse(str) as Document[];\r\n        } else {\r\n            fs.mkdirSync(path.dirname(ConfigHelper.CacheFilePath), {recursive: true})\r\n            fs.writeFileSync(ConfigHelper.CacheFilePath, \"[]\");\r\n            DocumentationCache.Documents = [];\r\n        }\r\n    }\r\n\r\n    public static load() {\r\n        new DocumentationCache();\r\n    }\r\n    public static getIndex(id : string) : number {\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].id == id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n    public static get(path: string) : Document | undefined {\r\n        let id = Document.getId(path);\r\n        let idx = this.getIndex(id);\r\n        if (!DocumentationCache.Documents || idx == -1) return;\r\n\r\n        let doc = DocumentationCache.Documents[idx];\r\n        doc.lastTouch = App.StartTime;\r\n        DocumentationCache.set(doc);\r\n        return doc;\r\n    }\r\n    static remove(document : Document) {\r\n        let idx = DocumentationCache.getIndex(Document.getId(document.path))\r\n        if (idx != -1 && DocumentationCache.Documents) {\r\n            delete DocumentationCache.Documents[idx];\r\n        }\r\n        let docPath = ConfigHelper.config.documentation_path;\r\n        let filePath = path.join(docPath, document.path);\r\n        if (fs.existsSync(filePath)) {\r\n            fs.rmSync(filePath)\r\n        }\r\n\r\n    }\r\n\r\n    static set(document: Document) {\r\n        let idx = this.getIndex(document.id);\r\n        if (idx == -1) {\r\n            DocumentationCache.Documents?.push(document);\r\n        } else {\r\n            DocumentationCache.Documents![idx] = document;\r\n        }\r\n        let content = JSON.stringify(DocumentationCache.Documents, null,'\\t');\r\n\r\n        fs.writeFileSync(ConfigHelper.CacheFilePath, content);\r\n    }\r\n\r\n    static getByFolderPath(path: string) {\r\n        let suggestions : Document[] = [];\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].folderPath == path) {\r\n                suggestions.push(DocumentationCache.Documents[i])\r\n            }\r\n        }\r\n        return suggestions;\r\n    }\r\n\r\n    static getFolderByFolderPath(path: string) {\r\n\r\n        for (let i=0; DocumentationCache.Documents && i<DocumentationCache.Documents.length; i++) {\r\n            if (DocumentationCache.Documents[i] && DocumentationCache.Documents[i].generator == 'Folders'\r\n                    && DocumentationCache.Documents[i].folderPath == path) {\r\n                return DocumentationCache.Documents[i]\r\n            }\r\n        }\r\n\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\DocumentationCache.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "DocumentationGenerator.ts",
		"path": "src\\documentation\\DocumentationGenerator.ts",
		"folderPath": "src\\documentation",
		"fileContent": "import fs from \"fs\";\r\nimport DocumentationCache from \"./DocumentationCache\";\r\nimport path from \"path\";\r\nimport BaseGenerator from \"./plugins/generators/BaseGenerator\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport App from \"../App\";\r\nimport Document from \"./Document\";\r\n\r\nexport default class DocumentationGenerator {\r\n\r\n    public make(document? : Document) {\r\n        let documents : Document[] | null = [];\r\n        if (document) {\r\n            documents.push(document);\r\n        } else {\r\n            documents = DocumentationCache.Documents;\r\n        }\r\n        if (!documents) return;\r\n\r\n        let config = ConfigHelper.config;\r\n        if (config.readmeRoot && !document) {\r\n            let documents = DocumentationCache.getByFolderPath('')\r\n            documents = documents.filter(doc => doc.name.toUpperCase() == 'README');\r\n            if (documents.length > 0) {\r\n                fs.writeFileSync(path.join(config.project_path, 'README.md'), documents[0].documentation);\r\n            }\r\n        }\r\n        let project_path = process.cwd();\r\n\r\n\r\n        let plugins = config.generatorPlugin;\r\n        for (let i = 0; i < documents.length; i++) {\r\n            let document = documents[i]\r\n            if (!document) continue;\r\n\r\n            for (let i = 0;plugins && i < plugins.length; i++) {\r\n                let tmp = new plugins[i].default() as BaseGenerator;\r\n                tmp.process(document)\r\n            }\r\n\r\n            let folderPath = document.folderPath.replace(project_path, '');\r\n            if (folderPath == '.\\\\' || folderPath == './') folderPath = ''\r\n            let fileName = documents[i].name;\r\n            if (fileName.toLowerCase() == 'readme') fileName = ConfigHelper.config.folderRootFileName;\r\n\r\n            let filePath = path.join(config.documentation_path, documents[i].saveToPath, fileName + ConfigHelper.config.document_file_extension);\r\n            if (document.lastTouch < App.StartTime) {\r\n                fs.rmSync(filePath)\r\n                DocumentationCache.remove(document);\r\n                continue;\r\n            }\r\n\r\n            fs.mkdirSync(path.join(config.documentation_path, documents[i].saveToPath), {recursive: true})\r\n            fs.writeFileSync(filePath, document.documentation);\r\n        }\r\n\r\n\r\n    }\r\n}",
		"documentation": "# DocumentationGenerator.ts\n\nThis is a TypeScript code file that defines the `DocumentationGenerator` class. The class is responsible for generating documentation files based on the provided documents and configuration. It also supports the use of generator plugins to customize the documentation generation process.\n\n## Usage\n\nTo use the `DocumentationGenerator` class, you need to import it and create an instance. You can then call the `make()` method to generate the documentation files.\n\n```typescript\nimport DocumentationGenerator from \"./DocumentationGenerator\";\n\nconst generator = new DocumentationGenerator();\ngenerator.make();\n```\n\nYou can also pass a `Document` object to the `make()` method to generate documentation for a specific document.\n\n```typescript\nimport DocumentationGenerator from \"./DocumentationGenerator\";\nimport Document from \"./Document\";\n\nconst document = new Document(/* ... */);\nconst generator = new DocumentationGenerator();\ngenerator.make(document);\n```\n\n## Methods\n\n### make(document?: Document)\n\nThis method generates the documentation files based on the provided documents and configuration. If a `Document` object is provided, it will generate documentation only for that document. Otherwise, it will generate documentation for all documents in the `DocumentationCache`.\n\n#### Parameters\n\n- `document` (optional): A `Document` object for which the documentation should be generated. If not provided, the method will generate documentation for all documents in the `DocumentationCache`.\n\n## Technical Concepts\n\n### Generator Plugins\n\nThe `DocumentationGenerator` class supports the use of generator plugins to customize the documentation generation process. These plugins should be instances of the `BaseGenerator` class or its subclasses. They should be specified in the configuration object under the `generatorPlugin` property.\n\nFor example, to use a custom generator plugin, you can update your configuration object like this:\n\n```javascript\nconst config = {\n  // ...\n  generatorPlugin: [\n    CustomGeneratorPlugin,\n  ],\n};\n```\n\nThe `CustomGeneratorPlugin` should be a subclass of `BaseGenerator` and implement the `process(document: Document)` method. This method will be called for each document during the documentation generation process.\n\n```typescript\nimport BaseGenerator from \"./plugins/generators/BaseGenerator\";\nimport Document from \"./Document\";\n\nclass CustomGeneratorPlugin extends BaseGenerator {\n  process(document: Document) {\n    // Custom processing logic\n  }\n}\n```\n\n### Configuration\n\nThe `DocumentationGenerator` class relies on a configuration object to determine various settings for the documentation generation process. This configuration object should be an instance of the `ConfigHelper` class and should include properties like `readmeRoot`, `project_path`, `documentation_path`, `folderRootFileName`, and `document_file_extension`.",
		"isFolder": false,
		"updated": "2023-04-29T12:37:17.085Z",
		"sidebar_position": 3,
		"sidebar_label": "DocumentationGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocumentationGenerator.ts\"\r\nThe file name is: DocumentationGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"./DocumentationCache\";\r\nimport path from \"path\";\r\nimport BaseGenerator from \"./plugins/generators/BaseGenerator\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport App from \"../App\";\r\nimport Document from \"./Document\";\r\n\r\nexport default class DocumentationGenerator {\r\n\r\n    public make(document? : Document) {\r\n        let documents : Document[] | null = [];\r\n        if (document) {\r\n            documents.push(document);\r\n        } else {\r\n            documents = DocumentationCache.Documents;\r\n        }\r\n        if (!documents) return;\r\n\r\n        let config = ConfigHelper.config;\r\n        if (config.readmeRoot && !document) {\r\n            let documents = DocumentationCache.getByFolderPath('')\r\n            documents = documents.filter(doc => doc.name.toUpperCase() == 'README');\r\n            if (documents.length > 0) {\r\n                fs.writeFileSync(path.join(config.project_path, 'README.md'), documents[0].documentation);\r\n            }\r\n        }\r\n        let project_path = process.cwd();\r\n\r\n\r\n        let plugins = config.generatorPlugin;\r\n        for (let i = 0; i < documents.length; i++) {\r\n            let document = documents[i]\r\n            if (!document) continue;\r\n\r\n            for (let i = 0;plugins && i < plugins.length; i++) {\r\n                let tmp = new plugins[i].default() as BaseGenerator;\r\n                tmp.process(document)\r\n            }\r\n\r\n            let folderPath = document.folderPath.replace(project_path, '');\r\n            if (folderPath == '.\\\\' || folderPath == './') folderPath = ''\r\n            let fileName = documents[i].name;\r\n            if (fileName.toLowerCase() == 'readme') fileName = ConfigHelper.config.folderRootFileName;\r\n\r\n            let filePath = path.join(config.documentation_path, documents[i].saveToPath, fileName + ConfigHelper.config.document_file_extension);\r\n            if (document.lastTouch < App.StartTime) {\r\n                fs.rmSync(filePath)\r\n                DocumentationCache.remove(document);\r\n                continue;\r\n            }\r\n\r\n            fs.mkdirSync(path.join(config.documentation_path, documents[i].saveToPath), {recursive: true})\r\n            fs.writeFileSync(filePath, document.documentation);\r\n        }\r\n\r\n\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\DocumentationGenerator.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "documentation"
		}
	},
	{
		"name": "GenerateOptions.ts",
		"path": "src\\documentation\\plugins\\GenerateOptions.ts",
		"folderPath": "src\\documentation\\plugins",
		"fileContent": "import Document from \"../Document\";\r\n\r\nexport interface GenerateOptions {\r\n    args?: any\r\n    template?: string;\r\n    name: string;\r\n    pathToFile: string\r\n    folderPath: string\r\n    sidebarPosition?: number\r\n    sidebarLabel?: string\r\n    saveToPath?: string;\r\n    data?: any;\r\n    assistantMessages? : string[]\r\n    prevDocument? : Document;\r\n}",
		"documentation": "# GenerateOptions.ts\n\nThis is a TypeScript code file that defines an interface named `GenerateOptions`. The interface is used to specify the options for generating a document.\n\n## Interface: GenerateOptions\n\nThe `GenerateOptions` interface contains the following properties:\n\n- `args?`: (optional) Any additional arguments that might be required for generating the document.\n- `template?`: (optional) A string representing the template to be used for generating the document.\n- `name`: A string representing the name of the document.\n- `pathToFile`: A string representing the path to the file that contains the document content.\n- `folderPath`: A string representing the path to the folder where the document will be saved.\n- `sidebarPosition?`: (optional) A number representing the position of the document in the sidebar.\n- `sidebarLabel?`: (optional) A string representing the label of the document in the sidebar.\n- `saveToPath?`: (optional) A string representing the path where the document should be saved.\n- `data?`: (optional) Any data that might be required for generating the document.\n- `assistantMessages?`: (optional) An array of strings containing messages from the assistant.\n- `prevDocument?`: (optional) An instance of the `Document` class representing the previous document.\n\n## Example Usage\n\nHere's an example of how to use the `GenerateOptions` interface:\n\n```typescript\nimport { GenerateOptions } from \"./GenerateOptions\";\n\nconst options: GenerateOptions = {\n  name: \"example-document\",\n  pathToFile: \"./example-document.md\",\n  folderPath: \"./documents\",\n  sidebarPosition: 1,\n  sidebarLabel: \"Example Document\",\n  saveToPath: \"./generated\",\n  data: {\n    title: \"Example Document\",\n    content: \"This is an example document.\",\n  },\n  assistantMessages: [\"Welcome to the example document!\"],\n};\n\nfunction generateDocument(options: GenerateOptions) {\n  // Implementation for generating the document using the provided options\n}\n```\n\nIn this example, we import the `GenerateOptions` interface and create an object `options` that conforms to the interface. We then pass this object to a `generateDocument` function, which would handle the document generation process using the provided options.",
		"isFolder": false,
		"updated": "2023-04-16T11:14:39.216Z",
		"sidebar_position": 0,
		"sidebar_label": "GenerateOptions.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"GenerateOptions.ts\"\r\nThe file name is: GenerateOptions.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../Document\";\r\n\r\nexport interface GenerateOptions {\r\n    args?: any\r\n    template?: string;\r\n    name: string;\r\n    pathToFile: string\r\n    folderPath: string\r\n    sidebarPosition?: number\r\n    sidebarLabel?: string\r\n    saveToPath?: string;\r\n    data?: any;\r\n    assistantMessages? : string[]\r\n    prevDocument? : Document;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\GenerateOptions.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "plugins"
		}
	},
	{
		"name": "BaseBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\BaseBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders",
		"fileContent": "import IGenericAIService from \"../../../services/OpenAIService\";\r\nimport Document from \"../../Document\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\nimport {Liquid} from \"liquidjs\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {GenerateOptions} from \"../GenerateOptions\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"../../../config/ICodeNarratorConfig\";\r\nimport * as process from \"process\";\r\nimport GenericAIResponse from \"../../../model/GenericAIResponse\";\r\nimport DocumentationGenerator from \"../../DocumentationGenerator\";\r\n\r\n/*\r\nThis is the Base class for Builder plugins. Builder plugins are used to generate questions for GPT\r\nand then parse the response and loading it into the document object that is later cached.\r\n */\r\nexport default abstract class BaseBuilder {\r\n    aiService: IGenericAIService;\r\n    generator: string;\r\n    config: ICodeNarratorConfig;\r\n\r\n    protected constructor(generator: string) {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n        this.generator = generator;\r\n        this.config = ConfigHelper.config;\r\n    }\r\n\r\n    public async generateUsingPlugin() {\r\n        await this.generate();\r\n    }\r\n    abstract generate(): Promise<any>;\r\n\r\n    public async getAnswer(name: string, args: any = {}, template = 'template', assistantMessages?: string[]): Promise<GenericAIResponse> {\r\n        const engine = new Liquid({\r\n            extname: '.liquid'\r\n        });\r\n        if (!args.projectName) {\r\n            args.projectName = ConfigHelper.config.project_name;\r\n        }\r\n        if (!args.fileName && name) {\r\n            args.fileName = name\r\n        }\r\n\r\n        let template_path = path.join(__dirname, `${this.generator}/${template}`);\r\n        if (this.generator == 'UserDefined') {\r\n            template_path = path.join(process.cwd(), template);\r\n        }\r\n        if (!fs.existsSync(template_path + '.liquid')) {\r\n            throw new Error(`Cannot find path ${template_path}`)\r\n        }\r\n        let question = await engine.renderFile(template_path, args)\r\n\r\n        console.log(`${new Date().toLocaleTimeString()} - Asking about ${name} using template ${template} for builder ${this.generator}`)\r\n        let response = await this.aiService.query([question!], assistantMessages);\r\n        console.log(`${new Date().toLocaleTimeString()} - Received answer for ${name}`)\r\n        return response;\r\n    }\r\n\r\n    public async generateDocumentation({\r\n                                           args = {},\r\n                                           template = 'gpt_question',\r\n                                           name,\r\n                                           pathToFile,\r\n                                           folderPath,\r\n                                           sidebarPosition,\r\n                                           assistantMessages,\r\n                                           sidebarLabel, saveToPath, data\r\n                                       }: GenerateOptions) {\r\n        if (!name) {\r\n            throw new Error(`name is missing when trying to generate ${template} for ${pathToFile}`)\r\n        }\r\n\r\n        let response = await this.getAnswer(name, args, template, assistantMessages)\r\n        let document = new Document(name, pathToFile, folderPath, new Date(), sidebarPosition, sidebarLabel)\r\n        document.documentation = response.answer;\r\n        document.requestMessages = response.requestMessages;\r\n        document.documentation_type = ConfigHelper.DocumentationType;\r\n        document.generator = this.generator;\r\n        document.saveToPath = (saveToPath) ? saveToPath : path.dirname(pathToFile);\r\n        document.data = data;\r\n        return document;\r\n    }\r\n\r\n    /*\r\n        This is where the magic happens. Retrieve the question from liquid file, input the args, ask GPT, create the document and store it in cache\r\n    */\r\n    public async generateDocumentationAndCache({\r\n                                                   args = {},\r\n                                                   template = 'gpt_question',\r\n                                                   name,\r\n                                                   pathToFile,\r\n                                                   folderPath,\r\n                                                   sidebarPosition,\r\n                                                   sidebarLabel,\r\n                                                   saveToPath,\r\n                                                   assistantMessages,\r\n                                                   data, prevDocument\r\n                                               }: GenerateOptions) {\r\n\r\n        let document = await this.generateDocumentation({\r\n            args,\r\n            template,\r\n            name,\r\n            pathToFile,\r\n            folderPath,\r\n            sidebarPosition,\r\n            assistantMessages,\r\n            sidebarLabel, saveToPath, data\r\n        })\r\n\r\n        DocumentationCache.set(document);\r\n\r\n        let documentGenerator = new DocumentationGenerator();\r\n        documentGenerator.make(document);\r\n    }\r\n\r\n    public hasChanged(document?: Document) {\r\n        if (!document) return true;\r\n\r\n        let project_path = process.cwd();\r\n        let filePath = path.join(project_path, document.path);\r\n        if (!fs.existsSync(filePath)) {\r\n            DocumentationCache.remove(document)\r\n            return false;\r\n        }\r\n        if (document.documentation_type && document.documentation_type != ConfigHelper.DocumentationType) return true;\r\n\r\n        let stats = fs.statSync(filePath);\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n\r\n    }\r\n}",
		"documentation": "# BaseBuilder.ts\n\nThe `BaseBuilder.ts` file is a TypeScript code file that defines an abstract class `BaseBuilder`. This class serves as the base class for Builder plugins, which are used to generate questions for GPT, parse the response, and load it into a document object that is later cached.\n\n## Class: BaseBuilder\n\n### Constructor\n\n- `protected constructor(generator: string)`: Initializes a new instance of the `BaseBuilder` class with the specified generator.\n\n### Properties\n\n- `aiService: IGenericAIService`: An instance of the AI service used for querying GPT.\n- `generator: string`: The generator used for generating questions.\n- `config: ICodeNarratorConfig`: The configuration object for the Code Narrator.\n\n### Methods\n\n- `public async generateUsingPlugin()`: Calls the `generate()` method to generate questions using the plugin.\n- `abstract generate(): Promise<any>`: An abstract method that must be implemented by derived classes to generate questions.\n- `public async getAnswer(name: string, args: any = {}, template = 'template', assistantMessages?: string[]): Promise<GenericAIResponse>`: Renders the question using the specified template and arguments, queries the AI service, and returns the response.\n- `public async generateDocumentation(options: GenerateOptions)`: Generates documentation using the specified options and returns a `Document` object.\n- `public async generateDocumentationAndCache(options: GenerateOptions)`: Generates documentation using the specified options, caches the document, and generates the documentation file.\n- `public hasChanged(document?: Document)`: Checks if the document has changed since the last update.\n\n## Usage\n\nTo use the `BaseBuilder` class, you need to create a derived class that implements the `generate()` method. Here's an example:\n\n```typescript\nimport BaseBuilder from \"./BaseBuilder\";\n\nclass CustomBuilder extends BaseBuilder {\n  constructor() {\n    super(\"CustomGenerator\");\n  }\n\n  async generate() {\n    // Implement your custom logic for generating questions here\n  }\n}\n\nconst customBuilder = new CustomBuilder();\ncustomBuilder.generateUsingPlugin();\n```\n\nIn the derived class, you can use the `getAnswer()` method to query the AI service and the `generateDocumentation()` and `generateDocumentationAndCache()` methods to generate and cache the documentation.\n\n```typescript\nasync generate() {\n  const name = \"example\";\n  const args = { projectName: \"MyProject\" };\n  const template = \"custom_template\";\n  const response = await this.getAnswer(name, args, template);\n\n  const options: GenerateOptions = {\n    args,\n    template,\n    name,\n    pathToFile: \"path/to/file\",\n    folderPath: \"path/to/folder\",\n    sidebarPosition: 1,\n    sidebarLabel: \"Example\",\n  };\n\n  const document = await this.generateDocumentation(options);\n  await this.generateDocumentationAndCache(options);\n}\n```\n\nRemember to handle any non-standard technical concepts that may appear in the code, such as custom configuration objects or unique AI service implementations.",
		"isFolder": false,
		"updated": "2023-04-29T15:23:24.917Z",
		"sidebar_position": 0,
		"sidebar_label": "BaseBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"BaseBuilder.ts\"\r\nThe file name is: BaseBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport IGenericAIService from \"../../../services/OpenAIService\";\r\nimport Document from \"../../Document\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\nimport {Liquid} from \"liquidjs\";\r\nimport path from \"path\";\r\nimport fs from \"fs\";\r\nimport {GenerateOptions} from \"../GenerateOptions\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport ICodeNarratorConfig from \"../../../config/ICodeNarratorConfig\";\r\nimport * as process from \"process\";\r\nimport GenericAIResponse from \"../../../model/GenericAIResponse\";\r\nimport DocumentationGenerator from \"../../DocumentationGenerator\";\r\n\r\n/*\r\nThis is the Base class for Builder plugins. Builder plugins are used to generate questions for GPT\r\nand then parse the response and loading it into the document object that is later cached.\r\n */\r\nexport default abstract class BaseBuilder {\r\n    aiService: IGenericAIService;\r\n    generator: string;\r\n    config: ICodeNarratorConfig;\r\n\r\n    protected constructor(generator: string) {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n        this.generator = generator;\r\n        this.config = ConfigHelper.config;\r\n    }\r\n\r\n    public async generateUsingPlugin() {\r\n        await this.generate();\r\n    }\r\n    abstract generate(): Promise<any>;\r\n\r\n    public async getAnswer(name: string, args: any = {}, template = 'template', assistantMessages?: string[]): Promise<GenericAIResponse> {\r\n        const engine = new Liquid({\r\n            extname: '.liquid'\r\n        });\r\n        if (!args.projectName) {\r\n            args.projectName = ConfigHelper.config.project_name;\r\n        }\r\n        if (!args.fileName && name) {\r\n            args.fileName = name\r\n        }\r\n\r\n        let template_path = path.join(__dirname, `${this.generator}/${template}`);\r\n        if (this.generator == 'UserDefined') {\r\n            template_path = path.join(process.cwd(), template);\r\n        }\r\n        if (!fs.existsSync(template_path + '.liquid')) {\r\n            throw new Error(`Cannot find path ${template_path}`)\r\n        }\r\n        let question = await engine.renderFile(template_path, args)\r\n\r\n        console.log(`${new Date().toLocaleTimeString()} - Asking about ${name} using template ${template} for builder ${this.generator}`)\r\n        let response = await this.aiService.query([question!], assistantMessages);\r\n        console.log(`${new Date().toLocaleTimeString()} - Received answer for ${name}`)\r\n        return response;\r\n    }\r\n\r\n    public async generateDocumentation({\r\n                                           args = {},\r\n                                           template = 'gpt_question',\r\n                                           name,\r\n                                           pathToFile,\r\n                                           folderPath,\r\n                                           sidebarPosition,\r\n                                           assistantMessages,\r\n                                           sidebarLabel, saveToPath, data\r\n                                       }: GenerateOptions) {\r\n        if (!name) {\r\n            throw new Error(`name is missing when trying to generate ${template} for ${pathToFile}`)\r\n        }\r\n\r\n        let response = await this.getAnswer(name, args, template, assistantMessages)\r\n        let document = new Document(name, pathToFile, folderPath, new Date(), sidebarPosition, sidebarLabel)\r\n        document.documentation = response.answer;\r\n        document.requestMessages = response.requestMessages;\r\n        document.documentation_type = ConfigHelper.DocumentationType;\r\n        document.generator = this.generator;\r\n        document.saveToPath = (saveToPath) ? saveToPath : path.dirname(pathToFile);\r\n        document.data = data;\r\n        return document;\r\n    }\r\n\r\n    /*\r\n        This is where the magic happens. Retrieve the question from liquid file, input the args, ask GPT, create the document and store it in cache\r\n    */\r\n    public async generateDocumentationAndCache({\r\n                                                   args = {},\r\n                                                   template = 'gpt_question',\r\n                                                   name,\r\n                                                   pathToFile,\r\n                                                   folderPath,\r\n                                                   sidebarPosition,\r\n                                                   sidebarLabel,\r\n                                                   saveToPath,\r\n                                                   assistantMessages,\r\n                                                   data, prevDocument\r\n                                               }: GenerateOptions) {\r\n\r\n        let document = await this.generateDocumentation({\r\n            args,\r\n            template,\r\n            name,\r\n            pathToFile,\r\n            folderPath,\r\n            sidebarPosition,\r\n            assistantMessages,\r\n            sidebarLabel, saveToPath, data\r\n        })\r\n\r\n        DocumentationCache.set(document);\r\n\r\n        let documentGenerator = new DocumentationGenerator();\r\n        documentGenerator.make(document);\r\n    }\r\n\r\n    public hasChanged(document?: Document) {\r\n        if (!document) return true;\r\n\r\n        let project_path = process.cwd();\r\n        let filePath = path.join(project_path, document.path);\r\n        if (!fs.existsSync(filePath)) {\r\n            DocumentationCache.remove(document)\r\n            return false;\r\n        }\r\n        if (document.documentation_type && document.documentation_type != ConfigHelper.DocumentationType) return true;\r\n\r\n        let stats = fs.statSync(filePath);\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\BaseBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "builders"
		}
	},
	{
		"name": "ConfigurationBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Configuration\\ConfigurationBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "import Document from \"../../../Document\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport GenerateAppConfigFiles from \"./GenerateAppConfigFiles\";\r\nimport PrepareSummary from \"./PrepareSummary\";\r\nimport GenerateGeneralConfigFiles from \"./GenerateGeneralConfigFiles\";\r\n\r\nexport default class ConfigurationBuilder extends BaseBuilder {\r\n\r\n    configFiles: string[] = []\r\n    appSpecificConfigFiles: string[] = []\r\n    updateSummary = false;\r\n\r\n    constructor() {\r\n        super('Configuration');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        if (ConfigHelper.config.config_files?.length == 0) return;\r\n\r\n        let prepareSummary = new PrepareSummary(this);\r\n        await prepareSummary.prepareSummary();\r\n\r\n        let generateAppConfigFiles = new GenerateAppConfigFiles(this);\r\n        await generateAppConfigFiles.generateAppConfigFiles();\r\n\r\n        let generateGeneralConfigFiles = new GenerateGeneralConfigFiles(this);\r\n        await generateGeneralConfigFiles.generateGeneralConfigFiles();\r\n        await this.generateSummary();\r\n    }\r\n\r\n\r\n    private async generateSummary() {\r\n        if (!this.updateSummary) {\r\n            return;\r\n        }\r\n\r\n        let data: any = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles,\r\n            configFiles: this.configFiles,\r\n            has_children: true\r\n        }\r\n\r\n        let appSpecificConfigContent = '';\r\n        for (let i = 0; i < this.appSpecificConfigFiles.length; i++) {\r\n            appSpecificConfigContent += `--- Start ${this.appSpecificConfigFiles[0]} ---\r\n            ${FileStructure.getContent(this.appSpecificConfigFiles[0])}\r\n            --- End ${this.appSpecificConfigFiles[0]} ---\r\n            `\r\n        }\r\n\r\n        let args = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles.join('\\n'),\r\n            appSpecificConfigContent,\r\n            configFiles: this.configFiles.join('\\n')\r\n        }\r\n        await super.generateDocumentationAndCache({\r\n                args: args, name: 'Configuration', saveToPath: './Configuration',\r\n                pathToFile: './Configuration', folderPath: './Configuration',\r\n                sidebarPosition: 3, data: data\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n}",
		"documentation": "# ConfigurationBuilder.ts\n\nThe `ConfigurationBuilder.ts` file is a TypeScript code file that is responsible for generating configuration documentation, including application-specific and general configuration files. It also prepares and generates a summary of the configuration files.\n\n## Usage\n\nTo use the `ConfigurationBuilder` class, you need to import it and create a new instance:\n\n```typescript\nimport ConfigurationBuilder from \"./path/to/ConfigurationBuilder\";\n\nconst configurationBuilder = new ConfigurationBuilder();\nawait configurationBuilder.generate();\n```\n\n## Class: ConfigurationBuilder\n\nThe `ConfigurationBuilder` class extends the `BaseBuilder` class and provides methods to generate configuration documentation.\n\n### Properties\n\n- `configFiles: string[]`: An array of general configuration file names.\n- `appSpecificConfigFiles: string[]`: An array of application-specific configuration file names.\n- `updateSummary: boolean`: A flag to indicate whether the summary should be updated or not.\n\n### Constructor\n\nThe constructor initializes the `ConfigurationBuilder` instance with the 'Configuration' type.\n\n```typescript\nconstructor() {\n    super('Configuration');\n}\n```\n\n### Method: generate\n\nThis method is responsible for generating the configuration documentation. It checks if there are any configuration files, prepares the summary, generates application-specific and general configuration files, and finally generates the summary.\n\n```typescript\npublic async generate(): Promise<void>\n```\n\n### Method: generateSummary\n\nThis private method generates the summary of the configuration files if the `updateSummary` flag is set to `true`. It creates the content for the summary, including the application-specific configuration files and general configuration files.\n\n```typescript\nprivate async generateSummary(): Promise<void>\n```\n\n## Technical Concepts\n\n### Importing Dependencies\n\nThe file imports several dependencies, such as `Document`, `FolderStructure`, `Helper`, `FileStructure`, `DocumentationCache`, `BaseBuilder`, `path`, `ConfigHelper`, `GenerateAppConfigFiles`, `PrepareSummary`, and `GenerateGeneralConfigFiles`. These dependencies are used throughout the class to perform various tasks related to generating configuration documentation.\n\n### Generating Configuration Documentation\n\nThe `ConfigurationBuilder` class generates configuration documentation by preparing a summary, generating application-specific configuration files, and generating general configuration files. It then generates the summary of the configuration files if the `updateSummary` flag is set to `true`.\n\n## Sections\n\n- [Usage](#usage)\n- [Class: ConfigurationBuilder](#class-configurationbuilder)\n  - [Properties](#properties)\n  - [Constructor](#constructor)\n  - [Method: generate](#method-generate)\n  - [Method: generateSummary](#method-generatesummary)\n- [Technical Concepts](#technical-concepts)\n  - [Importing Dependencies](#importing-dependencies)\n  - [Generating Configuration Documentation](#generating-configuration-documentation)",
		"isFolder": false,
		"updated": "2023-04-28T09:59:15.905Z",
		"sidebar_position": 0,
		"sidebar_label": "ConfigurationBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigurationBuilder.ts\"\r\nThe file name is: ConfigurationBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport GenerateAppConfigFiles from \"./GenerateAppConfigFiles\";\r\nimport PrepareSummary from \"./PrepareSummary\";\r\nimport GenerateGeneralConfigFiles from \"./GenerateGeneralConfigFiles\";\r\n\r\nexport default class ConfigurationBuilder extends BaseBuilder {\r\n\r\n    configFiles: string[] = []\r\n    appSpecificConfigFiles: string[] = []\r\n    updateSummary = false;\r\n\r\n    constructor() {\r\n        super('Configuration');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        if (ConfigHelper.config.config_files?.length == 0) return;\r\n\r\n        let prepareSummary = new PrepareSummary(this);\r\n        await prepareSummary.prepareSummary();\r\n\r\n        let generateAppConfigFiles = new GenerateAppConfigFiles(this);\r\n        await generateAppConfigFiles.generateAppConfigFiles();\r\n\r\n        let generateGeneralConfigFiles = new GenerateGeneralConfigFiles(this);\r\n        await generateGeneralConfigFiles.generateGeneralConfigFiles();\r\n        await this.generateSummary();\r\n    }\r\n\r\n\r\n    private async generateSummary() {\r\n        if (!this.updateSummary) {\r\n            return;\r\n        }\r\n\r\n        let data: any = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles,\r\n            configFiles: this.configFiles,\r\n            has_children: true\r\n        }\r\n\r\n        let appSpecificConfigContent = '';\r\n        for (let i = 0; i < this.appSpecificConfigFiles.length; i++) {\r\n            appSpecificConfigContent += `--- Start ${this.appSpecificConfigFiles[0]} ---\r\n            ${FileStructure.getContent(this.appSpecificConfigFiles[0])}\r\n            --- End ${this.appSpecificConfigFiles[0]} ---\r\n            `\r\n        }\r\n\r\n        let args = {\r\n            appSpecificConfigFiles: this.appSpecificConfigFiles.join('\\n'),\r\n            appSpecificConfigContent,\r\n            configFiles: this.configFiles.join('\\n')\r\n        }\r\n        await super.generateDocumentationAndCache({\r\n                args: args, name: 'Configuration', saveToPath: './Configuration',\r\n                pathToFile: './Configuration', folderPath: './Configuration',\r\n                sidebarPosition: 3, data: data\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration\\ConfigurationBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "FilesBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Files\\FilesBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Files",
		"fileContent": "import Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Ignore from \"ignore\";\r\n\r\n\r\nexport default class FilesBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('Files');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder);\r\n    }\r\n\r\n\r\n\r\n    public async queryForFolder(folder: FolderStructure) {\r\n        this.cleanDeletedFilesFromCache(folder);\r\n\r\n        let files = folder.files;\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            if (!this.shouldDocument(file)) {\r\n                continue;\r\n            }\r\n\r\n            let document = DocumentationCache.get(file.path)\r\n            if (document && document.generator != \"Files\") continue;\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            let fileName = file.name;\r\n            let fileContent = FileStructure.getContent(file.path);\r\n\r\n            let assistantMessages = [];\r\n            let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n            let match;\r\n            while ((match = regex.exec(fileContent)) !== null) {\r\n                let content = FileStructure.getContent(match[1]);\r\n                let assistantFiles = 'These files might help with documentation.'\r\n                if (content != '') {\r\n                    assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n                }\r\n                assistantMessages.push(assistantFiles)\r\n            }\r\n\r\n            let args = {fileName, fileContent}\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: args,\r\n                name: fileName,\r\n                pathToFile: file.path,\r\n                folderPath: folder.path,\r\n                sidebarPosition: i,\r\n                sidebarLabel: fileName,\r\n                assistantMessages:assistantMessages,\r\n                data : {parent:folder.name},\r\n                prevDocument : document\r\n            })\r\n        }\r\n\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private cleanDeletedFilesFromCache(folder: FolderStructure) {\r\n        let cachedFiles = DocumentationCache.getByFolderPath(folder.path);\r\n        for (let i=0;i<cachedFiles.length;i++) {\r\n            if (cachedFiles[i].isFolder && cachedFiles[i].generator != \"Files\") continue;\r\n\r\n            let fileExists = false;\r\n            for (let b=0;b<folder.files.length;b++) {\r\n                if (cachedFiles[i].path == folder.files[b].path) {\r\n                    b = folder.files.length;\r\n                    fileExists = true;\r\n                }\r\n            }\r\n            if (!fileExists) {\r\n                //console.warn(`Remove file ${cachedFiles[i].path} from cache`)\r\n                //DocumentationCache.remove(cachedFiles[i]);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private shouldDocument(file: FileStructure) {\r\n        if (!this.config.include) return true;\r\n\r\n        const ignore = Ignore();\r\n        const includePatterns = ConfigHelper.config.include\r\n        ignore.add(includePatterns);\r\n        return ignore.ignores(file.path);\r\n    }\r\n}",
		"documentation": "# FilesBuilder.ts\n\nThe `FilesBuilder.ts` file is a TypeScript module that provides a class for generating documentation for files and folders in a project. It extends the `BaseBuilder` class and uses the `DocumentationCache` to store and manage the generated documentation.\n\n## Table of Contents\n\n- [Class: FilesBuilder](#class-filesbuilder)\n  - [Constructor](#constructor)\n  - [Methods](#methods)\n    - [generate](#generate)\n    - [queryForFolder](#queryforfolder)\n    - [cleanDeletedFilesFromCache](#cleandeletedfilesfromcache)\n    - [shouldDocument](#shoulddocument)\n\n## Class: FilesBuilder\n\nThe `FilesBuilder` class is responsible for generating documentation for files and folders in a project.\n\n### Constructor\n\nThe constructor initializes the `FilesBuilder` class with the name 'Files'.\n\n```typescript\nconstructor() {\n    super('Files');\n}\n```\n\n### Methods\n\n#### generate\n\nThe `generate` method is an asynchronous method that creates a `ProjectStructure` instance, retrieves the folder structure, and calls the `queryForFolder` method with the retrieved folder.\n\n```typescript\npublic async generate() {\n    let structure = new ProjectStructure();\n    let folder = await structure.getStructure();\n    await this.queryForFolder(folder);\n}\n```\n\n#### queryForFolder\n\nThe `queryForFolder` method is an asynchronous method that takes a `FolderStructure` object as a parameter. It cleans the deleted files from the cache and iterates through the files in the folder. If a file should be documented, it generates the documentation and caches it. It also recursively calls itself for each subfolder in the folder.\n\n```typescript\npublic async queryForFolder(folder: FolderStructure) {\n    // ...\n}\n```\n\n#### cleanDeletedFilesFromCache\n\nThe `cleanDeletedFilesFromCache` method is a private method that takes a `FolderStructure` object as a parameter. It retrieves the cached files for the folder and removes the files that no longer exist in the folder.\n\n```typescript\nprivate cleanDeletedFilesFromCache(folder: FolderStructure) {\n    // ...\n}\n```\n\n#### shouldDocument\n\nThe `shouldDocument` method is a private method that takes a `FileStructure` object as a parameter. It checks if the file should be documented based on the configuration's include patterns. If the configuration does not have any include patterns, it returns true.\n\n```typescript\nprivate shouldDocument(file: FileStructure) {\n    // ...\n}\n```",
		"isFolder": false,
		"updated": "2023-04-24T20:06:33.610Z",
		"sidebar_position": 0,
		"sidebar_label": "FilesBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Files",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FilesBuilder.ts\"\r\nThe file name is: FilesBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Ignore from \"ignore\";\r\n\r\n\r\nexport default class FilesBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('Files');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder);\r\n    }\r\n\r\n\r\n\r\n    public async queryForFolder(folder: FolderStructure) {\r\n        this.cleanDeletedFilesFromCache(folder);\r\n\r\n        let files = folder.files;\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            if (!this.shouldDocument(file)) {\r\n                continue;\r\n            }\r\n\r\n            let document = DocumentationCache.get(file.path)\r\n            if (document && document.generator != \"Files\") continue;\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            let fileName = file.name;\r\n            let fileContent = FileStructure.getContent(file.path);\r\n\r\n            let assistantMessages = [];\r\n            let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n            let match;\r\n            while ((match = regex.exec(fileContent)) !== null) {\r\n                let content = FileStructure.getContent(match[1]);\r\n                let assistantFiles = 'These files might help with documentation.'\r\n                if (content != '') {\r\n                    assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n                }\r\n                assistantMessages.push(assistantFiles)\r\n            }\r\n\r\n            let args = {fileName, fileContent}\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: args,\r\n                name: fileName,\r\n                pathToFile: file.path,\r\n                folderPath: folder.path,\r\n                sidebarPosition: i,\r\n                sidebarLabel: fileName,\r\n                assistantMessages:assistantMessages,\r\n                data : {parent:folder.name},\r\n                prevDocument : document\r\n            })\r\n        }\r\n\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private cleanDeletedFilesFromCache(folder: FolderStructure) {\r\n        let cachedFiles = DocumentationCache.getByFolderPath(folder.path);\r\n        for (let i=0;i<cachedFiles.length;i++) {\r\n            if (cachedFiles[i].isFolder && cachedFiles[i].generator != \"Files\") continue;\r\n\r\n            let fileExists = false;\r\n            for (let b=0;b<folder.files.length;b++) {\r\n                if (cachedFiles[i].path == folder.files[b].path) {\r\n                    b = folder.files.length;\r\n                    fileExists = true;\r\n                }\r\n            }\r\n            if (!fileExists) {\r\n                //console.warn(`Remove file ${cachedFiles[i].path} from cache`)\r\n                //DocumentationCache.remove(cachedFiles[i]);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private shouldDocument(file: FileStructure) {\r\n        if (!this.config.include) return true;\r\n\r\n        const ignore = Ignore();\r\n        const includePatterns = ConfigHelper.config.include\r\n        ignore.add(includePatterns);\r\n        return ignore.ignores(file.path);\r\n    }\r\n}\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "These files might help with documentation."
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Files\\FilesBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Files"
		}
	},
	{
		"name": "FoldersBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Folders",
		"fileContent": "import Document from \"../../../Document\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../Base/../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\n\r\n\r\nexport default class FoldersBuilder extends BaseBuilder {\r\n\r\n    constructor() {\r\n        super('Folders');\r\n    }\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder, 30);\r\n    }\r\n\r\n    public async queryForFolder(folder: FolderStructure, position: number) {\r\n        //start on the last folder, so we can later build summary of each folder\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i], i + 30);\r\n        }\r\n        let folderName = folder.name;\r\n        if (folder.name == '') {\r\n            return;\r\n        }\r\n\r\n        let document = DocumentationCache.get(folder.path);\r\n        if (!document) {\r\n            let fileAndFolderInfo: any = [];\r\n            folder.files.map(file => {\r\n                fileAndFolderInfo.push({\r\n                    name: file.name,\r\n                    path: file.path,\r\n                    fileOrFolder: 'file',\r\n                    summary: this.getFileSummary(file)\r\n                })\r\n            })\r\n            folder.folders.map((folder) => {\r\n                fileAndFolderInfo.push({\r\n                    name: folder.name,\r\n                    path: folder.path,\r\n                    fileOrFolder: 'folder',\r\n                    summary: this.getFolderSummary(folder)\r\n                })\r\n            })\r\n\r\n            let args = {\r\n                folderName,\r\n                repositoryUrl: ConfigHelper.config.repository_url,\r\n                path: folder.path.replaceAll('\\\\', '/'),\r\n                fileAndFolderInfo: JSON.stringify(fileAndFolderInfo)\r\n            }\r\n\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    name: \"README\",\r\n                    pathToFile: folder.path,\r\n                    folderPath: folder.path,\r\n                    saveToPath: folder.path,\r\n                    sidebarPosition: position,\r\n                    sidebarLabel: folderName,\r\n                    data: {has_children: true},\r\n                    prevDocument: document\r\n\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    private getFileSummary(file: FileStructure) {\r\n        let cache = DocumentationCache.get(file.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        if (cache.documentation.length > 350) {\r\n            return cache.documentation.substring(0, 350) + '...';\r\n        }\r\n\r\n        return cache.documentation;\r\n\r\n    }\r\n\r\n\r\n    private getFolderSummary(folder: FolderStructure) {\r\n        let cache = DocumentationCache.get(folder.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n}",
		"documentation": "# FoldersBuilder.ts\n\nThe `FoldersBuilder.ts` file is a TypeScript code file that defines a class called `FoldersBuilder`. This class is responsible for generating documentation for a given folder structure and caching the generated documentation. It extends the `BaseBuilder` class and provides methods to query and generate documentation for folders and files within a project.\n\n## Usage\n\nTo use the `FoldersBuilder` class, you need to create an instance of the class and call the `generate()` method. This method will generate the documentation for the folder structure and cache it.\n\n```typescript\nconst foldersBuilder = new FoldersBuilder();\nawait foldersBuilder.generate();\n```\n\n## Class Methods\n\n### generate()\n\nThis method is responsible for generating the documentation for the folder structure. It creates a new `ProjectStructure` instance, gets the folder structure, and then calls the `queryForFolder()` method to generate the documentation for each folder.\n\n### queryForFolder(folder: FolderStructure, position: number)\n\nThis method is responsible for generating the documentation for a specific folder. It takes two parameters:\n\n- `folder`: A `FolderStructure` object representing the folder for which the documentation should be generated.\n- `position`: A number representing the position of the folder in the project structure.\n\nThe method iterates through the subfolders and files within the folder, generating the documentation for each and caching it using the `DocumentationCache` class.\n\n### getFileSummary(file: FileStructure)\n\nThis method takes a `FileStructure` object as a parameter and returns a summary of the file's documentation. It retrieves the cached documentation for the file and extracts a summary using a regular expression.\n\n### getFolderSummary(folder: FolderStructure)\n\nThis method takes a `FolderStructure` object as a parameter and returns a summary of the folder's documentation. It retrieves the cached documentation for the folder and extracts a summary using a regular expression.\n\n## Technical Concepts\n\n### FolderStructure and FileStructure\n\nThese are utility classes used to represent the structure of folders and files within a project. They provide methods to interact with the file system and retrieve information about the files and folders.\n\n### DocumentationCache\n\nThis class is responsible for caching the generated documentation for folders and files. It provides methods to store and retrieve the cached documentation.\n\n### ConfigHelper\n\nThis class is responsible for managing the configuration settings for the project. It provides methods to read and update the configuration settings.\n\n## Example\n\n```typescript\nimport FoldersBuilder from './FoldersBuilder';\n\nasync function main() {\n  const foldersBuilder = new FoldersBuilder();\n  await foldersBuilder.generate();\n}\n\nmain();\n```\n\nIn this example, we import the `FoldersBuilder` class, create an instance of the class, and call the `generate()` method to generate the documentation for the folder structure.",
		"isFolder": false,
		"updated": "2023-04-24T20:08:22.342Z",
		"sidebar_position": 0,
		"sidebar_label": "FoldersBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Folders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FoldersBuilder.ts\"\r\nThe file name is: FoldersBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../Base/../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\n\r\n\r\nexport default class FoldersBuilder extends BaseBuilder {\r\n\r\n    constructor() {\r\n        super('Folders');\r\n    }\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder, 30);\r\n    }\r\n\r\n    public async queryForFolder(folder: FolderStructure, position: number) {\r\n        //start on the last folder, so we can later build summary of each folder\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i], i + 30);\r\n        }\r\n        let folderName = folder.name;\r\n        if (folder.name == '') {\r\n            return;\r\n        }\r\n\r\n        let document = DocumentationCache.get(folder.path);\r\n        if (!document) {\r\n            let fileAndFolderInfo: any = [];\r\n            folder.files.map(file => {\r\n                fileAndFolderInfo.push({\r\n                    name: file.name,\r\n                    path: file.path,\r\n                    fileOrFolder: 'file',\r\n                    summary: this.getFileSummary(file)\r\n                })\r\n            })\r\n            folder.folders.map((folder) => {\r\n                fileAndFolderInfo.push({\r\n                    name: folder.name,\r\n                    path: folder.path,\r\n                    fileOrFolder: 'folder',\r\n                    summary: this.getFolderSummary(folder)\r\n                })\r\n            })\r\n\r\n            let args = {\r\n                folderName,\r\n                repositoryUrl: ConfigHelper.config.repository_url,\r\n                path: folder.path.replaceAll('\\\\', '/'),\r\n                fileAndFolderInfo: JSON.stringify(fileAndFolderInfo)\r\n            }\r\n\r\n            await super.generateDocumentationAndCache({\r\n                    args: args,\r\n                    name: \"README\",\r\n                    pathToFile: folder.path,\r\n                    folderPath: folder.path,\r\n                    saveToPath: folder.path,\r\n                    sidebarPosition: position,\r\n                    sidebarLabel: folderName,\r\n                    data: {has_children: true},\r\n                    prevDocument: document\r\n\r\n                }\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    private getFileSummary(file: FileStructure) {\r\n        let cache = DocumentationCache.get(file.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        if (cache.documentation.length > 350) {\r\n            return cache.documentation.substring(0, 350) + '...';\r\n        }\r\n\r\n        return cache.documentation;\r\n\r\n    }\r\n\r\n\r\n    private getFolderSummary(folder: FolderStructure) {\r\n        let cache = DocumentationCache.get(folder.path);\r\n        if (!cache) return '';\r\n\r\n        const regex = /^# .+[\\s\\S]*?^## .+/m;\r\n        const match = regex.exec(cache.documentation);\r\n\r\n        if (match && match[0]) {\r\n            return match[0].trim();\r\n        }\r\n        return '';\r\n    }\r\n\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Folders"
		}
	},
	{
		"name": "HowToBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\Howto\\HowToBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Howto",
		"fileContent": "import Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport path from \"path\";\r\n\r\nexport default class HowToBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('HowTo');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        const regex = /:::\\s*howto\\s+(.*)/;\r\n        let projectStructure = new ProjectStructure();\r\n        let files = projectStructure.getAllFiles();\r\n        for (let i = 0; i < files.length; i++) {\r\n\r\n            let content = fs.readFileSync(files[i].path).toString()\r\n            const match = content.match(regex);\r\n            if (match) {\r\n\r\n                await this.makeHowTo(files[i], content, match[1])\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private async makeHowTo(fileStructure: FileStructure, content: string, name : string) {\r\n        let document = DocumentationCache.get(path.join('howto', name))\r\n        if (document) return;\r\n\r\n        let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n        let match;\r\n        let assistantMessages : string[] = [];\r\n        while ((match = regex.exec(content)) !== null) {\r\n            let content = FileStructure.getContent(match[1]);\r\n            let assistantFiles = `This is the ref document. ${match[1]}`\r\n            if (content != '') {\r\n                assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n            }\r\n            assistantMessages.push(assistantFiles)\r\n        }\r\n\r\n\r\n        await super.generateDocumentationAndCache({\r\n            args: {fileContent: content},\r\n            name: name,\r\n            pathToFile: `howto/${name}`,\r\n            folderPath: `howto`,\r\n            saveToPath: `howto/`,\r\n            assistantMessages : assistantMessages,\r\n            prevDocument : document\r\n        })\r\n    }\r\n}",
		"documentation": "# HowToBuilder.ts\n\nThe `HowToBuilder.ts` file is a TypeScript class that extends the `BaseBuilder` class. It is responsible for generating documentation for \"how-to\" guides by parsing and extracting relevant information from the project files. The class has two main methods: `generate()` and `makeHowTo()`.\n\n## Usage\n\nTo use the `HowToBuilder` class, you need to import it and create a new instance:\n\n```typescript\nimport HowToBuilder from \"./path/to/HowToBuilder\";\n\nconst howToBuilder = new HowToBuilder();\n```\n\nThen, you can call the `generate()` method to start the documentation generation process:\n\n```typescript\nawait howToBuilder.generate();\n```\n\n## Methods\n\n### constructor()\n\nThe constructor initializes the `HowToBuilder` instance and sets the builder type to 'HowTo'.\n\n### generate(): Promise<void>\n\nThis asynchronous method generates the documentation for \"how-to\" guides. It does so by:\n\n1. Creating a new `ProjectStructure` instance and retrieving all the files in the project.\n2. Reading the content of each file and checking if it contains a \"how-to\" guide using a regular expression.\n3. If a \"how-to\" guide is found, it calls the `makeHowTo()` method to generate the documentation for that guide.\n\n### makeHowTo(fileStructure: FileStructure, content: string, name: string): Promise<void>\n\nThis private asynchronous method generates the documentation for a specific \"how-to\" guide. It takes the following parameters:\n\n- `fileStructure`: A `FileStructure` instance representing the file containing the \"how-to\" guide.\n- `content`: The content of the file as a string.\n- `name`: The name of the \"how-to\" guide.\n\nThe method performs the following steps:\n\n1. Checks if the documentation for the given \"how-to\" guide already exists in the `DocumentationCache`. If it does, the method returns immediately.\n2. Uses a regular expression to find all references to other documents in the file content.\n3. For each reference found, it retrieves the content of the referenced document and adds it to an array of assistant messages.\n4. Calls the `generateDocumentationAndCache()` method from the `BaseBuilder` class to generate the documentation and cache it.\n\n## Technical Concepts\n\n### Regular Expressions\n\nRegular expressions are used in this class to match and extract specific patterns from the file content. For example, the `generate()` method uses a regular expression to find \"how-to\" guides in the file content:\n\n```typescript\nconst regex = /:::\\s*howto\\s+(.*)/;\n```\n\nSimilarly, the `makeHowTo()` method uses a regular expression to find references to other documents in the file content:\n\n```typescript\nlet regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\n```\n\n### FileStructure and ProjectStructure\n\nThe `FileStructure` and `ProjectStructure` classes are utility classes used to manage and retrieve information about the files and folders in the project. They are used in this class to get the list of all files in the project and to retrieve the content of referenced documents.",
		"isFolder": false,
		"updated": "2023-04-24T20:10:40.242Z",
		"sidebar_position": 0,
		"sidebar_label": "HowToBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"HowToBuilder.ts\"\r\nThe file name is: HowToBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport path from \"path\";\r\n\r\nexport default class HowToBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('HowTo');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        const regex = /:::\\s*howto\\s+(.*)/;\r\n        let projectStructure = new ProjectStructure();\r\n        let files = projectStructure.getAllFiles();\r\n        for (let i = 0; i < files.length; i++) {\r\n\r\n            let content = fs.readFileSync(files[i].path).toString()\r\n            const match = content.match(regex);\r\n            if (match) {\r\n\r\n                await this.makeHowTo(files[i], content, match[1])\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private async makeHowTo(fileStructure: FileStructure, content: string, name : string) {\r\n        let document = DocumentationCache.get(path.join('howto', name))\r\n        if (document) return;\r\n\r\n        let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n        let match;\r\n        let assistantMessages : string[] = [];\r\n        while ((match = regex.exec(content)) !== null) {\r\n            let content = FileStructure.getContent(match[1]);\r\n            let assistantFiles = `This is the ref document. ${match[1]}`\r\n            if (content != '') {\r\n                assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n            }\r\n            assistantMessages.push(assistantFiles)\r\n        }\r\n\r\n\r\n        await super.generateDocumentationAndCache({\r\n            args: {fileContent: content},\r\n            name: name,\r\n            pathToFile: `howto/${name}`,\r\n            folderPath: `howto`,\r\n            saveToPath: `howto/`,\r\n            assistantMessages : assistantMessages,\r\n            prevDocument : document\r\n        })\r\n    }\r\n}\r\n###\r\n"
			},
			{
				"role": "assistant",
				"content": "These files might help with documentation."
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Howto\\HowToBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Howto"
		}
	},
	{
		"name": "UserDefinedBuilder.ts",
		"path": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilder.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"fileContent": "import Document from \"../../../Document\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport fs from \"fs\";\r\nimport jsonpath from \"jsonpath\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport UserDefinedBuilderHelper from \"./UserDefinedBuilderHelper\";\r\nimport IBuilder from \"../../../../config/IBuilder\";\r\n\r\nexport default class UserDefinedBuilder extends BaseBuilder {\r\n    constructor() {\r\n        super('UserDefined');\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public async generate() {\r\n\r\n        for (let i = 0; this.config.builders && i < this.config.builders.length; i++) {\r\n            let builder = this.config.builders[i];\r\n            let saveToPath = builder.path ?? '';\r\n            if (saveToPath == '' && builder.type == 'howto') {\r\n                saveToPath = 'howto'\r\n            }\r\n\r\n            for (let b=0;builder.pages && b<builder.pages.length;b++) {\r\n                await this.generateFromBuilder(builder.pages[b], saveToPath, (b+2), {parent:builder.name})\r\n            }\r\n            await this.generateFromBuilder(builder, saveToPath, 1, {has_children:true});\r\n        }\r\n    }\r\n\r\n    public async generateFromBuilder(builder : IBuilder, saveToPath : string, position : number, data : any) {\r\n        let project_path = process.cwd();\r\n        let templatePath = builder.template;\r\n        templatePath = `.code-narrator/gpt_questions/${templatePath}`;\r\n\r\n        if (!fs.existsSync(path.join(process.cwd(), `${templatePath}.liquid`))) {\r\n            console.log(path.join(process.cwd(), templatePath))\r\n            throw new Error(`Could not find ${builder.template}.liquid template. You can create it at ${templatePath}.liquid`)\r\n        }\r\n\r\n        let docId = path.join(saveToPath, builder.template);\r\n        let document = DocumentationCache.get(docId)\r\n        if (!document) {\r\n            docId = docId + ConfigHelper.config.document_file_extension\r\n            document = DocumentationCache.get(docId)\r\n        }\r\n        if (!this.hasTemplateChanged(document, templatePath)) return;\r\n\r\n        let helper = new UserDefinedBuilderHelper();\r\n        helper.loadArgs(builder, project_path)\r\n        let assistantMessages = await helper.getAssistantMessages(builder);\r\n\r\n        await super.generateDocumentationAndCache({\r\n            args: builder.args ?? {},\r\n            name: builder.name,\r\n            template: templatePath,\r\n            pathToFile: path.join(saveToPath, builder.template + ConfigHelper.config.document_file_extension),\r\n            folderPath: saveToPath,\r\n            saveToPath: saveToPath,\r\n            sidebarPosition: builder.sidebarPosition ?? (position + 10),\r\n            sidebarLabel: builder.sidebarLabel ?? builder.name,\r\n            assistantMessages: assistantMessages,\r\n            data : data,\r\n            prevDocument : document\r\n        })\r\n    }\r\n\r\n\r\n    private hasTemplateChanged(document: Document | undefined, templatePath: string) {\r\n        if (!document) return true;\r\n\r\n        let stats = fs.statSync(templatePath + '.liquid');\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n\r\n    }\r\n}\r\n",
		"documentation": "# UserDefinedBuilder.ts\n\nThe `UserDefinedBuilder.ts` file is a TypeScript code file that exports a `UserDefinedBuilder` class, which extends the `BaseBuilder` class. This class is responsible for generating documentation based on user-defined templates and configurations.\n\n## Class: UserDefinedBuilder\n\n### Constructor\n\nThe constructor initializes the `UserDefinedBuilder` class with the type 'UserDefined'.\n\n### Method: extractPathFromContent(input: string): string | null\n\nThis method takes an input string and extracts the content path using a regular expression. It returns the extracted path or null if no match is found.\n\n### Method: generate()\n\nThis method generates documentation for each builder in the configuration. It iterates through the builders and their pages, calling the `generateFromBuilder` method for each page and the builder itself.\n\n### Method: generateFromBuilder(builder: IBuilder, saveToPath: string, position: number, data: any)\n\nThis method generates documentation for a specific builder. It takes the following parameters:\n\n- `builder`: The builder object to generate documentation for.\n- `saveToPath`: The path where the generated documentation should be saved.\n- `position`: The position of the documentation in the sidebar.\n- `data`: Additional data to be passed to the documentation generation process.\n\nThe method first checks if the template file exists, and if not, throws an error. It then checks if the template has changed since the last documentation generation. If it has, it proceeds to generate the documentation using the `UserDefinedBuilderHelper` class and the `generateDocumentationAndCache` method from the `BaseBuilder` class.\n\n### Method: hasTemplateChanged(document: Document | undefined, templatePath: string)\n\nThis method checks if the template has changed since the last documentation generation. It takes the following parameters:\n\n- `document`: The document object representing the previously generated documentation.\n- `templatePath`: The path to the template file.\n\nThe method returns true if the template has changed, and false otherwise.\n\n## Example Usage\n\nTo use the `UserDefinedBuilder` class, you would first import it and create an instance:\n\n```typescript\nimport UserDefinedBuilder from \"./UserDefinedBuilder\";\n\nconst userDefinedBuilder = new UserDefinedBuilder();\n```\n\nThen, you can call the `generate` method to generate documentation based on the user-defined templates and configurations:\n\n```typescript\nawait userDefinedBuilder.generate();\n```\n\nYou can also call the `generateFromBuilder` method to generate documentation for a specific builder:\n\n```typescript\nawait userDefinedBuilder.generateFromBuilder(builder, saveToPath, position, data);\n```",
		"isFolder": false,
		"updated": "2023-04-24T20:12:30.427Z",
		"sidebar_position": 0,
		"sidebar_label": "UserDefinedBuilder.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"UserDefinedBuilder.ts\"\r\nThe file name is: UserDefinedBuilder.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../../Document\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport fs from \"fs\";\r\nimport jsonpath from \"jsonpath\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport UserDefinedBuilderHelper from \"./UserDefinedBuilderHelper\";\r\nimport IBuilder from \"../../../../config/IBuilder\";\r\n\r\nexport default class UserDefinedBuilder extends BaseBuilder {\r\n    constructor() {\r\n        super('UserDefined');\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public async generate() {\r\n\r\n        for (let i = 0; this.config.builders && i < this.config.builders.length; i++) {\r\n            let builder = this.config.builders[i];\r\n            let saveToPath = builder.path ?? '';\r\n            if (saveToPath == '' && builder.type == 'howto') {\r\n                saveToPath = 'howto'\r\n            }\r\n\r\n            for (let b=0;builder.pages && b<builder.pages.length;b++) {\r\n                await this.generateFromBuilder(builder.pages[b], saveToPath, (b+2), {parent:builder.name})\r\n            }\r\n            await this.generateFromBuilder(builder, saveToPath, 1, {has_children:true});\r\n        }\r\n    }\r\n\r\n    public async generateFromBuilder(builder : IBuilder, saveToPath : string, position : number, data : any) {\r\n        let project_path = process.cwd();\r\n        let templatePath = builder.template;\r\n        templatePath = `.code-narrator/gpt_questions/${templatePath}`;\r\n\r\n        if (!fs.existsSync(path.join(process.cwd(), `${templatePath}.liquid`))) {\r\n            console.log(path.join(process.cwd(), templatePath))\r\n            throw new Error(`Could not find ${builder.template}.liquid template. You can create it at ${templatePath}.liquid`)\r\n        }\r\n\r\n        let docId = path.join(saveToPath, builder.template);\r\n        let document = DocumentationCache.get(docId)\r\n        if (!document) {\r\n            docId = docId + ConfigHelper.config.document_file_extension\r\n            document = DocumentationCache.get(docId)\r\n        }\r\n        if (!this.hasTemplateChanged(document, templatePath)) return;\r\n\r\n        let helper = new UserDefinedBuilderHelper();\r\n        helper.loadArgs(builder, project_path)\r\n        let assistantMessages = await helper.getAssistantMessages(builder);\r\n\r\n        await super.generateDocumentationAndCache({\r\n            args: builder.args ?? {},\r\n            name: builder.name,\r\n            template: templatePath,\r\n            pathToFile: path.join(saveToPath, builder.template + ConfigHelper.config.document_file_extension),\r\n            folderPath: saveToPath,\r\n            saveToPath: saveToPath,\r\n            sidebarPosition: builder.sidebarPosition ?? (position + 10),\r\n            sidebarLabel: builder.sidebarLabel ?? builder.name,\r\n            assistantMessages: assistantMessages,\r\n            data : data,\r\n            prevDocument : document\r\n        })\r\n    }\r\n\r\n\r\n    private hasTemplateChanged(document: Document | undefined, templatePath: string) {\r\n        if (!document) return true;\r\n\r\n        let stats = fs.statSync(templatePath + '.liquid');\r\n        return (stats.mtime.getTime() >= new Date(document.updated.toString()).getTime());\r\n\r\n    }\r\n}\r\n\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilder.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "UserDefined"
		}
	},
	{
		"name": "UserDefinedBuilderHelper.ts",
		"path": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilderHelper.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"fileContent": "import FileStructure from \"../../../../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport IBuilder, {BuilderType} from \"../../../../config/IBuilder\";\r\nimport jsonpath from \"jsonpath\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport IGenericeAIService from \"../../../../services/OpenAIService\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\n\r\nexport default class UserDefinedBuilderHelper {\r\n\r\n    aiService: IGenericeAIService;\r\n\r\n    constructor() {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        if (!input) return null;\r\n\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public loadArgs(build: IBuilder, project_path: string) {\r\n        if (build.args) {\r\n            let argKeys = Object.getOwnPropertyNames(build.args);\r\n            for (let i = 0; i < argKeys.length; i++) {\r\n                let filePath = this.extractPathFromContent(build.args[argKeys[i]])\r\n                if (filePath) {\r\n                    let content = FileStructure.getContent(path.join(project_path, filePath))\r\n                    if (content == '') {\r\n                        console.warn(`Content is empty for file ${filePath}`)\r\n                    }\r\n                    build.args[argKeys[i]] = content;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getAssistantMessages(builder: IBuilder) {\r\n        let assistantMessages: string[] = []\r\n        let predefinedQuestions = this.getPredefinedQuestion(builder.type);\r\n        if (predefinedQuestions) assistantMessages.push(predefinedQuestions);\r\n        let files = builder.files ?? [];\r\n        for (let i = 0;i < files.length; i++) {\r\n            let content = FileStructure.getContent(path.join(process.cwd(), files[i].path));\r\n            let extraInfo = '';\r\n            if (files[i].path.indexOf('.json') != -1) {\r\n                if (files[i].JSONPath) {\r\n                    let obj = JSON.parse(content);\r\n                    files[i].JSONPath?.forEach((path: string) => {\r\n                        jsonpath.query(obj, path).forEach((result: any) => {\r\n                            extraInfo += `${path}:${JSON.stringify(result)}\\n`;\r\n                        });\r\n                    });\r\n                } else {\r\n                    extraInfo += `\\n### start ${path.basename(files[i].path)} ###\\n${content}\\n### end file ###\\n`\r\n                }\r\n            } else if (files[i].extract) {\r\n                let extractContent = Array.isArray(files[i].extract) ? files[i].extract!.join(', ') : files[i].extract;\r\n                let question = `Extract following from file content. You MUST return as JSON:\r\n                     ${extractContent} \r\n                     This is the file:\r\n                     ${content}`\r\n                let result = await this.aiService.query([question], ['Return JSON format'])\r\n                let jsons = Helper.getJsons(result.answer);\r\n                if (jsons.length > 0) {\r\n                    extraInfo += `Content to help:\\n`\r\n                    for(let b=0;b<jsons.length;b++) {\r\n                        extraInfo += `${JSON.stringify(jsons[b])}\\n`\r\n                    }\r\n                }\r\n            } else if (files[i].path.indexOf(ConfigHelper.config.document_file_extension) != -1) {\r\n                builder.args = builder.args ?? {};\r\n                builder.args.directoryName = path.dirname(files[i].path);\r\n                if (files[i].path.indexOf('*') != -1) {\r\n                    let dirFiles = this.findFiles(files[i].path);\r\n                    dirFiles.forEach(file => {\r\n                        if (file.name.toLowerCase() != 'readme') {\r\n                            let overview = this.extractContentBetweenHeaders(file.documentation);\r\n                            extraInfo += `\r\n### 1st paragraph of \"${file.name}\" ###\r\n${overview}\r\n### file ends ###\r\n                         `\r\n                        }\r\n                    })\r\n                } else {\r\n                    let overview = this.extractContentBetweenHeaders(content);\r\n                    extraInfo = `### 1st paragraph of \"${files[i].path}\" ### \\n${overview}\\n### file ends ###`\r\n                }\r\n            } else {\r\n                extraInfo = `File Content for ${files[i].path}\\n${content}`\r\n            }\r\n            if (extraInfo) {\r\n                assistantMessages.push(extraInfo)\r\n            }\r\n\r\n        }\r\n        return assistantMessages;\r\n    }\r\n\r\n    private getPredefinedQuestion(type: string) {\r\n        type = type.toLowerCase();\r\n        if (type == 'howto') {\r\n            return `I want you to create a detailed How To guide from the user input.\r\n            It should have Title, Introduction, Step-by-Step Instructions`\r\n        } else if (type == 'readme') {\r\n            return `I want you to create a detailed README file for the project ${ConfigHelper.config.project_name}. \r\n            Include the sections Title, Description with link to homepage (add paragraphs), Getting started, Usage, Repository link, Documentation, Report Issues, Authors, Version, License. If you do not have data for section then DO NOT create that section.`\r\n        } else if (type == 'tutorial') {\r\n            return `I want you to create a detailed Tutorial from the user input.\r\n            Define the target audience, Set clear learning objectives,Provide a brief introduction,Prerequisites and system requirements,Step-by-step instructions,Include code samples`\r\n        } else if (type == 'faq') {\r\n            return 'Write a FAQ document from users answers. Do not create questions you cannot answer. DO NOT hallucinate answers.'\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public extractContentBetweenHeaders(markdown: string): string {\r\n        let regex = new RegExp(/^(?!#).*$/gm)\r\n        let match = markdown.match(regex);\r\n        for (let i=0;match && i < match.length;i++) {\r\n            if (match[i].trim() != '') return match[i];\r\n        }\r\n\r\n        if (markdown.length < 350) return markdown;\r\n        return markdown.substring(0, 350) + \"...\";\r\n\r\n    }\r\n\r\n    public findFiles(patternString: string) {\r\n       const dir = patternString.split('/')[0];\r\n        return DocumentationCache.getByFolderPath(dir)\r\n    }\r\n\r\n}",
		"documentation": "# UserDefinedBuilderHelper.ts\n\nThis TypeScript file contains the `UserDefinedBuilderHelper` class, which is responsible for handling various tasks related to user-defined builders in a software project. The class provides methods for extracting paths from content, loading arguments, getting assistant messages, and more.\n\n## Table of Contents\n\n- [Class: UserDefinedBuilderHelper](#class-userdefinedbuilderhelper)\n  - [Constructor](#constructor)\n  - [Methods](#methods)\n    - [extractPathFromContent](#extractpathfromcontent)\n    - [loadArgs](#loadargs)\n    - [getAssistantMessages](#getassistantmessages)\n    - [getPredefinedQuestion](#getpredefinedquestion)\n    - [extractContentBetweenHeaders](#extractcontentbetweenheaders)\n    - [findFiles](#findfiles)\n\n## Class: UserDefinedBuilderHelper\n\n### Constructor\n\nThe constructor initializes the `aiService` property with the AI service configured in the `ConfigHelper`.\n\n```typescript\nconstructor() {\n    this.aiService = ConfigHelper.config.aiService;\n}\n```\n\n### Methods\n\n#### extractPathFromContent\n\nThis method takes an input string and extracts the path from the content using a regular expression.\n\n```typescript\npublic extractPathFromContent(input: string): string | null\n```\n\n#### loadArgs\n\nThis method loads the arguments for a given builder and project path. It iterates through the argument keys and extracts the file path from the content. If the file path is found, it reads the content of the file and assigns it to the corresponding argument key.\n\n```typescript\npublic loadArgs(build: IBuilder, project_path: string)\n```\n\n#### getAssistantMessages\n\nThis method retrieves assistant messages for a given builder. It first gets the predefined questions for the builder type and then iterates through the files associated with the builder. It extracts the content and additional information from the files and appends them to the assistant messages.\n\n```typescript\npublic async getAssistantMessages(builder: IBuilder)\n```\n\n#### getPredefinedQuestion\n\nThis method returns a predefined question based on the input builder type. The supported types are 'howto', 'readme', 'tutorial', and 'faq'.\n\n```typescript\nprivate getPredefinedQuestion(type: string)\n```\n\n#### extractContentBetweenHeaders\n\nThis method extracts the content between headers in a markdown string. It returns the first non-empty line or a substring of the markdown if the length is less than 350 characters.\n\n```typescript\npublic extractContentBetweenHeaders(markdown: string): string\n```\n\n#### findFiles\n\nThis method finds files based on a given pattern string. It uses the `DocumentationCache` to get the files by folder path.\n\n```typescript\npublic findFiles(patternString: string)\n```\n\n## Usage\n\nTo use the `UserDefinedBuilderHelper` class, first import it and create a new instance:\n\n```typescript\nimport UserDefinedBuilderHelper from \"./UserDefinedBuilderHelper\";\n\nconst helper = new UserDefinedBuilderHelper();\n```\n\nThen, you can call the available methods on the instance:\n\n```typescript\nconst extractedPath = helper.extractPathFromContent(\"content(/path/to/file.txt)\");\nhelper.loadArgs(builder, project_path);\nconst assistantMessages = await helper.getAssistantMessages(builder);\n```",
		"isFolder": false,
		"updated": "2023-04-29T15:24:55.224Z",
		"sidebar_position": 1,
		"sidebar_label": "UserDefinedBuilderHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"UserDefinedBuilderHelper.ts\"\r\nThe file name is: UserDefinedBuilderHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport path from \"path\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport IBuilder, {BuilderType} from \"../../../../config/IBuilder\";\r\nimport jsonpath from \"jsonpath\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport IGenericeAIService from \"../../../../services/OpenAIService\";\r\nimport fs from \"fs\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\n\r\nexport default class UserDefinedBuilderHelper {\r\n\r\n    aiService: IGenericeAIService;\r\n\r\n    constructor() {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n    }\r\n\r\n    public extractPathFromContent(input: string): string | null {\r\n        if (!input) return null;\r\n\r\n        const regex = /content\\(([^)]+)\\)/;\r\n        const match = input.match(regex);\r\n\r\n        return match ? match[1] : null;\r\n    }\r\n\r\n    public loadArgs(build: IBuilder, project_path: string) {\r\n        if (build.args) {\r\n            let argKeys = Object.getOwnPropertyNames(build.args);\r\n            for (let i = 0; i < argKeys.length; i++) {\r\n                let filePath = this.extractPathFromContent(build.args[argKeys[i]])\r\n                if (filePath) {\r\n                    let content = FileStructure.getContent(path.join(project_path, filePath))\r\n                    if (content == '') {\r\n                        console.warn(`Content is empty for file ${filePath}`)\r\n                    }\r\n                    build.args[argKeys[i]] = content;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public async getAssistantMessages(builder: IBuilder) {\r\n        let assistantMessages: string[] = []\r\n        let predefinedQuestions = this.getPredefinedQuestion(builder.type);\r\n        if (predefinedQuestions) assistantMessages.push(predefinedQuestions);\r\n        let files = builder.files ?? [];\r\n        for (let i = 0;i < files.length; i++) {\r\n            let content = FileStructure.getContent(path.join(process.cwd(), files[i].path));\r\n            let extraInfo = '';\r\n            if (files[i].path.indexOf('.json') != -1) {\r\n                if (files[i].JSONPath) {\r\n                    let obj = JSON.parse(content);\r\n                    files[i].JSONPath?.forEach((path: string) => {\r\n                        jsonpath.query(obj, path).forEach((result: any) => {\r\n                            extraInfo += `${path}:${JSON.stringify(result)}\\n`;\r\n                        });\r\n                    });\r\n                } else {\r\n                    extraInfo += `\\n### start ${path.basename(files[i].path)} ###\\n${content}\\n### end file ###\\n`\r\n                }\r\n            } else if (files[i].extract) {\r\n                let extractContent = Array.isArray(files[i].extract) ? files[i].extract!.join(', ') : files[i].extract;\r\n                let question = `Extract following from file content. You MUST return as JSON:\r\n                     ${extractContent} \r\n                     This is the file:\r\n                     ${content}`\r\n                let result = await this.aiService.query([question], ['Return JSON format'])\r\n                let jsons = Helper.getJsons(result.answer);\r\n                if (jsons.length > 0) {\r\n                    extraInfo += `Content to help:\\n`\r\n                    for(let b=0;b<jsons.length;b++) {\r\n                        extraInfo += `${JSON.stringify(jsons[b])}\\n`\r\n                    }\r\n                }\r\n            } else if (files[i].path.indexOf(ConfigHelper.config.document_file_extension) != -1) {\r\n                builder.args = builder.args ?? {};\r\n                builder.args.directoryName = path.dirname(files[i].path);\r\n                if (files[i].path.indexOf('*') != -1) {\r\n                    let dirFiles = this.findFiles(files[i].path);\r\n                    dirFiles.forEach(file => {\r\n                        if (file.name.toLowerCase() != 'readme') {\r\n                            let overview = this.extractContentBetweenHeaders(file.documentation);\r\n                            extraInfo += `\r\n### 1st paragraph of \"${file.name}\" ###\r\n${overview}\r\n### file ends ###\r\n                         `\r\n                        }\r\n                    })\r\n                } else {\r\n                    let overview = this.extractContentBetweenHeaders(content);\r\n                    extraInfo = `### 1st paragraph of \"${files[i].path}\" ### \\n${overview}\\n### file ends ###`\r\n                }\r\n            } else {\r\n                extraInfo = `File Content for ${files[i].path}\\n${content}`\r\n            }\r\n            if (extraInfo) {\r\n                assistantMessages.push(extraInfo)\r\n            }\r\n\r\n        }\r\n        return assistantMessages;\r\n    }\r\n\r\n    private getPredefinedQuestion(type: string) {\r\n        type = type.toLowerCase();\r\n        if (type == 'howto') {\r\n            return `I want you to create a detailed How To guide from the user input.\r\n            It should have Title, Introduction, Step-by-Step Instructions`\r\n        } else if (type == 'readme') {\r\n            return `I want you to create a detailed README file for the project ${ConfigHelper.config.project_name}. \r\n            Include the sections Title, Description with link to homepage (add paragraphs), Getting started, Usage, Repository link, Documentation, Report Issues, Authors, Version, License. If you do not have data for section then DO NOT create that section.`\r\n        } else if (type == 'tutorial') {\r\n            return `I want you to create a detailed Tutorial from the user input.\r\n            Define the target audience, Set clear learning objectives,Provide a brief introduction,Prerequisites and system requirements,Step-by-step instructions,Include code samples`\r\n        } else if (type == 'faq') {\r\n            return 'Write a FAQ document from users answers. Do not create questions you cannot answer. DO NOT hallucinate answers.'\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public extractContentBetweenHeaders(markdown: string): string {\r\n        let regex = new RegExp(/^(?!#).*$/gm)\r\n        let match = markdown.match(regex);\r\n        for (let i=0;match && i < match.length;i++) {\r\n            if (match[i].trim() != '') return match[i];\r\n        }\r\n\r\n        if (markdown.length < 350) return markdown;\r\n        return markdown.substring(0, 350) + \"...\";\r\n\r\n    }\r\n\r\n    public findFiles(patternString: string) {\r\n       const dir = patternString.split('/')[0];\r\n        return DocumentationCache.getByFolderPath(dir)\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\UserDefined\\UserDefinedBuilderHelper.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "UserDefined"
		}
	},
	{
		"name": "BaseGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\BaseGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "import Document from \"../../Document\";\r\n\r\n/*\r\nThis is the Base class for Generator plugins. Generator plugins are used to parse the documentation\r\nand modify it for the build tool you are using to build the documentation.\r\n\r\nDefault plugin with code-narrator is Docusaurus since it fails to build when a function contains\r\na Promise<> in return. This plugin clear that Promise from the function name so it can build.\r\nIt also creates sidebar information.\r\n */\r\nexport default abstract class BaseGenerator {\r\n\r\n    abstract process(document : Document) : Document;\r\n}",
		"documentation": "# BaseGenerator.ts\n\nThe `BaseGenerator.ts` file is a TypeScript code file that defines the base class for Generator plugins. Generator plugins are used to parse the documentation and modify it for the build tool you are using to build the documentation.\n\nThe default plugin with code-narrator is Docusaurus since it fails to build when a function contains a `Promise<>` in return. This plugin clears that Promise from the function name so it can build. It also creates sidebar information.\n\n## Usage\n\nTo use this class, you need to create a new class that extends the `BaseGenerator` class and implement the `process` method.\n\n```typescript\nimport BaseGenerator from \"./BaseGenerator\";\nimport Document from \"../../Document\";\n\nclass CustomGenerator extends BaseGenerator {\n    process(document: Document): Document {\n        // Your custom implementation here\n    }\n}\n```\n\n## Methods\n\n### process(document: Document): Document\n\nThis is an abstract method that should be implemented by the derived class. It takes a `Document` object as input and returns a modified `Document` object.\n\n#### Parameters\n\n- `document` (Document): The input `Document` object that needs to be processed.\n\n#### Returns\n\n- `Document`: The modified `Document` object after processing.\n\n## Technical Concepts\n\n### Document\n\nThe `Document` class is a custom class that represents the documentation structure. It contains information about the documentation, such as the content, metadata, and other relevant details.\n\n### Promise\n\nA `Promise` is a standard JavaScript concept that represents the eventual completion (or failure) of an asynchronous operation and its resulting value. In this context, the `BaseGenerator` class is designed to handle cases where a function contains a `Promise<>` in its return type, which can cause issues with some build tools like Docusaurus.",
		"isFolder": false,
		"updated": "2023-04-14T15:25:58.675Z",
		"sidebar_position": 0,
		"sidebar_label": "BaseGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"BaseGenerator.ts\"\r\nThe file name is: BaseGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport Document from \"../../Document\";\r\n\r\n/*\r\nThis is the Base class for Generator plugins. Generator plugins are used to parse the documentation\r\nand modify it for the build tool you are using to build the documentation.\r\n\r\nDefault plugin with code-narrator is Docusaurus since it fails to build when a function contains\r\na Promise<> in return. This plugin clear that Promise from the function name so it can build.\r\nIt also creates sidebar information.\r\n */\r\nexport default abstract class BaseGenerator {\r\n\r\n    abstract process(document : Document) : Document;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\BaseGenerator.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "generators"
		}
	},
	{
		"name": "DocusaurusGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\Docusaurus\\DocusaurusGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"fileContent": "import BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# DocusaurusGenerator.ts\n\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class named `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with Docusaurus.\n\n## Usage\n\nTo use the `DocusaurusGenerator` class, you need to import it and create an instance of the class. Then, call the `process()` method with a `Document` object as its argument.\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Class Description\n\n### DocusaurusGenerator\n\nThe `DocusaurusGenerator` class extends the `BaseGenerator` class and overrides the `process()` method to process a `Document` object and generate documentation compatible with Docusaurus.\n\n#### Methods\n\n##### process(document: Document): Document\n\nThe `process()` method takes a `Document` object as its argument and processes it to generate documentation compatible with Docusaurus. It returns the processed `Document` object.\n\n###### Parameters\n\n- `document: Document`: The `Document` object to be processed.\n\n###### Technical Concepts\n\n- Docusaurus: Docusaurus is a static site generator that makes it easy to build and maintain open-source documentation websites. It supports Markdown and allows you to create custom pages with React components.\n\n## Example\n\nHere's an example of how to use the `DocusaurusGenerator` class:\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document({\n  name: 'Example',\n  sidebar_label: 'Example Label',\n  sidebar_position: 2,\n  documentation: 'This is an example documentation.',\n});\n\nconst processedDocument = generator.process(document);\nconsole.log(processedDocument.documentation);\n```\n\nThis will output the following processed documentation:\n\n```\n---\nsidebar_position: 2\nsidebar_label: Example Label\n---\n\nThis is an example documentation.\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:27:23.257Z",
		"sidebar_position": 0,
		"sidebar_label": "DocusaurusGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocusaurusGenerator.ts\"\r\nThe file name is: DocusaurusGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\Docusaurus\\DocusaurusGenerator.ts",
		"lastTouch": "2023-04-15T09:47:59.737Z"
	},
	{
		"name": "IProjectDocumentedSettings.ts",
		"path": "src\\model\\IProjectDocumentedSettings.ts",
		"folderPath": "src\\model",
		"fileContent": "export default interface IProjectDocumentedSettings {\r\n    project_file: string\r\n    config_file: string\r\n    entry_file: string\r\n    cli_file: string\r\n    project_path: string\r\n    source_path: string\r\n    documentation_path: string\r\n    test_path: string\r\n    exclude : string[]\r\n    readmeRoot : boolean\r\n\r\n    name: string\r\n    version: string\r\n    homepage: string\r\n    bugs: string\r\n    repository: string\r\n    language: string\r\n    framework: string\r\n    entry: string\r\n    cli: string\r\n    readme: string\r\n}",
		"documentation": "# IProjectDocumentedSettings.ts\n\nThis is a TypeScript interface file that defines the structure of the `IProjectDocumentedSettings` interface. The interface is used to represent the settings of a project that needs to be documented.\n\n## Interface Description\n\nThe `IProjectDocumentedSettings` interface contains properties that store information about a project's configuration, file paths, and metadata. These properties are used to configure the project's documentation generation process.\n\n## Properties\n\nThe `IProjectDocumentedSettings` interface contains the following properties:\n\n- `project_file: string`: The path to the project file.\n- `config_file: string`: The path to the configuration file.\n- `entry_file: string`: The path to the entry file.\n- `cli_file: string`: The path to the CLI file.\n- `project_path: string`: The path to the project directory.\n- `source_path: string`: The path to the source code directory.\n- `documentation_path: string`: The path to the documentation directory.\n- `test_path: string`: The path to the test directory.\n- `exclude: string[]`: An array of file paths to be excluded from the documentation generation process.\n- `readmeRoot: boolean`: A flag indicating whether the README file should be placed at the root of the project.\n\n### Metadata Properties\n\nThese properties store metadata about the project:\n\n- `name: string`: The name of the project.\n- `version: string`: The version of the project.\n- `homepage: string`: The URL of the project's homepage.\n- `bugs: string`: The URL where users can report bugs.\n- `repository: string`: The URL of the project's repository.\n- `language: string`: The programming language used in the project.\n- `framework: string`: The framework used in the project.\n- `entry: string`: The entry point of the project.\n- `cli: string`: The command-line interface of the project.\n- `readme: string`: The path to the README file.\n\n## Usage\n\nTo use the `IProjectDocumentedSettings` interface, import it into your TypeScript file and create an object that implements the interface. Here's an example:\n\n```typescript\nimport IProjectDocumentedSettings from './IProjectDocumentedSettings';\n\nconst projectSettings: IProjectDocumentedSettings = {\n  project_file: 'path/to/project/file',\n  config_file: 'path/to/config/file',\n  entry_file: 'path/to/entry/file',\n  cli_file: 'path/to/cli/file',\n  project_path: 'path/to/project',\n  source_path: 'path/to/source',\n  documentation_path: 'path/to/documentation',\n  test_path: 'path/to/test',\n  exclude: ['path/to/exclude/file1', 'path/to/exclude/file2'],\n  readmeRoot: true,\n\n  name: 'My Project',\n  version: '1.0.0',\n  homepage: 'https://example.com',\n  bugs: 'https://example.com/bugs',\n  repository: 'https://github.com/user/repo',\n  language: 'TypeScript',\n  framework: 'React',\n  entry: 'src/index.ts',\n  cli: 'src/cli.ts',\n  readme: 'README.md',\n};\n```\n\nWith the `projectSettings` object, you can now access and manipulate the properties of the `IProjectDocumentedSettings` interface as needed.",
		"isFolder": false,
		"updated": "2023-04-14T15:29:30.341Z",
		"sidebar_position": 0,
		"sidebar_label": "IProjectDocumentedSettings.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"IProjectDocumentedSettings.ts\"\r\nThe file name is: IProjectDocumentedSettings.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nexport default interface IProjectDocumentedSettings {\r\n    project_file: string\r\n    config_file: string\r\n    entry_file: string\r\n    cli_file: string\r\n    project_path: string\r\n    source_path: string\r\n    documentation_path: string\r\n    test_path: string\r\n    exclude : string[]\r\n    readmeRoot : boolean\r\n\r\n    name: string\r\n    version: string\r\n    homepage: string\r\n    bugs: string\r\n    repository: string\r\n    language: string\r\n    framework: string\r\n    entry: string\r\n    cli: string\r\n    readme: string\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\model\\IProjectDocumentedSettings.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "model"
		}
	},
	{
		"name": "OpenAIResponse.ts",
		"path": "src\\model\\OpenAIResponse.ts",
		"folderPath": "src\\model",
		"fileContent": "import {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface OpenAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}",
		"documentation": "# OpenAIResponse.ts\n\n## Overview\n\nThe `OpenAIResponse.ts` file is a TypeScript code file that defines an interface called `OpenAIResponse`. This interface is used to represent the response from the OpenAI API after processing a chat completion request. The response contains an answer and an array of request messages.\n\n## Usage\n\nTo use the `OpenAIResponse` interface in your TypeScript project, you can import it and implement it in your classes or functions that interact with the OpenAI API. Here's an example of how to use the `OpenAIResponse` interface:\n\n```typescript\nimport OpenAIResponse from \"./OpenAIResponse\";\n\nfunction processOpenAIResponse(response: OpenAIResponse) {\n  console.log(\"Answer:\", response.answer);\n  console.log(\"Request Messages:\", response.requestMessages);\n}\n```\n\n## Interface Description\n\n### OpenAIResponse\n\nThe `OpenAIResponse` interface contains two properties:\n\n#### answer: string\n\nThe `answer` property is a string that represents the answer generated by the OpenAI API after processing the chat completion request.\n\n#### requestMessages: ChatCompletionRequestMessage[]\n\nThe `requestMessages` property is an array of `ChatCompletionRequestMessage` objects. Each object in the array represents a message that was sent as part of the chat completion request to the OpenAI API.\n\n## Parameters\n\n### ChatCompletionRequestMessage\n\nThe `ChatCompletionRequestMessage` is an interface imported from the `openai` package. It represents a message object that is sent as part of the chat completion request to the OpenAI API. The interface contains the following properties:\n\n- `role`: string - The role of the message sender, either \"system\", \"user\", or \"assistant\".\n- `content`: string - The content of the message.\n\n## Technical Concepts\n\n### TypeScript Interfaces\n\nIn TypeScript, interfaces are used to define the structure of an object. They can be used to enforce a specific shape for objects, ensuring that they have the required properties with the correct types. In this code file, the `OpenAIResponse` interface is used to define the structure of the response object returned by the OpenAI API.\n\n### JSON\n\nJSON (JavaScript Object Notation) is a lightweight data interchange format that is easy for humans to read and write and easy for machines to parse and generate. JSON is a text format that is completely language-independent but uses conventions that are familiar to programmers of the C family of languages, including C, C++, C#, Java, JavaScript, Perl, Python, and many others. In this code file, JSON is not explicitly used, but the response from the OpenAI API is typically in JSON format, which is then converted to a TypeScript object implementing the `OpenAIResponse` interface.",
		"isFolder": false,
		"updated": "2023-04-14T15:31:12.924Z",
		"sidebar_position": 1,
		"sidebar_label": "OpenAIResponse.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OpenAIResponse.ts\"\r\nThe file name is: OpenAIResponse.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface OpenAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\model\\OpenAIResponse.ts",
		"lastTouch": "2023-04-29T13:17:00.235Z",
		"data": {
			"parent": "model"
		}
	},
	{
		"name": "OpenAIRepository.ts",
		"path": "src\\repositories\\OpenAIRepository.ts",
		"folderPath": "src\\repositories",
		"fileContent": "import {ChatCompletionRequestMessage, Configuration, CreateCompletionResponseChoicesInner, OpenAIApi} from 'openai';\r\nimport { setTimeout } from 'timers/promises';\r\nimport {CreateChatCompletionResponseChoicesInner} from \"openai/api\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport OpenAIResponse from \"../model/OpenAIResponse\";\r\nimport DefaultSettings from \"../config/DefaultSettings\";\r\n\r\nexport default class OpenAIRepository {\r\n    openai: OpenAIApi;\r\n    models = new Map([\r\n        ['gpt-3.5-turbo', 4096],\r\n        ['gpt-4', 8192],\r\n        ['gpt-4-32k', 32768]\r\n    ]);\r\n    constructor() {\r\n        const configuration = new Configuration({\r\n            apiKey: ConfigHelper.OpenAiKey\r\n        });\r\n        this.openai = new OpenAIApi(configuration);\r\n    }\r\n\r\n\r\n    public async query(text : string) : Promise<OpenAIResponse> {\r\n        return this.queryQuestions([text]);\r\n    }\r\n    public async queryQuestions(questions : string[], errorCount = 0, model? : string, assistantMessages? : string[]): Promise<OpenAIResponse> {\r\n        let messages : ChatCompletionRequestMessage[] = []\r\n        try {\r\n            await setTimeout(1 * 500);\r\n\r\n            let config = ConfigHelper.config;\r\n            //config should only be undefined on first run\r\n            if (!config) config = DefaultSettings.get();\r\n            if (!model) {\r\n                model = config.gptModel;\r\n            }\r\n            let messageLength = 0;\r\n\r\n            for (let i=0;config.gptSystemCommands && i<config.gptSystemCommands.length;i++) {\r\n                messageLength += config.gptSystemCommands[i][i].length;\r\n                messages.push({role:'system', content:config.gptSystemCommands[i].replace('{DocumentationType}', ConfigHelper.DocumentationType)})\r\n            }\r\n\r\n            let maxTokens = this.models.get(model) ?? 8192\r\n            for (let i=0;i<questions.length;i++){\r\n                let q = questions[i]\r\n                if (messageLength + q.length> maxTokens) {\r\n                    let length = parseInt(((maxTokens - messageLength)/1.20).toString());\r\n                    q = q.substring(0, length);\r\n                    console.warn(`Warning - Content to long: I had to trim a file, only using first ${length} character`)\r\n                }\r\n                messages.push({role:'user', content:q})\r\n                messageLength += q.length;\r\n            }\r\n            for (let i=0;assistantMessages && i<assistantMessages.length;i++) {\r\n                messageLength += assistantMessages[i].length;\r\n                messages.push({role:'assistant', content: assistantMessages[i]});\r\n            }\r\n\r\n            maxTokens = maxTokens - messageLength;\r\n            if (maxTokens < 0) {\r\n                console.error(`Message is to long (${messageLength}). Will not query gpt`)\r\n                return {answer:'', requestMessages:messages} as OpenAIResponse;\r\n            }\r\n            const completion = await this.openai.createChatCompletion({\r\n                model: model,\r\n                messages : messages,\r\n                temperature: 0.1,\r\n                max_tokens: parseInt(maxTokens.toString()),\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n\r\n            });\r\n            if (completion.data.choices.length == 0) {\r\n                throw new Error(`Did not get answer. ChatGPT is down. Run again. `)\r\n            }\r\n            let response : OpenAIResponse = {\r\n                answer : completion.data.choices[0].message!.content,\r\n                requestMessages : messages\r\n            }\r\n\r\n            return response;\r\n        } catch (e : any) {\r\n            let message = e.response?.data?.error?.message ?? '';\r\n            if (message.indexOf('You exceeded your current quota') != -1) {\r\n                throw new Error(message);\r\n            }\r\n\r\n            if (message.indexOf('The model') != -1 && message.indexOf('does not exist') != -1) {\r\n                console.warn(`You don't have access to ${DefaultSettings.gptModel}, downgrading to gtp-3.5-turbo`)\r\n                let model = 'gpt-3.5-turbo';\r\n                DefaultSettings.gptModel = model;\r\n                return this.queryQuestions(questions, errorCount, model, assistantMessages);\r\n            }\r\n\r\n            if (e && this.retryStatuses.includes(e.response?.status) && errorCount < 3) {\r\n                console.log('Sleep 3 sec')\r\n                await setTimeout(3 * 1000);\r\n                return this.queryQuestions(questions, ++errorCount, model);\r\n            }\r\n\r\n            console.error('OpenAI error:', message)\r\n            console.error('Error doing OpenAI query:', questions);\r\n\r\n            return  {answer:'', requestMessages: messages} as OpenAIResponse;\r\n\r\n        }\r\n    }\r\n\r\n    retryStatuses = [429, 500, 503]\r\n}",
		"documentation": "# OpenAIRepository.ts\n\nThis is a TypeScript code file that defines the `OpenAIRepository` class. The class is responsible for interacting with the OpenAI API to perform chat-based completions using various GPT models. It handles querying the API, managing the configuration, and processing the responses.\n\n## Usage\n\nTo use the `OpenAIRepository` class, you need to import it and create an instance:\n\n```typescript\nimport OpenAIRepository from './OpenAIRepository';\n\nconst openAIRepo = new OpenAIRepository();\n```\n\nThen, you can call the `query` or `queryQuestions` methods to interact with the OpenAI API:\n\n```typescript\nconst response = await openAIRepo.query('What is the capital of France?');\nconsole.log(response.answer);\n```\n\n## Class Methods\n\n### constructor()\n\nThe constructor initializes the `OpenAIRepository` instance by setting up the OpenAI API configuration and creating an instance of the `OpenAIApi` class.\n\n### async query(text: string): Promise<OpenAIResponse>\n\nThis method takes a single question as a string and returns a Promise that resolves to an `OpenAIResponse` object. It internally calls the `queryQuestions` method with the provided question.\n\n### async queryQuestions(questions: string[], errorCount = 0, model?: string, assistantMessages?: string[]): Promise<OpenAIResponse>\n\nThis method takes an array of questions, an optional error count, an optional model name, and an optional array of assistant messages. It returns a Promise that resolves to an `OpenAIResponse` object. The method handles querying the OpenAI API, managing the configuration, and processing the responses.\n\n#### Parameters\n\n- `questions`: An array of strings containing the questions to be asked.\n- `errorCount`: (Optional) A number representing the current error count. Default is 0.\n- `model`: (Optional) A string representing the GPT model to be used. If not provided, the default model from the configuration will be used.\n- `assistantMessages`: (Optional) An array of strings containing previous assistant messages.\n\n## Error Handling\n\nThe `queryQuestions` method handles various error scenarios, such as exceeding the quota, using a non-existent model, or encountering API errors. It retries the query up to 3 times in case of specific error statuses (429, 500, 503).\n\n## Example\n\n```typescript\nimport OpenAIRepository from './OpenAIRepository';\n\nconst openAIRepo = new OpenAIRepository();\nconst questions = ['What is the capital of France?', 'What is the largest mammal?'];\n\n(async () => {\n  const response = await openAIRepo.queryQuestions(questions);\n  console.log(response.answer);\n})();\n```\n\nThis example demonstrates how to use the `OpenAIRepository` class to query multiple questions at once.",
		"isFolder": false,
		"updated": "2023-04-28T14:41:06.341Z",
		"sidebar_position": 0,
		"sidebar_label": "OpenAIRepository.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\repositories",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OpenAIRepository.ts\"\r\nThe file name is: OpenAIRepository.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {ChatCompletionRequestMessage, Configuration, CreateCompletionResponseChoicesInner, OpenAIApi} from 'openai';\r\nimport { setTimeout } from 'timers/promises';\r\nimport {CreateChatCompletionResponseChoicesInner} from \"openai/api\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport OpenAIResponse from \"../model/OpenAIResponse\";\r\nimport DefaultSettings from \"../config/DefaultSettings\";\r\n\r\nexport default class OpenAIRepository {\r\n    openai: OpenAIApi;\r\n    models = new Map([\r\n        ['gpt-3.5-turbo', 4096],\r\n        ['gpt-4', 8192],\r\n        ['gpt-4-32k', 32768]\r\n    ]);\r\n    constructor() {\r\n        const configuration = new Configuration({\r\n            apiKey: ConfigHelper.OpenAiKey\r\n        });\r\n        this.openai = new OpenAIApi(configuration);\r\n    }\r\n\r\n\r\n    public async query(text : string) : Promise<OpenAIResponse> {\r\n        return this.queryQuestions([text]);\r\n    }\r\n    public async queryQuestions(questions : string[], errorCount = 0, model? : string, assistantMessages? : string[]): Promise<OpenAIResponse> {\r\n        let messages : ChatCompletionRequestMessage[] = []\r\n        try {\r\n            await setTimeout(1 * 500);\r\n\r\n            let config = ConfigHelper.config;\r\n            //config should only be undefined on first run\r\n            if (!config) config = DefaultSettings.get();\r\n            if (!model) {\r\n                model = config.gptModel;\r\n            }\r\n            let messageLength = 0;\r\n\r\n            for (let i=0;config.gptSystemCommands && i<config.gptSystemCommands.length;i++) {\r\n                messageLength += config.gptSystemCommands[i][i].length;\r\n                messages.push({role:'system', content:config.gptSystemCommands[i].replace('{DocumentationType}', ConfigHelper.DocumentationType)})\r\n            }\r\n\r\n            let maxTokens = this.models.get(model) ?? 8192\r\n            for (let i=0;i<questions.length;i++){\r\n                let q = questions[i]\r\n                if (messageLength + q.length> maxTokens) {\r\n                    let length = parseInt(((maxTokens - messageLength)/1.20).toString());\r\n                    q = q.substring(0, length);\r\n                    console.warn(`Warning - Content to long: I had to trim a file, only using first ${length} character`)\r\n                }\r\n                messages.push({role:'user', content:q})\r\n                messageLength += q.length;\r\n            }\r\n            for (let i=0;assistantMessages && i<assistantMessages.length;i++) {\r\n                messageLength += assistantMessages[i].length;\r\n                messages.push({role:'assistant', content: assistantMessages[i]});\r\n            }\r\n\r\n            maxTokens = maxTokens - messageLength;\r\n            if (maxTokens < 0) {\r\n                console.error(`Message is to long (${messageLength}). Will not query gpt`)\r\n                return {answer:'', requestMessages:messages} as OpenAIResponse;\r\n            }\r\n            const completion = await this.openai.createChatCompletion({\r\n                model: model,\r\n                messages : messages,\r\n                temperature: 0.1,\r\n                max_tokens: parseInt(maxTokens.toString()),\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n\r\n            });\r\n            if (completion.data.choices.length == 0) {\r\n                throw new Error(`Did not get answer. ChatGPT is down. Run again. `)\r\n            }\r\n            let response : OpenAIResponse = {\r\n                answer : completion.data.choices[0].message!.content,\r\n                requestMessages : messages\r\n            }\r\n\r\n            return response;\r\n        } catch (e : any) {\r\n            let message = e.response?.data?.error?.message ?? '';\r\n            if (message.indexOf('You exceeded your current quota') != -1) {\r\n                throw new Error(message);\r\n            }\r\n\r\n            if (message.indexOf('The model') != -1 && message.indexOf('does not exist') != -1) {\r\n                console.warn(`You don't have access to ${DefaultSettings.gptModel}, downgrading to gtp-3.5-turbo`)\r\n                let model = 'gpt-3.5-turbo';\r\n                DefaultSettings.gptModel = model;\r\n                return this.queryQuestions(questions, errorCount, model, assistantMessages);\r\n            }\r\n\r\n            if (e && this.retryStatuses.includes(e.response?.status) && errorCount < 3) {\r\n                console.log('Sleep 3 sec')\r\n                await setTimeout(3 * 1000);\r\n                return this.queryQuestions(questions, ++errorCount, model);\r\n            }\r\n\r\n            console.error('OpenAI error:', message)\r\n            console.error('Error doing OpenAI query:', questions);\r\n\r\n            return  {answer:'', requestMessages: messages} as OpenAIResponse;\r\n\r\n        }\r\n    }\r\n\r\n    retryStatuses = [429, 500, 503]\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\repositories\\OpenAIRepository.ts",
		"lastTouch": "2023-04-29T13:17:00.235Z",
		"data": {
			"parent": "repositories"
		}
	},
	{
		"name": "CliHelper.ts",
		"path": "src\\utils\\CliHelper.ts",
		"folderPath": "src\\utils",
		"fileContent": "import yargs from \"yargs\";\r\nimport ICodeNarratorConfig from \"../config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport process from \"process\";\r\n\r\nexport default class CliHelper {\r\n\r\n    public async getArgv() : Promise<any> {\r\n        return yargs\r\n            .option('c', {\r\n                type: 'string',\r\n                describe: 'Path to configuration file (JSON or JavaScript)',\r\n                alias: 'config',\r\n                demandOption: false,\r\n            })\r\n            .option('i', {\r\n                type: 'array',\r\n                description: 'Only include specific files or folders in the documentation process',\r\n                alias: 'include'\r\n            }).option('g', {\r\n                type: 'string',\r\n                description: `GPT model. Default is gpt-4, if you do not have access, next best is gpt-3.5-turbo, but it isn't not so good`,\r\n                alias: 'gpt'\r\n            }).option('u', {\r\n                type:'string',\r\n                description: 'Runs only update on userDefined builder from config matching template name',\r\n                alias: 'userDefined'\r\n            })\r\n            .help()\r\n            .alias('help', 'h').argv;\r\n    }\r\n\r\n    public async getConfig(argv : any) : Promise<Partial<ICodeNarratorConfig>> {\r\n        let configPath = argv.config as string;\r\n        let userConfig: Partial<ICodeNarratorConfig> = {};\r\n        if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.ts'))) {\r\n            configPath = path.join(process.cwd(), 'code-narrator.config.ts');\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.js'))) {\r\n            configPath = path.join(process.cwd(), 'code-narrator.config.js');\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.json'))) {\r\n            configPath = path.join(process.cwd(), 'code-narrator.json');\r\n        }\r\n\r\n\r\n\r\n        if (configPath) {\r\n            if (configPath.endsWith('.js') || configPath.endsWith('.ts')) {\r\n                userConfig = await import(configPath);\r\n            } else if (configPath.endsWith('.json')) {\r\n                userConfig = JSON.parse((await fs.readFileSync(configPath)).toString());\r\n            }\r\n            (userConfig as any).fromFile = true;\r\n        }\r\n        if (argv.include) {\r\n            userConfig.include = argv.include as string[];\r\n        }\r\n        if (argv.gpt) {\r\n            userConfig.gptModel = argv.gpt as string;\r\n        } else {\r\n            userConfig.gptModel = 'gpt-4'\r\n        }\r\n        if (argv.userDefined) {\r\n            (userConfig as any).userDefined = argv.userDefined;\r\n        }\r\n\r\n\r\n        return userConfig;\r\n    }\r\n}",
		"documentation": "# CliHelper.ts\n\nThis is a TypeScript code file that contains the `CliHelper` class. The `CliHelper` class is responsible for handling command-line arguments and configuration for the Code Narrator application. It uses the `yargs` library to parse command-line arguments and provides methods to retrieve the configuration object.\n\n## Usage\n\nTo use the `CliHelper` class, you need to import it and create an instance:\n\n```typescript\nimport CliHelper from './CliHelper';\n\nconst cliHelper = new CliHelper();\n```\n\n## Methods\n\n### getArgv()\n\nThis method returns a Promise that resolves to an object containing the parsed command-line arguments.\n\n```typescript\nconst argv = await cliHelper.getArgv();\n```\n\n#### Options\n\n- `-c, --config`: Path to configuration file (JSON or JavaScript). Optional.\n- `-i, --include`: Array of specific files or folders to include in the documentation process. Optional.\n- `-g, --gpt`: GPT model. Default is `gpt-4`. If you do not have access, the next best is `gpt-3.5-turbo`, but it is not as good. Optional.\n- `-u, --userDefined`: Runs only update on userDefined builder from config matching template name. Optional.\n- `--help, -h`: Show help information.\n\n### getConfig(argv: any): Promise<Partial<ICodeNarratorConfig>>\n\nThis method takes the parsed command-line arguments object and returns a Promise that resolves to a partial `ICodeNarratorConfig` object containing the configuration.\n\n```typescript\nconst config = await cliHelper.getConfig(argv);\n```\n\n#### Parameters\n\n- `argv`: The parsed command-line arguments object.\n\n## Technical Concepts\n\n### yargs\n\n`yargs` is a popular library for parsing command-line arguments in Node.js applications. It provides a fluent API for defining options, aliases, and descriptions, making it easy to create self-documenting command-line interfaces.\n\n### ICodeNarratorConfig\n\n`ICodeNarratorConfig` is an interface that defines the shape of the configuration object used by the Code Narrator application. It includes properties for specifying the GPT model, included files or folders, and user-defined templates.\n\n### fs and path\n\n`fs` and `path` are built-in Node.js modules for working with the file system and file paths, respectively. In this code file, they are used to check for the existence of configuration files and to read their contents.\n\n### process.cwd()\n\n`process.cwd()` is a built-in Node.js function that returns the current working directory of the process. It is used in this code file to resolve the paths of configuration files relative to the current working directory.\n\n## Example\n\n```typescript\nimport CliHelper from './CliHelper';\n\nasync function main() {\n  const cliHelper = new CliHelper();\n  const argv = await cliHelper.getArgv();\n  const config = await cliHelper.getConfig(argv);\n\n  console.log('Parsed command-line arguments:', argv);\n  console.log('Configuration object:', config);\n}\n\nmain();\n```\n\nThis example demonstrates how to use the `CliHelper` class to parse command-line arguments and retrieve the configuration object.",
		"isFolder": false,
		"updated": "2023-04-29T15:30:32.911Z",
		"sidebar_position": 0,
		"sidebar_label": "CliHelper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"CliHelper.ts\"\r\nThe file name is: CliHelper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport yargs from \"yargs\";\r\nimport ICodeNarratorConfig from \"../config/ICodeNarratorConfig\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport process from \"process\";\r\n\r\nexport default class CliHelper {\r\n\r\n    public async getArgv() : Promise<any> {\r\n        return yargs\r\n            .option('c', {\r\n                type: 'string',\r\n                describe: 'Path to configuration file (JSON or JavaScript)',\r\n                alias: 'config',\r\n                demandOption: false,\r\n            })\r\n            .option('i', {\r\n                type: 'array',\r\n                description: 'Only include specific files or folders in the documentation process',\r\n                alias: 'include'\r\n            }).option('g', {\r\n                type: 'string',\r\n                description: `GPT model. Default is gpt-4, if you do not have access, next best is gpt-3.5-turbo, but it isn't not so good`,\r\n                alias: 'gpt'\r\n            }).option('u', {\r\n                type:'string',\r\n                description: 'Runs only update on userDefined builder from config matching template name',\r\n                alias: 'userDefined'\r\n            })\r\n            .help()\r\n            .alias('help', 'h').argv;\r\n    }\r\n\r\n    public async getConfig(argv : any) : Promise<Partial<ICodeNarratorConfig>> {\r\n        let configPath = argv.config as string;\r\n        let userConfig: Partial<ICodeNarratorConfig> = {};\r\n        if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.ts'))) {\r\n            configPath = path.join(process.cwd(), 'code-narrator.config.ts');\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.config.js'))) {\r\n            configPath = path.join(process.cwd(), 'code-narrator.config.js');\r\n        } else if (fs.existsSync(path.join(process.cwd(), 'code-narrator.json'))) {\r\n            configPath = path.join(process.cwd(), 'code-narrator.json');\r\n        }\r\n\r\n\r\n\r\n        if (configPath) {\r\n            if (configPath.endsWith('.js') || configPath.endsWith('.ts')) {\r\n                userConfig = await import(configPath);\r\n            } else if (configPath.endsWith('.json')) {\r\n                userConfig = JSON.parse((await fs.readFileSync(configPath)).toString());\r\n            }\r\n            (userConfig as any).fromFile = true;\r\n        }\r\n        if (argv.include) {\r\n            userConfig.include = argv.include as string[];\r\n        }\r\n        if (argv.gpt) {\r\n            userConfig.gptModel = argv.gpt as string;\r\n        } else {\r\n            userConfig.gptModel = 'gpt-4'\r\n        }\r\n        if (argv.userDefined) {\r\n            (userConfig as any).userDefined = argv.userDefined;\r\n        }\r\n\r\n\r\n        return userConfig;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\CliHelper.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "FileStructure.ts",
		"path": "src\\utils\\FileStructure.ts",
		"folderPath": "src\\utils",
		"fileContent": "import path, {resolve} from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport default class FileStructure {\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    depth : number;\r\n    constructor(dir : string, entry : any, depth : number) {\r\n        this.name = entry.name;\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, resolve(dir, entry.name));\r\n        this.entry = entry;\r\n        this.depth = depth;\r\n    }\r\n\r\n    static getContent(path: string) : string {\r\n\r\n        if (path.indexOf(',') != -1) {\r\n            let from = 0;\r\n            let to = 999999;\r\n            let lineNumbers = path.split(',')[1].trim();\r\n            if (lineNumbers.indexOf('-') != -1) {\r\n                from = parseInt(lineNumbers.split('-')[0].trim());\r\n                to = parseInt(lineNumbers.split('-')[1].trim());\r\n            } else {\r\n                from = parseInt(lineNumbers)\r\n            }\r\n            path = path.split(',')[0];\r\n            if (!fs.existsSync(path)) {\r\n                console.warn(`path:${path} not found, returning empty string`)\r\n                return '';\r\n            }\r\n\r\n            return this.readFileFromLine(path, from, to)\r\n        }\r\n\r\n        if (!fs.existsSync(path)) {\r\n            console.warn(`path:${path} not found, returning empty string`)\r\n            return '';\r\n        }\r\n\r\n        let stat = fs.statSync(path);\r\n        if (stat.isDirectory()) return '';\r\n\r\n        return fs.readFileSync(path).toString();\r\n    }\r\n\r\n    static readFileFromLine(filename: string, startLine: number, endLine : number): string {\r\n        const content = fs.readFileSync(filename, 'utf-8');\r\n        const lines = content.split('\\n');\r\n        if (endLine > lines.length) endLine = lines.length;\r\n\r\n        return lines.slice(startLine - 1, endLine).join('\\n');\r\n    }\r\n}",
		"documentation": "# FileStructure.ts\n\nThis is a TypeScript code file that defines a `FileStructure` class. The class is designed to handle file structures and read file content based on the given path and line numbers. It uses the `fs` and `path` modules from Node.js to perform file system operations.\n\n## Usage\n\nTo use the `FileStructure` class, you need to import it into your project and create a new instance by providing the required parameters.\n\n```typescript\nimport FileStructure from './FileStructure';\n\nconst dir = 'path/to/directory';\nconst entry = { name: 'example.txt' };\nconst depth = 1;\n\nconst fileStructure = new FileStructure(dir, entry, depth);\n```\n\n## Class: FileStructure\n\n### Constructor: FileStructure(dir: string, entry: any, depth: number)\n\n- `dir`: The directory path where the file is located.\n- `entry`: An object containing the file's name.\n- `depth`: The depth of the file in the directory structure.\n\n### Properties\n\n- `name`: The name of the file.\n- `path`: The relative path of the file from the project's root directory.\n- `entry`: The entry object containing the file's name.\n- `depth`: The depth of the file in the directory structure.\n\n### Static Methods\n\n#### getContent(path: string): string\n\n- `path`: The path of the file to read. It can also include line numbers separated by a comma (e.g., 'path/to/file.txt, 1-5').\n\nReturns the content of the file as a string. If the path includes line numbers, it returns only the specified lines. If the file does not exist or is a directory, it returns an empty string.\n\n#### readFileFromLine(filename: string, startLine: number, endLine: number): string\n\n- `filename`: The path of the file to read.\n- `startLine`: The starting line number to read from.\n- `endLine`: The ending line number to read until.\n\nReturns the content of the file between the specified line numbers as a string.\n\n## Example\n\n```typescript\nimport FileStructure from './FileStructure';\n\nconst dir = 'path/to/directory';\nconst entry = { name: 'example.txt' };\nconst depth = 1;\n\nconst fileStructure = new FileStructure(dir, entry, depth);\n\nconst content = FileStructure.getContent('path/to/file.txt, 1-5');\nconsole.log(content);\n\nconst specificLines = FileStructure.readFileFromLine('path/to/file.txt', 1, 5);\nconsole.log(specificLines);\n```\n\nIn this example, we create a new `FileStructure` instance and use the `getContent` and `readFileFromLine` static methods to read the content of a file and specific lines, respectively.",
		"isFolder": false,
		"updated": "2023-04-28T14:42:44.644Z",
		"sidebar_position": 1,
		"sidebar_label": "FileStructure.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FileStructure.ts\"\r\nThe file name is: FileStructure.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport path, {resolve} from \"path\";\r\nimport fs from \"fs\";\r\n\r\nexport default class FileStructure {\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    depth : number;\r\n    constructor(dir : string, entry : any, depth : number) {\r\n        this.name = entry.name;\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, resolve(dir, entry.name));\r\n        this.entry = entry;\r\n        this.depth = depth;\r\n    }\r\n\r\n    static getContent(path: string) : string {\r\n\r\n        if (path.indexOf(',') != -1) {\r\n            let from = 0;\r\n            let to = 999999;\r\n            let lineNumbers = path.split(',')[1].trim();\r\n            if (lineNumbers.indexOf('-') != -1) {\r\n                from = parseInt(lineNumbers.split('-')[0].trim());\r\n                to = parseInt(lineNumbers.split('-')[1].trim());\r\n            } else {\r\n                from = parseInt(lineNumbers)\r\n            }\r\n            path = path.split(',')[0];\r\n            if (!fs.existsSync(path)) {\r\n                console.warn(`path:${path} not found, returning empty string`)\r\n                return '';\r\n            }\r\n\r\n            return this.readFileFromLine(path, from, to)\r\n        }\r\n\r\n        if (!fs.existsSync(path)) {\r\n            console.warn(`path:${path} not found, returning empty string`)\r\n            return '';\r\n        }\r\n\r\n        let stat = fs.statSync(path);\r\n        if (stat.isDirectory()) return '';\r\n\r\n        return fs.readFileSync(path).toString();\r\n    }\r\n\r\n    static readFileFromLine(filename: string, startLine: number, endLine : number): string {\r\n        const content = fs.readFileSync(filename, 'utf-8');\r\n        const lines = content.split('\\n');\r\n        if (endLine > lines.length) endLine = lines.length;\r\n\r\n        return lines.slice(startLine - 1, endLine).join('\\n');\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\FileStructure.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "FolderStructure.ts",
		"path": "src\\utils\\FolderStructure.ts",
		"folderPath": "src\\utils",
		"fileContent": "import fs, {existsSync, readdirSync} from \"fs\";\r\nimport FileStructure from \"./FileStructure\";\r\nimport path, {resolve} from \"path\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport * as fg from 'fast-glob';\r\n\r\nexport default class FolderStructure {\r\n\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    files : FileStructure[];\r\n    folders : FolderStructure[];\r\n    depth : number;\r\n    constructor(folderPath : string, depth = 0) {\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, folderPath);\r\n\r\n        this.name = path.basename(this.path);\r\n\r\n        this.files = this.getFiles(folderPath, depth);\r\n        this.folders = this.getStructure(folderPath, ++depth);\r\n        this.depth = depth\r\n    }\r\n\r\n    public getHierarchicalTree() {\r\n        let str = ' '.repeat(this.depth) + '+' + this.path + '\\n';\r\n        for (let i=0;i<this.folders.length;i++) {\r\n            str += this.folders[i].getHierarchicalTree() + '\\n';\r\n        }\r\n        for (let i=0;i<this.files.length;i++) {\r\n            str += ' '.repeat(this.depth) + '-' + this.files[i].name + '\\n';\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static getFiles(dir : string, depth : number) {\r\n        const entries = readdirSync(dir, {withFileTypes: true});\r\n        let files :FileStructure[] = [];\r\n        for (const entry of entries) {\r\n            if (!entry.isDirectory() && FolderStructure.shouldDocument(path.join(dir, entry.name), entry.isDirectory())) {\r\n                files.push(new FileStructure(dir, entry, depth))\r\n            }\r\n        }\r\n        return files;\r\n    }\r\n\r\n    public static exists(dir : string) : boolean {\r\n        return existsSync(dir);\r\n    }\r\n    public getFiles(dir: string, depth : number): FileStructure[] {\r\n        return FolderStructure.getFiles(dir, depth);\r\n    }\r\n\r\n    private getStructure(folderPath: string,depth : number) : FolderStructure[] {\r\n        let folders : FolderStructure[] = [];\r\n        const entries = readdirSync(folderPath, {withFileTypes: true});\r\n        for (const entry of entries) {\r\n            const res = resolve(folderPath, entry.name);\r\n            if (entry.isDirectory() && FolderStructure.shouldDocument(path.join(folderPath, entry.name), entry.isDirectory())) {\r\n                folders.push(new FolderStructure(res, depth));\r\n            }\r\n        }\r\n        return folders;\r\n    }\r\n\r\n\r\n    public static shouldDocument(fileOrFolderPath: string, isDirectory: boolean): boolean {\r\n        let include = ConfigHelper.config.include ?? ['*/**']\r\n\r\n        // Concatenate exclude patterns with a '!' prefix to indicate exclusion\r\n        const patterns = [\r\n            ...include,\r\n            ...ConfigHelper.config.exclude.map((pattern) => `!${pattern}`)\r\n        ];\r\n\r\n        // If the path is absolute, make it relative to the current working directory\r\n        const relativePath = path.isAbsolute(fileOrFolderPath)\r\n            ? path.relative(process.cwd(), fileOrFolderPath)\r\n            : fileOrFolderPath;\r\n\r\n        // Find all matching paths for the patterns\r\n        const allMatches = fg.sync(patterns, { onlyFiles: false });\r\n\r\n        // Filter the matches to only include paths that match the input fileOrFolderPath\r\n        const matches = allMatches.filter((match) => {\r\n            if (isDirectory) {\r\n                return path.dirname(match) === relativePath.replaceAll('\\\\', '/')\r\n            }\r\n            return path.normalize(match) === path.normalize(relativePath)\r\n        });\r\n        let isIncluded = matches.length > 0;\r\n\r\n        return isIncluded;\r\n    }\r\n    public static isAncestorOrParentPath(parentPath : string, childPath: string) {\r\n        const relativePath = path.relative(parentPath, childPath);\r\n        return (\r\n            relativePath &&\r\n            !relativePath.startsWith('..') &&\r\n            !path.isAbsolute(relativePath)\r\n        );\r\n    }\r\n\r\n    public static searchForStringInFiles(root: string, search: string): string {\r\n        const files = fs.readdirSync(root);\r\n\r\n        for (const file of files) {\r\n            const fullPath = path.join(root, file);\r\n            const stats = fs.statSync(fullPath);\r\n\r\n            if (stats.isDirectory()) {\r\n                return FolderStructure.searchForStringInFiles(fullPath, search);\r\n            } else {\r\n                if (path.extname(fullPath) === '.ts' || path.extname(fullPath) === '.js') {\r\n                    const content = fs.readFileSync(fullPath, 'utf-8');\r\n                    if (content.includes(search)) {\r\n                        console.log(`${fullPath} contains the search string '${search}'`);\r\n                        return content;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static getFoldersAndFiles(path: string) {\r\n        return fs.readdirSync(path)\r\n    }\r\n}",
		"documentation": "# FolderStructure.ts\n\nThis TypeScript file defines a `FolderStructure` class that represents a folder structure in a file system. The class provides methods to retrieve information about the folder structure, such as its hierarchical tree, files, and folders. It also includes utility methods to check if a folder exists, search for a string in files, and determine if a path is an ancestor or parent of another path.\n\n## Usage\n\nTo use the `FolderStructure` class, you need to import it and create an instance by providing the folder path and an optional depth parameter.\n\n```typescript\nimport FolderStructure from './FolderStructure';\n\nconst folderStructure = new FolderStructure('path/to/folder');\n```\n\n## Class Methods\n\n### constructor(folderPath: string, depth = 0)\n\nThe constructor initializes a new `FolderStructure` instance with the given folder path and depth. It sets the instance properties such as name, path, files, folders, and depth.\n\n### getHierarchicalTree(): string\n\nThis method returns a string representation of the folder structure's hierarchical tree. It includes the folder and file names with indentation based on their depth in the tree.\n\n### static getFiles(dir: string, depth: number): FileStructure[]\n\nThis static method returns an array of `FileStructure` instances for the files in the specified directory. It filters the files based on the `shouldDocument` method.\n\n### static exists(dir: string): boolean\n\nThis static method checks if a directory exists and returns a boolean value.\n\n### getFiles(dir: string, depth: number): FileStructure[]\n\nThis instance method is a wrapper for the static `getFiles` method.\n\n### private getStructure(folderPath: string, depth: number): FolderStructure[]\n\nThis private method returns an array of `FolderStructure` instances for the subfolders in the specified folder path. It filters the folders based on the `shouldDocument` method.\n\n### static shouldDocument(fileOrFolderPath: string, isDirectory: boolean): boolean\n\nThis static method checks if a file or folder should be documented based on the include and exclude patterns defined in the `ConfigHelper` configuration. It returns a boolean value.\n\n### static isAncestorOrParentPath(parentPath: string, childPath: string): boolean\n\nThis static method checks if a path is an ancestor or parent of another path and returns a boolean value.\n\n### static searchForStringInFiles(root: string, search: string): string\n\nThis static method searches for a string in the files of a specified root directory. It returns the content of the first file containing the search string or an empty string if not found.\n\n### static getFoldersAndFiles(path: string): string[]\n\nThis static method returns an array of folder and file names in the specified path.\n\n## Example\n\n```typescript\nimport FolderStructure from './FolderStructure';\n\n// Create a FolderStructure instance\nconst folderStructure = new FolderStructure('path/to/folder');\n\n// Get the hierarchical tree\nconst tree = folderStructure.getHierarchicalTree();\nconsole.log(tree);\n\n// Check if a folder exists\nconst exists = FolderStructure.exists('path/to/folder');\nconsole.log(exists);\n\n// Search for a string in files\nconst content = FolderStructure.searchForStringInFiles('path/to/folder', 'searchString');\nconsole.log(content);\n```\n\n## Note\n\nThe `FolderStructure` class depends on the `FileStructure` class, `ConfigHelper` class, and the `fast-glob` library. Make sure to import and install these dependencies before using the `FolderStructure` class.",
		"isFolder": false,
		"updated": "2023-04-14T15:38:00.047Z",
		"sidebar_position": 2,
		"sidebar_label": "FolderStructure.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"FolderStructure.ts\"\r\nThe file name is: FolderStructure.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs, {existsSync, readdirSync} from \"fs\";\r\nimport FileStructure from \"./FileStructure\";\r\nimport path, {resolve} from \"path\";\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport * as fg from 'fast-glob';\r\n\r\nexport default class FolderStructure {\r\n\r\n    name = '';\r\n    path = '';\r\n    entry : any;\r\n    files : FileStructure[];\r\n    folders : FolderStructure[];\r\n    depth : number;\r\n    constructor(folderPath : string, depth = 0) {\r\n        let project_path = process.cwd();\r\n        this.path = path.relative(project_path, folderPath);\r\n\r\n        this.name = path.basename(this.path);\r\n\r\n        this.files = this.getFiles(folderPath, depth);\r\n        this.folders = this.getStructure(folderPath, ++depth);\r\n        this.depth = depth\r\n    }\r\n\r\n    public getHierarchicalTree() {\r\n        let str = ' '.repeat(this.depth) + '+' + this.path + '\\n';\r\n        for (let i=0;i<this.folders.length;i++) {\r\n            str += this.folders[i].getHierarchicalTree() + '\\n';\r\n        }\r\n        for (let i=0;i<this.files.length;i++) {\r\n            str += ' '.repeat(this.depth) + '-' + this.files[i].name + '\\n';\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public static getFiles(dir : string, depth : number) {\r\n        const entries = readdirSync(dir, {withFileTypes: true});\r\n        let files :FileStructure[] = [];\r\n        for (const entry of entries) {\r\n            if (!entry.isDirectory() && FolderStructure.shouldDocument(path.join(dir, entry.name), entry.isDirectory())) {\r\n                files.push(new FileStructure(dir, entry, depth))\r\n            }\r\n        }\r\n        return files;\r\n    }\r\n\r\n    public static exists(dir : string) : boolean {\r\n        return existsSync(dir);\r\n    }\r\n    public getFiles(dir: string, depth : number): FileStructure[] {\r\n        return FolderStructure.getFiles(dir, depth);\r\n    }\r\n\r\n    private getStructure(folderPath: string,depth : number) : FolderStructure[] {\r\n        let folders : FolderStructure[] = [];\r\n        const entries = readdirSync(folderPath, {withFileTypes: true});\r\n        for (const entry of entries) {\r\n            const res = resolve(folderPath, entry.name);\r\n            if (entry.isDirectory() && FolderStructure.shouldDocument(path.join(folderPath, entry.name), entry.isDirectory())) {\r\n                folders.push(new FolderStructure(res, depth));\r\n            }\r\n        }\r\n        return folders;\r\n    }\r\n\r\n\r\n    public static shouldDocument(fileOrFolderPath: string, isDirectory: boolean): boolean {\r\n        let include = ConfigHelper.config.include ?? ['*/**']\r\n\r\n        // Concatenate exclude patterns with a '!' prefix to indicate exclusion\r\n        const patterns = [\r\n            ...include,\r\n            ...ConfigHelper.config.exclude.map((pattern) => `!${pattern}`)\r\n        ];\r\n\r\n        // If the path is absolute, make it relative to the current working directory\r\n        const relativePath = path.isAbsolute(fileOrFolderPath)\r\n            ? path.relative(process.cwd(), fileOrFolderPath)\r\n            : fileOrFolderPath;\r\n\r\n        // Find all matching paths for the patterns\r\n        const allMatches = fg.sync(patterns, { onlyFiles: false });\r\n\r\n        // Filter the matches to only include paths that match the input fileOrFolderPath\r\n        const matches = allMatches.filter((match) => {\r\n            if (isDirectory) {\r\n                return path.dirname(match) === relativePath.replaceAll('\\\\', '/')\r\n            }\r\n            return path.normalize(match) === path.normalize(relativePath)\r\n        });\r\n        let isIncluded = matches.length > 0;\r\n\r\n        return isIncluded;\r\n    }\r\n    public static isAncestorOrParentPath(parentPath : string, childPath: string) {\r\n        const relativePath = path.relative(parentPath, childPath);\r\n        return (\r\n            relativePath &&\r\n            !relativePath.startsWith('..') &&\r\n            !path.isAbsolute(relativePath)\r\n        );\r\n    }\r\n\r\n    public static searchForStringInFiles(root: string, search: string): string {\r\n        const files = fs.readdirSync(root);\r\n\r\n        for (const file of files) {\r\n            const fullPath = path.join(root, file);\r\n            const stats = fs.statSync(fullPath);\r\n\r\n            if (stats.isDirectory()) {\r\n                return FolderStructure.searchForStringInFiles(fullPath, search);\r\n            } else {\r\n                if (path.extname(fullPath) === '.ts' || path.extname(fullPath) === '.js') {\r\n                    const content = fs.readFileSync(fullPath, 'utf-8');\r\n                    if (content.includes(search)) {\r\n                        console.log(`${fullPath} contains the search string '${search}'`);\r\n                        return content;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static getFoldersAndFiles(path: string) {\r\n        return fs.readdirSync(path)\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\FolderStructure.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "Helper.ts",
		"path": "src\\utils\\Helper.ts",
		"folderPath": "src\\utils",
		"fileContent": "const extract = require('extract-json-from-string');\r\n\r\nexport default class Helper {\r\n\r\n    public static removeExtension(fileName : string) {\r\n        if (fileName.lastIndexOf(\".\") == -1) return fileName;\r\n\r\n        let name = fileName.substring(0, fileName.lastIndexOf(\".\"));\r\n        if (name == '') return fileName;\r\n        return name;\r\n    }\r\n\r\n    static upperFirstLetter(name: string) {\r\n        if (!name) return '';\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n    }\r\n\r\n    static getJsons(content : string) : any[] {\r\n        return extract(content)\r\n    }\r\n}",
		"documentation": "# Helper.ts\n\nThe `Helper.ts` file is a TypeScript module that exports a `Helper` class containing utility methods for string manipulation and JSON extraction. This class can be imported and used in other TypeScript files to perform common operations on strings and JSON data.\n\n## Usage Examples\n\nHere are some examples of how to use the `Helper` class:\n\n```typescript\nimport Helper from './Helper';\n\n// Remove file extension from a file name\nconst fileName = 'example.txt';\nconst nameWithoutExtension = Helper.removeExtension(fileName);\nconsole.log(nameWithoutExtension); // Output: example\n\n// Capitalize the first letter of a string\nconst lowerCaseName = 'john';\nconst capitalized = Helper.upperFirstLetter(lowerCaseName);\nconsole.log(capitalized); // Output: John\n\n// Extract JSON objects from a string\nconst jsonString = '{\"key1\": \"value1\"}{\"key2\": \"value2\"}';\nconst jsonObjects = Helper.getJsons(jsonString);\nconsole.log(jsonObjects); // Output: [{ key1: 'value1' }, { key2: 'value2' }]\n```\n\n## Methods\n\n### removeExtension(fileName: string)\n\nThis method takes a `fileName` string as input and returns the file name without its extension.\n\n#### Parameters\n\n- `fileName`: A string representing the file name with extension.\n\n### upperFirstLetter(name: string)\n\nThis method takes a `name` string as input and returns the same string with the first letter capitalized.\n\n#### Parameters\n\n- `name`: A string representing the input name.\n\n### getJsons(content: string)\n\nThis method takes a `content` string as input and returns an array of JSON objects extracted from the input string.\n\n#### Parameters\n\n- `content`: A string containing JSON objects.\n\n## Technical Concepts\n\n### JSON Extraction\n\nThe `getJsons` method uses the `extract-json-from-string` library to extract JSON objects from a given string. This library is imported at the beginning of the file:\n\n```typescript\nconst extract = require('extract-json-from-string');\n```\n\nThe library provides a function that takes a string as input and returns an array of JSON objects found in the input string. This function is used in the `getJsons` method to perform the JSON extraction.",
		"isFolder": false,
		"updated": "2023-04-24T13:49:48.016Z",
		"sidebar_position": 3,
		"sidebar_label": "Helper.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"Helper.ts\"\r\nThe file name is: Helper.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nconst extract = require('extract-json-from-string');\r\n\r\nexport default class Helper {\r\n\r\n    public static removeExtension(fileName : string) {\r\n        if (fileName.lastIndexOf(\".\") == -1) return fileName;\r\n\r\n        let name = fileName.substring(0, fileName.lastIndexOf(\".\"));\r\n        if (name == '') return fileName;\r\n        return name;\r\n    }\r\n\r\n    static upperFirstLetter(name: string) {\r\n        if (!name) return '';\r\n        return name.charAt(0).toUpperCase() + name.slice(1);\r\n    }\r\n\r\n    static getJsons(content : string) : any[] {\r\n        return extract(content)\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\Helper.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "ProjectStructure.ts",
		"path": "src\\utils\\ProjectStructure.ts",
		"folderPath": "src\\utils",
		"fileContent": "import FolderStructure from \"../utils/FolderStructure\";\r\nimport App from \"../App\";\r\nimport FileStructure from \"./FileStructure\";\r\n\r\nexport default class ProjectStructure {\r\n    folderStructure : FolderStructure;\r\n    constructor() {\r\n        let projectPath = process.cwd();\r\n        this.folderStructure = new FolderStructure(projectPath);\r\n    }\r\n    public async getStructure() {\r\n        return this.folderStructure;\r\n    }\r\n\r\n    public getAllFiles() {\r\n        let files : FileStructure[] = this.folderStructure.files;\r\n        for (let i=0;i<this.folderStructure.folders.length;i++) {\r\n            files.push(...this.getSubfiles(this.folderStructure.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n    private getSubfiles(folder : FolderStructure) {\r\n        let files : FileStructure[] = folder.files;\r\n        for (let i=0;i<folder.folders.length;i++) {\r\n            files.push(...this.getSubfiles(folder.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n}",
		"documentation": "# ProjectStructure.ts\n\nThis is a code file that defines a class called `ProjectStructure`. The class is responsible for managing the structure of a project, including its folders and files. It provides methods to retrieve the folder structure and all the files within the project.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Examples](#examples)\n- [Methods](#methods)\n  - [constructor](#constructor)\n  - [getStructure](#getstructure)\n  - [getAllFiles](#getallfiles)\n  - [getSubfiles](#getsubfiles)\n\n## Class Description\n\nThe `ProjectStructure` class has the following properties:\n\n- `folderStructure`: An instance of the `FolderStructure` class representing the project's folder structure.\n\nThe class has the following methods:\n\n- `constructor`: Initializes a new instance of the `ProjectStructure` class.\n- `getStructure`: Returns the folder structure of the project.\n- `getAllFiles`: Returns an array of all the files in the project.\n- `getSubfiles`: A private method that returns an array of all the files in a given folder.\n\n## Examples\n\n```javascript\nimport ProjectStructure from \"./ProjectStructure\";\n\n// Create a new instance of the ProjectStructure class\nconst projectStructure = new ProjectStructure();\n\n// Get the folder structure of the project\nconst folderStructure = await projectStructure.getStructure();\n\n// Get all the files in the project\nconst allFiles = projectStructure.getAllFiles();\n```\n\n## Methods\n\n### constructor\n\nThe `constructor` method initializes a new instance of the `ProjectStructure` class. It sets the `folderStructure` property to a new instance of the `FolderStructure` class, using the current working directory as the project path.\n\n```javascript\nconstructor() {\n    let projectPath = process.cwd();\n    this.folderStructure = new FolderStructure(projectPath);\n}\n```\n\n### getStructure\n\nThe `getStructure` method is an asynchronous method that returns the folder structure of the project.\n\n```javascript\npublic async getStructure() {\n    return this.folderStructure;\n}\n```\n\n### getAllFiles\n\nThe `getAllFiles` method returns an array of all the files in the project. It iterates through the folders in the folder structure and calls the private `getSubfiles` method to get all the files in each folder.\n\n```javascript\npublic getAllFiles() {\n    let files : FileStructure[] = this.folderStructure.files;\n    for (let i=0;i<this.folderStructure.folders.length;i++) {\n        files.push(...this.getSubfiles(this.folderStructure.folders[i]))\n    }\n    return files;\n}\n```\n\n### getSubfiles\n\nThe `getSubfiles` method is a private method that takes a `FolderStructure` object as a parameter and returns an array of all the files in the given folder. It recursively calls itself for each subfolder in the folder structure.\n\n```javascript\nprivate getSubfiles(folder : FolderStructure) {\n    let files : FileStructure[] = folder.files;\n    for (let i=0;i<folder.folders.length;i++) {\n        files.push(...this.getSubfiles(folder.folders[i]))\n    }\n    return files;\n}\n```",
		"isFolder": false,
		"updated": "2023-04-14T15:41:11.575Z",
		"sidebar_position": 4,
		"sidebar_label": "ProjectStructure.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ProjectStructure.ts\"\r\nThe file name is: ProjectStructure.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport FolderStructure from \"../utils/FolderStructure\";\r\nimport App from \"../App\";\r\nimport FileStructure from \"./FileStructure\";\r\n\r\nexport default class ProjectStructure {\r\n    folderStructure : FolderStructure;\r\n    constructor() {\r\n        let projectPath = process.cwd();\r\n        this.folderStructure = new FolderStructure(projectPath);\r\n    }\r\n    public async getStructure() {\r\n        return this.folderStructure;\r\n    }\r\n\r\n    public getAllFiles() {\r\n        let files : FileStructure[] = this.folderStructure.files;\r\n        for (let i=0;i<this.folderStructure.folders.length;i++) {\r\n            files.push(...this.getSubfiles(this.folderStructure.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n    private getSubfiles(folder : FolderStructure) {\r\n        let files : FileStructure[] = folder.files;\r\n        for (let i=0;i<folder.folders.length;i++) {\r\n            files.push(...this.getSubfiles(folder.folders[i]))\r\n        }\r\n        return files;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\utils\\ProjectStructure.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "utils"
		}
	},
	{
		"name": "README",
		"path": "src\\config",
		"folderPath": "src\\config",
		"fileContent": "",
		"documentation": "# Code Narrator Documentation\n\nThis documentation provides an in-depth explanation of the content of the `src/config` folder in the Code Narrator project. The folder is responsible for managing the configuration of the project, including generating configuration objects, handling environment variables, and setting default values for various settings.\n\n## Table of Contents\n\n- [ConfigGenerator.ts](#configgeneratorts)\n- [ConfigHelper.ts](#confighelperts)\n- [DefaultSettings.ts](#defaultsettingsts)\n- [IBuilder.ts](#ibuilderts)\n- [ICodeNarratorConfig.ts](#icodenarratorconfigts)\n\n## ConfigGenerator.ts\n\nThis document provides an in-depth explanation of the `ConfigGenerator.ts` file, which is a TypeScript code file. The file contains a class named `ConfigGenerator` that is responsible for generating a configuration object for the Code Narrator project. The configuration object is based on the project's folder structure, project file, and other relevant information.\n\n[Read more about ConfigGenerator.ts](ConfigGenerator.ts)\n\n## ConfigHelper.ts\n\nThe `ConfigHelper.ts` file is a TypeScript module that provides a helper class for managing the configuration of a Code Narrator project. This class is responsible for loading the project configuration, handling environment variables, and setting default values for various settings.\n\n[Read more about ConfigHelper.ts](ConfigHelper.ts)\n\n## DefaultSettings.ts\n\nThis is a TypeScript code file that defines the `DefaultSettings` class. The class provides default settings for the Code Narrator application, which is used to generate documentation for a project. The settings include paths, file names, plugin configurations, and other options.\n\n[Read more about DefaultSettings.ts](DefaultSettings.ts)\n\n## IBuilder.ts\n\nThis is a TypeScript interface file that defines the structure of an IBuilder object and its related types. The IBuilder interface is used to represent a builder object that can be used to create various types of files, such as 'howto', 'README', or custom files.\n\n[Read more about IBuilder.ts](IBuilder.ts)\n\n## ICodeNarratorConfig.ts\n\nThis is a TypeScript interface file that defines the structure of the `ICodeNarratorConfig` interface. The `ICodeNarratorConfig` interface is used to configure the settings for a code narration project. This file is essential for setting up and managing the project's configuration.\n\n[Read more about ICodeNarratorConfig.ts](ICodeNarratorConfig.ts)\n\n---\n\n[View the repository on GitHub](https://github.com/ingig/code-narrator/src/config)",
		"isFolder": true,
		"updated": "2023-04-14T15:47:30.368Z",
		"sidebar_position": 30,
		"sidebar_label": "config",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/config\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"ConfigGenerator.ts\",\"path\":\"src\\\\config\\\\ConfigGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ConfigGenerator.ts\\n\\nThis document provides an in-depth explanation of the `ConfigGenerator.ts` file, which is a TypeScript code file. The file contains a class named `ConfigGenerator` that is responsible for generating a configuration object for the Code Narrator project. The configuration object is based on the project's folder structure, project file, and other relevant information.\\n\\n## Table of Contents\"},{\"name\":\"ConfigHelper.ts\",\"path\":\"src\\\\config\\\\ConfigHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ConfigHelper.ts\\n\\nThe `ConfigHelper.ts` file is a TypeScript module that provides a helper class for managing the configuration of a Code Narrator project. This class is responsible for loading the project configuration, handling environment variables, and setting default values for various settings.\\n\\n## Table of Contents\"},{\"name\":\"DefaultSettings.ts\",\"path\":\"src\\\\config\\\\DefaultSettings.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DefaultSettings.ts\\n\\nThis is a TypeScript code file that defines the `DefaultSettings` class. The class provides default settings for the Code Narrator application, which is used to generate documentation for a project. The settings include paths, file names, plugin configurations, and other options.\\n\\n## Usage\"},{\"name\":\"IBuilder.ts\",\"path\":\"src\\\\config\\\\IBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# IBuilder.ts\\n\\nThis is a TypeScript interface file that defines the structure of an IBuilder object and its related types. The IBuilder interface is used to represent a builder object that can be used to create various types of files, such as 'howto', 'README', or custom files.\\n\\n## Table of Contents\"},{\"name\":\"ICodeNarratorConfig.ts\",\"path\":\"src\\\\config\\\\ICodeNarratorConfig.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ICodeNarratorConfig.ts\\n\\nThis is a TypeScript interface file that defines the structure of the `ICodeNarratorConfig` interface. The `ICodeNarratorConfig` interface is used to configure the settings for a code narration project. This file is essential for setting up and managing the project's configuration.\\n\\n## Interface Description\"}]\r\n###"
			}
		],
		"id": "src\\config",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Configuration",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "",
		"documentation": "# Configuration Folder Documentation\n\nThis folder is responsible for managing the configuration files in the system. It contains a TypeScript file named `ConfigurationBuilder.ts` that defines a class for generating and managing configuration files.\n\n## Table of Contents\n\n- [ConfigurationBuilder.ts](#configurationbuilderts)\n\n## ConfigurationBuilder.ts\n\nThe `ConfigurationBuilder.ts` file is a TypeScript code file that defines a class named `ConfigurationBuilder`. This class is responsible for generating and managing configuration files for an application. It extends the `BaseBuilder` class and provides methods for generating, updating, and rendering configuration files.\n\n[Read more about ConfigurationBuilder.ts](ConfigurationBuilder.ts)\n\n## Repository Link\n\nFor more information and to access the source code, visit the repository at [https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Configuration](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Configuration).",
		"isFolder": true,
		"updated": "2023-04-14T15:48:05.848Z",
		"sidebar_position": 30,
		"sidebar_label": "Configuration",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Configuration\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"ConfigurationBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Configuration\\\\ConfigurationBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ConfigurationBuilder.ts\\n\\nThe `ConfigurationBuilder.ts` file is a TypeScript code file that defines a class named `ConfigurationBuilder`. This class is responsible for generating and managing configuration files for an application. It extends the `BaseBuilder` class and provides methods for generating, updating, and rendering configuration files.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Files",
		"folderPath": "src\\documentation\\plugins\\builders\\Files",
		"fileContent": "",
		"documentation": "# Files and Folders Documentation\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [FilesBuilder.ts](#filesbuilder.ts)\n\n## FilesBuilder.ts\n\nThe `FilesBuilder.ts` file is a TypeScript class that extends the `BaseBuilder` class. It is responsible for generating and rendering documentation for files in a project structure. It also handles querying folders, cleaning deleted files from the cache, and determining if a file should be documented.\n\n[Read more about FilesBuilder.ts](FilesBuilder.ts)\n\n## Repository Link\n\nFor more information and access to the repository, visit the following link:\n\n[https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Files](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Files)",
		"isFolder": true,
		"updated": "2023-04-14T15:48:44.812Z",
		"sidebar_position": 31,
		"sidebar_label": "Files",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Files",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Files\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"FilesBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Files\\\\FilesBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FilesBuilder.ts\\n\\nThe `FilesBuilder.ts` file is a TypeScript class that extends the `BaseBuilder` class. It is responsible for generating and rendering documentation for files in a project structure. It also handles querying folders, cleaning deleted files from the cache, and determining if a file should be documented.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Files",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Folders",
		"folderPath": "src\\documentation\\plugins\\builders\\Folders",
		"fileContent": "",
		"documentation": "# Documentation: FoldersBuilder\n\nThis documentation provides an in-depth overview of the `FoldersBuilder` module, which is responsible for generating documentation for a folder structure in a project. The module is implemented in the `FoldersBuilder.ts` file and extends the `BaseBuilder` class.\n\n## Table of Contents\n\n- [FoldersBuilder.ts](#foldersbuilderts)\n- [Repository Link](#repository-link)\n\n## FoldersBuilder.ts\n\nThe `FoldersBuilder.ts` file contains the `FoldersBuilder` class, which is responsible for generating, querying, and rendering documentation for folders and files within the project. The class extends the `BaseBuilder` class and provides methods to perform these tasks.\n\n### Summary\n\n- **File**: FoldersBuilder.ts\n- **Path**: src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts\n- **Type**: TypeScript code file\n- **Responsibilities**: Generating, querying, and rendering documentation for folders and files within the project.\n\nFor more information, please refer to the [FoldersBuilder.ts](src\\documentation\\plugins\\builders\\Folders\\FoldersBuilder.ts) documentation.\n\n## Repository Link\n\nFor the complete source code and additional information, visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Folders).",
		"isFolder": true,
		"updated": "2023-04-14T15:49:35.603Z",
		"sidebar_position": 32,
		"sidebar_label": "Folders",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Folders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Folders\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"FoldersBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Folders\\\\FoldersBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FoldersBuilder.ts\\n\\nThis is a TypeScript code file that defines a `FoldersBuilder` class, which is responsible for generating documentation for a folder structure in a project. The class extends the `BaseBuilder` class and provides methods to generate, query, and render documentation for folders and files within the project.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Folders",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\Howto",
		"folderPath": "src\\documentation\\plugins\\builders\\Howto",
		"fileContent": "",
		"documentation": "# HowToBuilder Documentation\n\nThis folder contains the necessary files and classes for generating and rendering documentation for \"how-to\" guides in the system. The main file in this folder is `HowToBuilder.ts`, which provides a class for extracting and formatting \"how-to\" content from the given files.\n\n## Table of Contents\n\n- [HowToBuilder.ts](#howtobuilderts)\n\n## HowToBuilder.ts\n\n`HowToBuilder.ts` is a TypeScript code file that provides a class `HowToBuilder` for generating and rendering documentation for \"how-to\" guides. The class extends the `BaseBuilder` class and is responsible for extracting and formatting \"how-to\" content from the given files.\n\n### Class: HowToBuilder\n\nThe `HowToBuilder` class is responsible for handling the generation and rendering of \"how-to\" guide documentation. It extends the `BaseBuilder` class and overrides its methods to provide the necessary functionality for \"how-to\" guides.\n\nFor more information about the `HowToBuilder` class, please refer to its [documentation](HowToBuilder.ts).\n\n---\n\nFor the complete source code and additional information, please visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Howto).",
		"isFolder": true,
		"updated": "2023-04-14T15:50:21.966Z",
		"sidebar_position": 33,
		"sidebar_label": "Howto",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\Howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/Howto\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"HowToBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Howto\\\\HowToBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# HowToBuilder.ts\\n\\n`HowToBuilder.ts` is a TypeScript code file that provides a class `HowToBuilder` for generating and rendering documentation for \\\"how-to\\\" guides. The class extends the `BaseBuilder` class and is responsible for extracting and formatting \\\"how-to\\\" content from the given files.\\n\\n## Class: HowToBuilder\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Howto",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders\\UserDefined",
		"folderPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"fileContent": "",
		"documentation": "# User-Defined Documentation Builder\n\nThis folder contains the necessary files to generate and render user-defined documentation based on templates and configurations. The main components are the `UserDefinedBuilder.ts` and `UserDefinedBuilderHelper.ts` files.\n\n## UserDefinedBuilder.ts\n\n[UserDefinedBuilder.ts](UserDefinedBuilder.ts) is a TypeScript code file that defines a class named `UserDefinedBuilder` which extends the `BaseBuilder` class. The purpose of this class is to generate and render user-defined documentation based on templates and configurations.\n\n### Usage\n\nRefer to the [UserDefinedBuilder.ts documentation](UserDefinedBuilder.ts) for more information on how to use this class.\n\n## UserDefinedBuilderHelper.ts\n\n[UserDefinedBuilderHelper.ts](UserDefinedBuilderHelper.ts) is a TypeScript code file that exports a class named `UserDefinedBuilderHelper`. This class provides various utility methods to help with building user-defined content, such as extracting paths, loading arguments, and getting assistant messages.\n\n### Class: UserDefinedBuilderHelper\n\nFor more information on the `UserDefinedBuilderHelper` class and its methods, refer to the [UserDefinedBuilderHelper.ts documentation](UserDefinedBuilderHelper.ts).\n\n---\n\nFor the complete source code, visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/builders/UserDefined).",
		"isFolder": true,
		"updated": "2023-04-14T15:51:14.269Z",
		"sidebar_position": 34,
		"sidebar_label": "UserDefined",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders\\UserDefined",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders/UserDefined\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"UserDefinedBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\UserDefined\\\\UserDefinedBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# UserDefinedBuilder.ts\\n\\nThis is a TypeScript code file that defines a class named `UserDefinedBuilder` which extends the `BaseBuilder` class. The purpose of this class is to generate and render user-defined documentation based on templates and configurations.\\n\\n## Usage\"},{\"name\":\"UserDefinedBuilderHelper.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\UserDefined\\\\UserDefinedBuilderHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# UserDefinedBuilderHelper.ts\\n\\nThe `UserDefinedBuilderHelper.ts` file is a TypeScript code file that exports a class named `UserDefinedBuilderHelper`. This class provides various utility methods to help with building user-defined content, such as extracting paths, loading arguments, and getting assistant messages.\\n\\n## Class: UserDefinedBuilderHelper\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\UserDefined",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\builders",
		"folderPath": "src\\documentation\\plugins\\builders",
		"fileContent": "",
		"documentation": "```\n# Documentation: Content of the Folder\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [BaseBuilder.ts](#basebuilderts)\n- [Configuration](#configuration)\n- [Files](#files)\n- [Folders](#folders)\n- [Howto](#howto)\n- [UserDefined](#userdefined)\n- [Repository Link](#repository-link)\n\n## BaseBuilder.ts\n\nThe `BaseBuilder.ts` file is a TypeScript code file that defines an abstract class `BaseBuilder`. This class serves as the base class for Builder plugins, which are used to generate questions for GPT, parse the response, and load it into a `Document` object that is later cached.\n\n[Read more about BaseBuilder.ts](BaseBuilder.ts)\n\n## Configuration\n\nThis folder is responsible for managing the configuration files in the system. It contains a TypeScript file named `ConfigurationBuilder.ts` that defines a class for generating and managing configuration files.\n\n[Read more about Configuration](Configuration)\n\n## Files\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n[Read more about Files](Files)\n\n## Folders\n\nThis documentation provides an in-depth overview of the `FoldersBuilder` module, which is responsible for generating documentation for a folder structure in a project. The module is implemented in the `FoldersBuilder.ts` file and extends the `BaseBuilder` class.\n\n[Read more about Folders](Folders)\n\n## Howto\n\nThis folder contains the necessary files and classes for generating and rendering documentation for \"how-to\" guides in the system. The main file in this folder is `HowToBuilder.ts`, which provides a class for extracting and formatting \"how-to\" content from the given files.\n\n[Read more about Howto](Howto)\n\n## UserDefined\n\nThis folder contains the necessary files to generate and render user-defined documentation based on templates and configurations. The main components are the `UserDefinedBuilder.ts` and `UserDefinedBuilderHelper.ts` files.\n\n[Read more about UserDefined](UserDefined)\n\n## Repository Link\n\n[Access the repository here](https://github.com/ingig/code-narrator/src/documentation/plugins/builders)\n```",
		"isFolder": true,
		"updated": "2023-04-14T15:52:39.906Z",
		"sidebar_position": 30,
		"sidebar_label": "builders",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\builders",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/builders\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"BaseBuilder.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\BaseBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# BaseBuilder.ts\\n\\nThe `BaseBuilder.ts` file is a TypeScript code file that defines an abstract class `BaseBuilder`. This class serves as the base class for Builder plugins, which are used to generate questions for GPT, parse the response, and load it into a `Document` object that is later cached.\\n\\n## Table of Contents\"},{\"name\":\"Configuration\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Configuration\",\"fileOrFolder\":\"folder\",\"summary\":\"# Configuration Folder Documentation\\n\\nThis folder is responsible for managing the configuration files in the system. It contains a TypeScript file named `ConfigurationBuilder.ts` that defines a class for generating and managing configuration files.\\n\\n## Table of Contents\"},{\"name\":\"Files\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Files\",\"fileOrFolder\":\"folder\",\"summary\":\"# Files and Folders Documentation\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"},{\"name\":\"Folders\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Folders\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: FoldersBuilder\\n\\nThis documentation provides an in-depth overview of the `FoldersBuilder` module, which is responsible for generating documentation for a folder structure in a project. The module is implemented in the `FoldersBuilder.ts` file and extends the `BaseBuilder` class.\\n\\n## Table of Contents\"},{\"name\":\"Howto\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\Howto\",\"fileOrFolder\":\"folder\",\"summary\":\"# HowToBuilder Documentation\\n\\nThis folder contains the necessary files and classes for generating and rendering documentation for \\\"how-to\\\" guides in the system. The main file in this folder is `HowToBuilder.ts`, which provides a class for extracting and formatting \\\"how-to\\\" content from the given files.\\n\\n## Table of Contents\"},{\"name\":\"UserDefined\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\\\\UserDefined\",\"fileOrFolder\":\"folder\",\"summary\":\"# User-Defined Documentation Builder\\n\\nThis folder contains the necessary files to generate and render user-defined documentation based on templates and configurations. The main components are the `UserDefinedBuilder.ts` and `UserDefinedBuilderHelper.ts` files.\\n\\n## UserDefinedBuilder.ts\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\builders",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\generators\\Docusaurus",
		"folderPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"fileContent": "",
		"documentation": "# Docusaurus Generator Documentation\n\nThis folder contains the implementation of the Docusaurus generator, which is responsible for processing a `Document` object and generating documentation compatible with Docusaurus.\n\n## Table of Contents\n\n- [DocusaurusGenerator.ts](#docusaurusgeneratorts)\n\n## DocusaurusGenerator.ts\n\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class named `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with Docusaurus.\n\n### Usage\n\nFor more information on how to use the `DocusaurusGenerator` class, please refer to the [DocusaurusGenerator.ts documentation](DocusaurusGenerator.ts).\n\n## Repository\n\nFor more information and the source code, please visit the [repository](https://github.com/ingig/code-narrator/src/documentation/plugins/generators/Docusaurus).",
		"isFolder": true,
		"updated": "2023-04-14T15:53:13.043Z",
		"sidebar_position": 30,
		"sidebar_label": "Docusaurus",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/generators/Docusaurus\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"DocusaurusGenerator.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\\\\Docusaurus\\\\DocusaurusGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocusaurusGenerator.ts\\n\\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class named `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with Docusaurus.\\n\\n## Usage\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\Docusaurus",
		"lastTouch": "2023-04-15T09:47:59.737Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins\\generators",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis folder contains files and subfolders responsible for generating documentation using the provided JSON content. The main components of this folder are:\n\n1. [BaseGenerator.ts](#BaseGenerator.ts)\n2. [Docusaurus](#Docusaurus)\n\n## BaseGenerator.ts\n\nThe `BaseGenerator.ts` file is a TypeScript code file that defines the base class for Generator plugins. Generator plugins are used to parse the documentation and modify it for the build tool you are using to build the documentation.\n\nThe default plugin with code-narrator is Docusaurus since it fails to build when a function contains a `Promise<>` in return. This plugin clears that Promise from the function name so it can build. It also creates sidebar information.\n\n### Usage\n\nFor more information on how to use the BaseGenerator.ts, please refer to the [BaseGenerator.ts documentation](BaseGenerator.ts).\n\n## Docusaurus\n\nThis folder contains the implementation of the Docusaurus generator, which is responsible for processing a `Document` object and generating documentation compatible with Docusaurus.\n\n### Table of Contents\n\nFor more information on the Docusaurus generator and its components, please refer to the [Docusaurus Generator Documentation](Docusaurus).\n\n---\n\nLink to the repository: [https://github.com/ingig/code-narrator/src/documentation/plugins/generators](https://github.com/ingig/code-narrator/src/documentation/plugins/generators)",
		"isFolder": true,
		"updated": "2023-04-14T15:54:05.711Z",
		"sidebar_position": 31,
		"sidebar_label": "generators",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins/generators\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"BaseGenerator.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\\\\BaseGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# BaseGenerator.ts\\n\\nThe `BaseGenerator.ts` file is a TypeScript code file that defines the base class for Generator plugins. Generator plugins are used to parse the documentation and modify it for the build tool you are using to build the documentation.\\n\\nThe default plugin with code-narrator is Docusaurus since it fails to build when a function contains a `Promise<>` in return. This plugin clears that Promise from the function name so it can build. It also creates sidebar information.\\n\\n## Usage\"},{\"name\":\"Docusaurus\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\\\\Docusaurus\",\"fileOrFolder\":\"folder\",\"summary\":\"# Docusaurus Generator Documentation\\n\\nThis folder contains the implementation of the Docusaurus generator, which is responsible for processing a `Document` object and generating documentation compatible with Docusaurus.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins\\generators",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation\\plugins",
		"folderPath": "src\\documentation\\plugins",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [GenerateOptions.ts](#GenerateOptionsts)\n- [builders](#builders)\n- [generators](#generators)\n\n## GenerateOptions.ts\n\n### Overview\n\nThe `GenerateOptions.ts` file is responsible for handling the options and configurations used during the documentation generation process. This file ensures that the correct settings are applied when generating documentation for different project structures.\n\n[Link to GenerateOptions.ts documentation](GenerateOptions.ts)\n\n## builders\n\nThe `builders` folder contains files and subfolders responsible for building and rendering the documentation content. This folder plays a crucial role in creating the final output of the documentation, which can be easily navigated and understood by users.\n\n[Link to builders documentation](builders)\n\n## generators\n\n### Overview\n\nThe `generators` folder contains files and subfolders responsible for generating documentation using the provided JSON content. The main components of this folder are:\n\n1. [BaseGenerator.ts](#BaseGeneratorts)\n2. [Docusaurus](#Docusaurus)\n\n### BaseGenerator.ts\n\nThe `BaseGenerator.ts` file serves as the foundation for all documentation generators within the system. It provides a set of common functionalities and methods that can be extended and customized by other generator classes.\n\n[Link to BaseGenerator.ts documentation](generators/BaseGenerator.ts)\n\n### Docusaurus\n\nThe `Docusaurus` folder contains files and subfolders responsible for generating documentation using the Docusaurus framework. This folder ensures that the generated documentation is compatible with the Docusaurus format and can be easily integrated into a Docusaurus project.\n\n[Link to Docusaurus documentation](generators/Docusaurus)\n\n[Link to repository](https://github.com/ingig/code-narrator/src/documentation/plugins)",
		"isFolder": true,
		"updated": "2023-04-14T15:55:19.749Z",
		"sidebar_position": 30,
		"sidebar_label": "plugins",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation\\plugins",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation/plugins\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"GenerateOptions.ts\",\"path\":\"src\\\\documentation\\\\plugins\\\\GenerateOptions.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# GenerateOptions.ts\\n\\n## Overview\"},{\"name\":\"builders\",\"path\":\"src\\\\documentation\\\\plugins\\\\builders\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"},{\"name\":\"generators\",\"path\":\"src\\\\documentation\\\\plugins\\\\generators\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis folder contains files and subfolders responsible for generating documentation using the provided JSON content. The main components of this folder are:\\n\\n1. [BaseGenerator.ts](#BaseGenerator.ts)\\n2. [Docusaurus](#Docusaurus)\\n\\n## BaseGenerator.ts\"}]\r\n###"
			}
		],
		"id": "src\\documentation\\plugins",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\documentation",
		"folderPath": "src\\documentation",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n## Table of Contents\n\n- [Document.ts](#documentts)\n- [DocumentationBuilder.ts](#documentationbuilderts)\n- [DocumentationCache.ts](#documentationcachets)\n- [DocumentationGenerator.ts](#documentationgeneratorts)\n- [plugins](#plugins)\n\n## Document.ts\n\nThis is a TypeScript code file that defines a `Document` class. The class is used to represent a document with various properties and methods. The file imports necessary modules and utilities to perform its functions.\n\n[Read more about Document.ts](Document.ts)\n\n## DocumentationBuilder.ts\n\nThis is a TypeScript code file that defines a class called `DocumentationBuilder`. The purpose of this class is to generate documentation for a project using various builder plugins. The class imports necessary dependencies and manages the process of building documentation using the specified plugins.\n\n[Read more about DocumentationBuilder.ts](DocumentationBuilder.ts)\n\n## DocumentationCache.ts\n\nThis is a TypeScript code file that provides a class named `DocumentationCache`. The class is responsible for managing a cache of `Document` objects, which represent documentation files. The cache is stored in a JSON file, and the class provides methods for loading, getting, setting, and removing documents from the cache.\n\n[Read more about DocumentationCache.ts](DocumentationCache.ts)\n\n## DocumentationGenerator.ts\n\nThis is a TypeScript code file that defines a class named `DocumentationGenerator`. The purpose of this class is to generate documentation files based on the contents of a `DocumentationCache`. It supports the use of generator plugins to process the documentation before writing it to the file system.\n\n[Read more about DocumentationGenerator.ts](DocumentationGenerator.ts)\n\n## plugins\n\nThis folder contains various plugins that are used by the `DocumentationBuilder` and `DocumentationGenerator` classes to generate and render documentation for different project structures.\n\n[Read more about plugins](plugins)\n\n---\n\n[View the repository on GitHub](https://github.com/ingig/code-narrator/src/documentation)",
		"isFolder": true,
		"updated": "2023-04-14T15:56:40.249Z",
		"sidebar_position": 31,
		"sidebar_label": "documentation",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\documentation",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/documentation\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"Document.ts\",\"path\":\"src\\\\documentation\\\\Document.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Document.ts\\n\\nThis is a TypeScript code file that defines a `Document` class. The class is used to represent a document with various properties and methods. The file imports necessary modules and utilities to perform its functions.\\n\\n## Table of Contents\"},{\"name\":\"DocumentationBuilder.ts\",\"path\":\"src\\\\documentation\\\\DocumentationBuilder.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocumentationBuilder.ts\\n\\nThis is a TypeScript code file that defines a class called `DocumentationBuilder`. The purpose of this class is to generate documentation for a project using various builder plugins. The class imports necessary dependencies and manages the process of building documentation using the specified plugins.\\n\\n## Table of Contents\"},{\"name\":\"DocumentationCache.ts\",\"path\":\"src\\\\documentation\\\\DocumentationCache.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocumentationCache.ts\\n\\nThis is a TypeScript code file that provides a class named `DocumentationCache`. The class is responsible for managing a cache of `Document` objects, which represent documentation files. The cache is stored in a JSON file, and the class provides methods for loading, getting, setting, and removing documents from the cache.\\n\\n## Usage\"},{\"name\":\"DocumentationGenerator.ts\",\"path\":\"src\\\\documentation\\\\DocumentationGenerator.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# DocumentationGenerator.ts\\n\\nThis is a TypeScript code file that defines a class named `DocumentationGenerator`. The purpose of this class is to generate documentation files based on the contents of a `DocumentationCache`. It supports the use of generator plugins to process the documentation before writing it to the file system.\\n\\n## Table of Contents\"},{\"name\":\"plugins\",\"path\":\"src\\\\documentation\\\\plugins\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\documentation",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\model",
		"folderPath": "src\\model",
		"fileContent": "",
		"documentation": "# Documentation: Content of the Folder\n\nThis folder contains files responsible for defining the structure and settings of a project that needs to be documented. The folder is divided into sections with clear headings and subheadings.\n\n## IProjectDocumentedSettings.ts\n\n[IProjectDocumentedSettings.ts](src\\model\\IProjectDocumentedSettings.ts) is a TypeScript interface file that defines the structure of the `IProjectDocumentedSettings` interface. The interface is used to represent the settings of a project that needs to be documented.\n\n### Interface Description\n\nFor more information about the `IProjectDocumentedSettings` interface, please refer to the [IProjectDocumentedSettings.ts documentation](src\\model\\IProjectDocumentedSettings.ts).\n\n## OpenAIResponse.ts\n\n[OpenAIResponse.ts](src\\model\\OpenAIResponse.ts) is a TypeScript file that contains the definition of the `OpenAIResponse` class.\n\n### Overview\n\nFor more information about the `OpenAIResponse` class, please refer to the [OpenAIResponse.ts documentation](src\\model\\OpenAIResponse.ts).\n\n---\n\nFor the complete source code, visit the [repository](https://github.com/ingig/code-narrator/src/model).",
		"isFolder": true,
		"updated": "2023-04-14T15:57:22.054Z",
		"sidebar_position": 32,
		"sidebar_label": "model",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/model\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"IProjectDocumentedSettings.ts\",\"path\":\"src\\\\model\\\\IProjectDocumentedSettings.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# IProjectDocumentedSettings.ts\\n\\nThis is a TypeScript interface file that defines the structure of the `IProjectDocumentedSettings` interface. The interface is used to represent the settings of a project that needs to be documented.\\n\\n## Interface Description\"},{\"name\":\"OpenAIResponse.ts\",\"path\":\"src\\\\model\\\\OpenAIResponse.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OpenAIResponse.ts\\n\\n## Overview\"}]\r\n###"
			}
		],
		"id": "src\\model",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src\\repositories",
		"folderPath": "src\\repositories",
		"fileContent": "",
		"documentation": "# OpenAI Repository Documentation\n\nThis folder contains the source code for the OpenAI Repository, which is responsible for interacting with the OpenAI API. The folder consists of a single TypeScript file that defines a class called `OpenAIRepository`. This class provides methods to query the OpenAI API and handle the responses.\n\n## Table of Contents\n\n- [OpenAIRepository.ts](#openairepositoryts)\n- [Repository Link](#repository-link)\n\n## OpenAIRepository.ts\n\nThis TypeScript file defines a class called `OpenAIRepository` that provides methods to interact with the OpenAI API. The class is responsible for querying the OpenAI API and handling the responses.\n\n### Class: OpenAIRepository\n\nThe `OpenAIRepository` class contains methods for interacting with the OpenAI API, such as sending requests and processing responses. It is designed to be easily integrated into other parts of the system that require access to the OpenAI API.\n\n[OpenAIRepository.ts Documentation](OpenAIRepository.ts)\n\n## Repository Link\n\nFor more information and to access the source code, visit the repository at:\n\n[https://github.com/ingig/code-narrator/src/repositories](https://github.com/ingig/code-narrator/src/repositories)",
		"isFolder": true,
		"updated": "2023-04-14T15:58:06.557Z",
		"sidebar_position": 33,
		"sidebar_label": "repositories",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\repositories",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/repositories\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"OpenAIRepository.ts\",\"path\":\"src\\\\repositories\\\\OpenAIRepository.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OpenAIRepository.ts\\n\\nThis TypeScript file defines a class called `OpenAIRepository` that provides methods to interact with the OpenAI API. The class is responsible for querying the OpenAI API and handling the responses.\\n\\n## Class: OpenAIRepository\"}]\r\n###"
			}
		],
		"id": "src\\repositories",
		"lastTouch": "2023-04-29T13:17:00.235Z"
	},
	{
		"name": "README",
		"path": "src\\utils",
		"folderPath": "src\\utils",
		"fileContent": "",
		"documentation": "# Documentation\n\nThis documentation provides an in-depth overview of the content of the `src/utils` folder. The folder is responsible for handling various utility functions and classes used throughout the system.\n\n## Table of Contents\n\n- [CliHelper.ts](#clihelperts)\n- [FileStructure.ts](#filestructurets)\n- [FolderStructure.ts](#folderstructurets)\n- [Helper.ts](#helperts)\n- [ProjectStructure.ts](#projectstructurets)\n\n## CliHelper.ts\n\nThis is a TypeScript code file that contains a class named `CliHelper`. The class is responsible for handling command line arguments and configuration for a tool called Code Narrator. The class has two main methods: `getArgv()` and `getConfig()`.\n\n[Usage](#clihelperts)\n\n## FileStructure.ts\n\nThis is a TypeScript code file that defines a `FileStructure` class. The class is used to represent and manipulate file structures in a project. It provides methods to check if a file is a code file and to get the content of a file.\n\n[Table of Contents](#filestructurets)\n\n## FolderStructure.ts\n\nThis TypeScript file defines a `FolderStructure` class that represents a folder structure in a file system. The class provides methods to retrieve information about the folder structure, such as its hierarchical tree, files, and folders. It also includes utility methods to check if a folder exists, search for a string in files, and determine if a path is an ancestor or parent of another path.\n\n[Usage](#folderstructurets)\n\n## Helper.ts\n\nThe `Helper.ts` file is a TypeScript code file that contains a class named `Helper`. This class provides utility methods to perform common operations such as removing file extensions, capitalizing the first letter of a string, and extracting JSON objects from a string.\n\n[Usage Examples](#helperts)\n\n## ProjectStructure.ts\n\nThis is a code file that defines a class called `ProjectStructure`. The class is responsible for managing the structure of a project, including its folders and files. It provides methods to retrieve the folder structure and all the files within the project.\n\n[Table of Contents](#projectstructurets)\n\n---\n\n[Link to Repository](https://github.com/ingig/code-narrator/src/utils)",
		"isFolder": true,
		"updated": "2023-04-14T15:59:30.470Z",
		"sidebar_position": 34,
		"sidebar_label": "utils",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\utils",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/utils\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"CliHelper.ts\",\"path\":\"src\\\\utils\\\\CliHelper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# CliHelper.ts\\n\\nThis is a TypeScript code file that contains a class named `CliHelper`. The class is responsible for handling command line arguments and configuration for a tool called Code Narrator. The class has two main methods: `getArgv()` and `getConfig()`.\\n\\n## Usage\"},{\"name\":\"FileStructure.ts\",\"path\":\"src\\\\utils\\\\FileStructure.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FileStructure.ts\\n\\nThis is a TypeScript code file that defines a `FileStructure` class. The class is used to represent and manipulate file structures in a project. It provides methods to check if a file is a code file and to get the content of a file.\\n\\n## Table of Contents\"},{\"name\":\"FolderStructure.ts\",\"path\":\"src\\\\utils\\\\FolderStructure.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# FolderStructure.ts\\n\\nThis TypeScript file defines a `FolderStructure` class that represents a folder structure in a file system. The class provides methods to retrieve information about the folder structure, such as its hierarchical tree, files, and folders. It also includes utility methods to check if a folder exists, search for a string in files, and determine if a path is an ancestor or parent of another path.\\n\\n## Usage\"},{\"name\":\"Helper.ts\",\"path\":\"src\\\\utils\\\\Helper.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# Helper.ts\\n\\nThe `Helper.ts` file is a TypeScript code file that contains a class named `Helper`. This class provides utility methods to perform common operations such as removing file extensions, capitalizing the first letter of a string, and extracting JSON objects from a string.\\n\\n## Usage Examples\"},{\"name\":\"ProjectStructure.ts\",\"path\":\"src\\\\utils\\\\ProjectStructure.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# ProjectStructure.ts\\n\\nThis is a code file that defines a class called `ProjectStructure`. The class is responsible for managing the structure of a project, including its folders and files. It provides methods to retrieve the folder structure and all the files within the project.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\utils",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "README",
		"path": "src",
		"folderPath": "src",
		"fileContent": "",
		"documentation": "# Code Narrator Documentation\n\nThis documentation provides an in-depth explanation of the content of the Code Narrator project. The project is responsible for generating documentation for a project using GPT. The documentation is divided into sections with clear headings and subheadings.\n\n## Table of Contents\n\n- [App.ts](#app.ts)\n- [cli.ts](#cli.ts)\n- [config](#config)\n- [documentation](#documentation)\n- [model](#model)\n- [repositories](#repositories)\n- [utils](#utils)\n- [Repository Link](#repository-link)\n\n### App.ts\n\nThe `App.ts` file is a part of the code-narrator application, which is responsible for generating documentation for a project using GPT. This file contains the main class `App` that orchestrates the process of loading configuration, caching documentation, building documentation, and generating the final documentation output.\n\n[App.ts Documentation](App.ts)\n\n### cli.ts\n\n`cli.ts` is a command-line interface (CLI) script that serves as the entry point for the Code Narrator application. It handles the parsing of command-line arguments, loading of user configurations, and the execution of the main application logic.\n\n[cli.ts Documentation](cli.ts)\n\n### config\n\nThis folder is responsible for managing the configuration of the project, including generating configuration objects, handling environment variables, and setting default values for various settings.\n\n[config Folder Documentation](config)\n\n### documentation\n\nThis folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\n\n[documentation Folder Documentation](documentation)\n\n### model\n\nThis folder contains files responsible for defining the structure and settings of a project that needs to be documented. The folder is divided into sections with clear headings and subheadings.\n\n[model Folder Documentation](model)\n\n### repositories\n\nThis folder contains the source code for the OpenAI Repository, which is responsible for interacting with the OpenAI API. The folder consists of a single TypeScript file that defines a class called `OpenAIRepository`. This class provides methods to query the OpenAI API and handle the responses.\n\n[repositories Folder Documentation](repositories)\n\n### utils\n\nThis folder is responsible for handling various utility functions and classes used throughout the system.\n\n[utils Folder Documentation](utils)\n\n### Repository Link\n\n[Code Narrator Repository](https://github.com/ingig/code-narrator/src)",
		"isFolder": true,
		"updated": "2023-04-14T16:00:55.941Z",
		"sidebar_position": 30,
		"sidebar_label": "src",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"App.ts\",\"path\":\"src\\\\App.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# App.ts\\n\\nThe `App.ts` file is a part of the code-narrator application, which is responsible for generating documentation for a project using GPT. This file contains the main class `App` that orchestrates the process of loading configuration, caching documentation, building documentation, and generating the final documentation output.\\n\\n## Table of Contents\"},{\"name\":\"cli.ts\",\"path\":\"src\\\\cli.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# cli.ts\\n\\n`cli.ts` is a command-line interface (CLI) script that serves as the entry point for the Code Narrator application. It handles the parsing of command-line arguments, loading of user configurations, and the execution of the main application logic.\\n\\n## Table of Contents\"},{\"name\":\"config\",\"path\":\"src\\\\config\",\"fileOrFolder\":\"folder\",\"summary\":\"# Code Narrator Documentation\\n\\nThis documentation provides an in-depth explanation of the content of the `src/config` folder in the Code Narrator project. The folder is responsible for managing the configuration of the project, including generating configuration objects, handling environment variables, and setting default values for various settings.\\n\\n## Table of Contents\"},{\"name\":\"documentation\",\"path\":\"src\\\\documentation\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis documentation provides an in-depth overview of the content of the folder and its responsibilities within the system. The folder contains files and subfolders that are crucial for generating and rendering documentation for various project structures.\\n\\n## Table of Contents\"},{\"name\":\"model\",\"path\":\"src\\\\model\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation: Content of the Folder\\n\\nThis folder contains files responsible for defining the structure and settings of a project that needs to be documented. The folder is divided into sections with clear headings and subheadings.\\n\\n## IProjectDocumentedSettings.ts\"},{\"name\":\"repositories\",\"path\":\"src\\\\repositories\",\"fileOrFolder\":\"folder\",\"summary\":\"# OpenAI Repository Documentation\\n\\nThis folder contains the source code for the OpenAI Repository, which is responsible for interacting with the OpenAI API. The folder consists of a single TypeScript file that defines a class called `OpenAIRepository`. This class provides methods to query the OpenAI API and handle the responses.\\n\\n## Table of Contents\"},{\"name\":\"utils\",\"path\":\"src\\\\utils\",\"fileOrFolder\":\"folder\",\"summary\":\"# Documentation\\n\\nThis documentation provides an in-depth overview of the content of the `src/utils` folder. The folder is responsible for handling various utility functions and classes used throughout the system.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src",
		"lastTouch": "2023-04-29T15:32:05.836Z"
	},
	{
		"name": "Prerequisites",
		"path": "prerequisites.md",
		"folderPath": "",
		"fileContent": "",
		"documentation": "## Prerequisites for Code-Narrator\n\nBefore you can fork and modify the code of the Code-Narrator project, you need to have the following software, tools, and knowledge:\n\n1. **Node.js**: Code-Narrator is built using Node.js, so you need to have it installed on your system. You can download it from the [official Node.js website](https://nodejs.org/).\n\n2. **npm**: npm is the package manager for Node.js and is used to manage the project's dependencies. It comes bundled with Node.js, so you don't need to install it separately.\n\n3. **TypeScript**: The project is written in TypeScript, so you need to have a basic understanding of TypeScript and its syntax. You can learn more about TypeScript from the [official TypeScript website](https://www.typescriptlang.org/).\n\n4. **Git**: You need to have Git installed on your system to fork and clone the project repository. You can download Git from the [official Git website](https://git-scm.com/).\n\n5. **Code-Narrator repository**: Fork the [Code-Narrator repository](https://github.com/ingig/code-narrator) on GitHub and clone it to your local machine.\n\n6. **Set OPENAI_API_KEY in .env file**: In the project's root directory, create a `.env` file and set the `OPENAI_API_KEY` environment variable with your OpenAI API key. Replace `your_api_key` with your actual API key:\n\n   ```\n   OPENAI_API_KEY=your_api_key\n   ```\n\n7. **Install dependencies**: Navigate to the project's root directory in your terminal and run the following command to install all the required dependencies:\n\n   ```\n   npm install\n   ```\n\nAfter completing these prerequisites, you should be able to work with and modify the Code-Narrator project.",
		"isFolder": false,
		"updated": "2023-04-24T11:07:10.368Z",
		"sidebar_position": 2,
		"sidebar_label": "Prerequisites",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Provide information on Prerequisites for a project called code-narrator.\r\nThis Prerequisites is only for those who want to fork and modify the code of project\r\nIt important to set OPENAI_API_KEY key in .env file\r\nList any required software, tools, or knowledge needed to work with or understand the project.\r\n\r\nThis is the project file\r\n###\r\n\r\n###"
			},
			{
				"role": "assistant",
				"content": "File Content for package.json\n{\n  \"name\": \"code-narrator\",\n  \"version\": \"1.0.6\",\n  \"description\": \"Uses OpenAI to generate documentation on code and tests. It is self documenting tool and should be validation of the documentation working, similar to a compiler compiling it self. Use code-narrator.config.ts file to set the configuration for your project, such as project path, doc, documentation type and more. The package can be install using 'npm i code-narrator -D'\",\n  \"keywords\": [\n    \"documentation\",\n    \"openai\",\n    \"autodoc\"\n  ],\n  \"homepage\": \"https://github.com/ingig/code-narrator\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ingig/code-narrator/issues\"\n  },\n  \"repository\": {\n    \"url\": \"https://github.com/ingig/code-narrator\"\n  },\n  \"bin\": {\n    \"code-narrator-cli\": \"./dist/src/cli.js\"\n  },\n  \"readme\": \"./docs/ReadMe.md\",\n  \"scripts\": {\n    \"compile\": \"tsc\",\n    \"build\": \"npm run compile && gulp\",\n    \"start\": \"npx ts-node .\\\\src\\\\cli.ts\"\n  },\n  \"author\": \"Ingi Gauti Ragnarsson @ingig\",\n  \"license\": \"ISC\",\n  \"main\": \"./dist/src/App.js\",\n  \"types\": \"./dist/App.d.ts\",\n  \"files\": [\n    \"./dist\"\n  ],\n  \"dependencies\": {\n    \"@types/jsonpath\": \"^0.2.0\",\n    \"@types/multimatch\": \"^4.0.0\",\n    \"asynckit\": \"^0.4.0\",\n    \"axios\": \"^0.26.1\",\n    \"combined-stream\": \"^1.0.8\",\n    \"delayed-stream\": \"^1.0.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"extract-json-from-string\": \"^1.0.1\",\n    \"fast-glob\": \"^3.2.12\",\n    \"follow-redirects\": \"^1.15.2\",\n    \"form-data\": \"^4.0.0\",\n    \"fs-extra\": \"^11.1.1\",\n    \"gulp-sourcemaps\": \"^3.0.0\",\n    \"ignore\": \"^5.2.4\",\n    \"jsonpath\": \"^1.1.1\",\n    \"liquidjs\": \"^10.7.0\",\n    \"mime-db\": \"^1.52.0\",\n    \"mime-types\": \"^2.1.35\",\n    \"multimatch\": \"^6.0.0\",\n    \"openai\": \"^3.1.0\",\n    \"yargs\": \"^17.7.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-typescript\": \"^7.21.0\",\n    \"@jest/globals\": \"^29.5.0\",\n    \"@types/jest\": \"^29.4.0\",\n    \"@types/node\": \"^18.11.19\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-copy\": \"^4.0.1\",\n    \"gulp-typescript\": \"^6.0.0-alpha.1\",\n    \"jest\": \"^29.4.2\",\n    \"ts-jest\": \"^29.0.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.9.5\"\n  }\n}\n"
			}
		],
		"id": "prerequisites.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "ReadMe",
		"path": "README.md",
		"folderPath": "",
		"fileContent": "# code-narrator\n\nUses OpenAI to generate documentation for your source code, as well as easy HowTo guides and other custom pages. Code-narrator documents it self and should be a validation of the documentation working, similar to a compiler compiling it self. Configuration `code-narrator.config.js` file is created on first run and sets the configuration for your project, such as project path, doc, documentation type and more. The package can be installed using `npm i code-narrator -D`. code-narrator is language & framework neutral.\n\n## Version\n\n1.0.9\n\n## Getting Started\n\n1. Install the npm package:\n\n```bash\nnpm i code-narrator -D\n```\n\n2. Run the code-narrator using npx:\n\n```bash\nnpx code-narrator\n```\n\n## Configuration\n\nConfiguration is optional and will be generated on the first run. You can modify the `code-narrator.config.js` file to customize the configuration for your project.\n\n## Documentation\n\nFor more information, visit the [documentation](https://github.com/ingig/code-narrator/tree/master/docs).\n\n## Discussion\n\nJoin the discussion about the project at [GitHub Discussions](https://github.com/ingig/code-narrator/discussions).\n\n## Reporting Bugs\n\nReport any bugs or issues at the [GitHub Issues](https://github.com/ingig/code-narrator/issues) page.\n\n## Repository and Homepage\n\n- Repository: [https://github.com/ingig/code-narrator](https://github.com/ingig/code-narrator)\n- Homepage: [https://github.com/ingig/code-narrator](https://github.com/ingig/code-narrator)\n\n## Authors\n\n- Ingi Gauti Ragnarsson @ingig\n\n## License\n\nISC",
		"documentation": "# code-narrator\n\n## Description\n\n[code-narrator](https://github.com/ingig/code-narrator) uses OpenAI to generate documentation for your source code, as well create HowTo, FAQ, Tutorial, and other custom pages. Code-narrator documents itself and should be a validation of the documentation working, similar to a compiler compiling itself. Configuration `code-narrator.config.js` file is created on the first run and sets the configuration for your project, such as project path, doc, documentation type, and more. The package can be installed using `npm i code-narrator -D`. code-narrator is code language, linguistic & framework neutral. It keeps your documentation always up to date.\n\n## Getting Started\n\n1. Install the package:\n\n```bash\nnpm i code-narrator -D\n```\n\n2. Run code-narrator:\n\n```bash\nnpx code-narrator\n```\n\n## Usage\n\nAfter installing and running code-narrator, a configuration file `code-narrator.config.js` will be generated. Modify this file to set the configuration for your project, such as project path, doc, documentation type, and more.\n\n## Repository\n\n[https://github.com/ingig/code-narrator](https://github.com/ingig/code-narrator)\n\n## Documentation\n\n- [Documentation](https://github.com/ingig/code-narrator/tree/master/docs)\n- [FAQ](https://github.com/ingig/code-narrator/tree/master/docs/FAQ.md)\n- [How-to guides](https://github.com/ingig/code-narrator/tree/master/docs/howto)\n- [Tutorials](https://github.com/ingig/code-narrator/tree/master/docs/tutorial)\n\n## Report Issues\n\nIf you encounter any issues or have suggestions, please report them [here](https://github.com/ingig/code-narrator/issues).\n\n## Authors\n\n- Ingi Gauti Ragnarsson @ingig\n\n## Version\n\n1.0.11\n\n## License\n\nISC",
		"isFolder": false,
		"updated": "2023-04-29T13:17:57.790Z",
		"sidebar_position": 1,
		"sidebar_label": "ReadMe",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Configuration will be generated on first run\r\nnpx code-narrator to run\r\nDoc: github.com/ingig/code-narrator/tree/master/docs\r\nFAQ github.com/ingig/code-narrator/tree/master/docs/FAQ.md\r\nHow-to guides github.com/ingig/code-narrator/tree/master/docs/howto\r\nTutorials github.com/ingig/code-narrator/tree/master/docs/tutorial\r\nDiscussion: github.com/ingig/code-narrator/discussions"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed README file for the project code-narrator. \n            Include the sections Title, Description with link to homepage (add paragraphs), Getting started, Usage, Repository link, Documentation, Report Issues, Authors, Version, License. If you do not have data for section then DO NOT create that section."
			},
			{
				"role": "assistant",
				"content": "$.name:\"code-narrator\"\n$.description:\"Uses OpenAI to generate documentation for your source code, as well create HowTo, FAQ, Tutorial and other custom pages. Code-narrator documents it self and should be a validation of the documentation working, similar to a compiler compiling it self. Configuration code-narrator.config.js file is created on first run and sets the configuration for your project, such as project path, doc, documentation type and more. The package can be install using 'npm i code-narrator -D'. code-narrator is code language, linguistic & framework neutral. It keeps your documentation always up to date\"\n$.version:\"1.0.11\"\n$.homepage:\"https://github.com/ingig/code-narrator\"\n$.bugs:{\"url\":\"https://github.com/ingig/code-narrator/issues\"}\n$.author:\"Ingi Gauti Ragnarsson @ingig\"\n$.repository:{\"url\":\"https://github.com/ingig/code-narrator\"}\n$.license:\"ISC\"\n"
			}
		],
		"id": "README.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "How to create HowTo",
		"path": "howto\\howto_create_howto.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Add a HowTo in the Config File\n\n## Introduction\n\nThis guide will walk you through the process of adding a HowTo section in the config file for a software project. The HowTo section will help developers understand how to use specific features and functionalities of the software.\n\n## Prerequisites\n\nBefore you begin, make sure you have the following:\n\n1. Access to the project's `code-narrator.config.js` file.\n2. Familiarity with Liquid templates and JSONPath.\n3. A text editor to edit the config file.\n\n## Step-by-Step Instructions\n\n1. **Create a Liquid template file**: Developers must create a Liquid template file in the `.code-narrator/gpt_questions` directory. This template file will be used to ask GPT questions.\n\n2. **Add a HowTo entry in the config file**: Open the `code-narrator.config.js` file in a text editor and add a new entry for the HowTo section. The entry should look like this:\n\n```json\n{\n  \"type\": \"howto\",\n  \"template\": \"howto_create_howto\",\n  \"name\": \"How to create HowTo\",\n  \"files\": [\n    {\n      \"path\": \"code-narrator.config.js\",\n      \"extract\": \"builders\"\n    }\n  ]\n}\n```\n\n3. **Configure the args property**: The `args` property is used to inject properties into the Liquid template. Any property set in `args` can be accessed in the Liquid template. For example:\n\n```json\n{\n  \"type\": \"howto\",\n  \"template\": \"howto_run_cli\",\n  \"name\": \"HowTo run CLI\",\n  \"args\": {\n    \"docUrl\": \"https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\"\n  },\n  \"files\": [\n    {\n      \"path\": \"src/utils/CliHelper.ts\",\n      \"extract\": \"what arguments are available\"\n    }\n  ]\n}\n```\n\n4. **Use the file property**: The `file` property appends the extracted content of a file to the Liquid template, using JSONPath or the `extract` property that uses LLM to extract content from the file. For example:\n\n```json\n{\n  \"path\": \"package.json\",\n  \"JSONPath\": [\n    \"$.name\",\n    \"$.description\",\n    \"$.version\",\n    \"$.homepage\",\n    \"$.bugs\",\n    \"$.author\",\n    \"$.repository\",\n    \"$.license\"\n  ]\n}\n```\n\n5. **Save the config file**: After adding the HowTo section and configuring the necessary properties, save the `code-narrator.config.js` file.\n\n6. **Review the HowTo section**: Once the config file is saved, the HowTo section should be available in the generated documentation. You can also watch a video demo [here](https://www.youtube.com/watch?v=uJtVCUOTkvw) for more information.\n\nThat's it! You have successfully added a HowTo section in the config file.",
		"isFolder": false,
		"updated": "2023-04-24T14:49:13.126Z",
		"sidebar_position": 12,
		"sidebar_label": "How to create HowTo",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Show how developer would add HowTo in config file,\r\nargs property is used to inject properties into liquid template, any property set in args can be access in liquid template with \r\nfile property appends extracted content of a file to liquid template, using JSONPath or the extract property that uses LLM to extract content from file\r\nDevelopers MUST create a liquid template in .code-narrator/gpt_questions, this template file is used to ask GPT question\r\nYou can see video demo here https://www.youtube.com/watch?v=uJtVCUOTkvw"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help:\n{\"builders\":[{\"name\":\"Prerequisites\",\"template\":\"prerequisites\",\"sidebarPosition\":2,\"args\":{\"entryFileContent\":\"content(./dist/src/cli.js)\",\"configFile\":\"content(code-narrator.config.js)\"},\"files\":[{\"path\":\"package.json\",\"jsonPaths\":[\"$.dependencies\",\"$.devDependencies\",\"$.engine\"]}],\"type\":\"Custom\"},{\"type\":\"README\",\"sidebarPosition\":1,\"template\":\"README\",\"name\":\"ReadMe\",\"args\":{\"entryFileContent\":\"content(./src/cli.ts)\"},\"files\":[{\"path\":\"package.json\",\"JSONPath\":[\"$.name\",\"$.description\",\"$.version\",\"$.homepage\",\"$.bugs\",\"$.author\",\"$.repository\",\"$.license\"]}]},{\"type\":\"README\",\"template\":\"overview_readme\",\"name\":\"README\",\"path\":\"howto\",\"files\":[{\"path\":\"howto/*.md\"}],\"pages\":[{\"type\":\"howto\",\"template\":\"howto_create_howto\",\"name\":\"How to create HowTo\",\"files\":[{\"path\":\"code-narrator.config.js\",\"extract\":\"builders\"}]},{\"type\":\"howto\",\"template\":\"howto_content_to_long\",\"name\":\"Content to long\"},{\"type\":\"howto\",\"name\":\"HowTo run CLI\",\"template\":\"howto_run_cli\",\"args\":{\"docUrl\":\"https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\"},\"files\":[{\"path\":\"src/utils/CliHelper.ts\",\"extract\":\"what arguments are available\"}]},{\"type\":\"howto\",\"template\":\"howto_create_custom_builder\",\"name\":\"Create your own custom builder\",\"files\":[{\"path\":\"code-narrator.config.js\",\"extract\":\"builders\"},{\"path\":\"src/documentation/builders/UserDefinedBuilderHelper.ts\",\"extract\":\"how code parses content(...) and extract:\"}]}]}]}\n"
			}
		],
		"id": "howto\\howto_create_howto.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "README"
		}
	},
	{
		"name": "Content to long",
		"path": "howto\\howto_content_to_long.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Edit Long Content in Code Narrator\n\n## Introduction\n\nWhen using Code Narrator, you may encounter a situation where the content is too long, and the generated documentation is not satisfactory. In such cases, you can manually edit the content to improve the documentation. This guide will walk you through the process of editing long content in Code Narrator using ChatGPT.\n\n## Step-by-Step Instructions\n\n### Step 1: Open the cache.json file\n\nLocate the `.code-narrator/cache.json` file in your project directory and open it with a text editor.\n\n### Step 2: Find the file and copy the requestMessages content\n\nSearch for the file with the long content in the `cache.json` file. Once you find it, copy the content of the `requestMessages` property.\n\n### Step 3: Use ChatGPT to generate documentation\n\nGo to ChatGPT and paste the copied content from the `requestMessages` property into the input field. ChatGPT will generate the documentation for you. If the generated content is incomplete, you can ask ChatGPT to continue generating the documentation.\n\n### Step 4: Copy the generated documentation\n\nOnce you are satisfied with the generated documentation from ChatGPT, copy it to your clipboard.\n\n### Step 5: Update the .md file\n\nNavigate to the `docs` folder in your project directory and locate the corresponding `.md` file. Open the file with a text editor and replace the existing content with the documentation you copied from ChatGPT.\n\n## Conclusion\n\nBy following these steps, you can successfully edit long content in Code Narrator and improve the quality of your documentation. Remember to save your changes in both the `cache.json` and `.md` files to ensure your updates are properly reflected.",
		"isFolder": false,
		"updated": "2023-04-14T16:09:01.021Z",
		"sidebar_position": 14,
		"sidebar_label": "Content to long",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Title of md file: Content to long\r\nWhen code-narrator writes to console that content is to long\r\nthen you will probably not get good documentation.\r\nYou then need to edit it your self. Here is how you do it\r\n1. Open the .code-narrator/cache.json\r\n2. Find the file and copy the content of the requestMessages property\r\n3. Go to ChatGPT and paste inn the question\r\n4. ChatGPT will generate the documentation, if it stops ask it to continue\r\n5. Copy the documentation into you .md file located in docs"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			}
		],
		"id": "howto\\howto_content_to_long.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "How To"
		}
	},
	{
		"name": "Create your own custom builder",
		"path": "howto\\howto_create_custom_builder.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Create a Custom Builder Using the Config File\n\n## Introduction\n\nThis guide will walk you through the process of creating a custom builder using the config file in a project that uses the Code Narrator documentation system. We will assume that you have already set up your project and have a `code-narrator.config.js` file in your root folder. The system uses the Liquid template engine for template files, and you must add a template file to the `.code-narrator/gpt_questions` directory.\n\n## Prerequisites\n\nBefore you begin, ensure that you have the following:\n\n- A project set up with Code Narrator\n- A `code-narrator.config.js` file in your project's root folder\n- Familiarity with the Liquid template engine\n\n## Step-by-Step Instructions\n\n1. **Create a custom builder configuration**\n\n   In your `code-narrator.config.js` file, add a new builder configuration object to the `builders` array. For example:\n\n   ```javascript\n   {\n     \"name\": \"CustomBuilder\",\n     \"template\": \"custom_builder_template\",\n     \"sidebarPosition\": 3,\n     \"args\": {\n       \"entryFileContent\": \"content(./dist/src/cli.js)\",\n       \"configFile\": \"content(code-narrator.config.js)\"\n     },\n     \"files\": [\n       {\n         \"path\": \"package.json\",\n         \"jsonPaths\": [\"$.dependencies\", \"$.devDependencies\", \"$.engine\"]\n       }\n     ],\n     \"type\": \"Custom\"\n   }\n   ```\n\n2. **Create a template file**\n\n   Create a new Liquid template file in the `.code-narrator/gpt_questions` directory. Name the file according to the `template` property in your custom builder configuration (e.g., `custom_builder_template.liquid`).\n\n3. **Using `args` and `files` properties in the config**\n\n   The `args` property allows you to pass arguments to the template. In the example above, we pass the content of `./dist/src/cli.js` and `code-narrator.config.js` as arguments.\n\n   The `files` property allows you to specify files and their JSON paths to be included in the documentation. In the example above, we include the `package.json` file and specify the JSON paths for dependencies, devDependencies, and engine.\n\n4. **Understanding `content()`**\n\n   The `content()` function retrieves the entire content of a file specified in the argument. For example, `content(./dist/src/cli.js)` retrieves the content of the `cli.js` file.\n\n5. **Understanding JSONPath and `extract`**\n\n   JSONPath is a query language for JSON data structures. It allows you to extract specific parts of a JSON file. The `extract` property in the config file uses natural language to extract content from a file. Both JSONPath and `extract` are used to limit the content sent to GPT.\n\n6. **Difference between the `type` property**\n\n   The `type` property in the builder configuration determines the type of builder being used. In our example, we set the `type` to \"Custom\" to indicate that we are creating a custom builder. Other possible values include \"README\" and \"HowTo\" for different types of documentation builders.",
		"isFolder": false,
		"updated": "2023-04-16T11:26:29.911Z",
		"sidebar_position": 15,
		"sidebar_label": "Create your own custom builder",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Give example howto create a custom builder using the config file by adding to builder config\r\nAssume the user has already set up his project and has a code-narrator config file in his root folder\r\nThe system uses Liquid template engine for template files and must add a template file to .code-narrator/gpt_questions\r\nGive examples of using args and files properties in config\r\nExplain how content() retrieve the whole content of a file\r\nExplain JSONPath.Explain extract works using natural language to extract content from file. Both are used to limit the content sent to GPT.\r\nExplain difference between the type property\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help: {\"builders\":[{\"name\":\"Prerequisites\",\"template\":\"prerequisites\",\"sidebarPosition\":2,\"args\":{\"entryFileContent\":\"content(./dist/src/cli.js)\",\"configFile\":\"content(code-narrator.config.js)\"},\"files\":[{\"path\":\"package.json\",\"jsonPaths\":[\"$.dependencies\",\"$.devDependencies\",\"$.engine\"]}],\"type\":\"Custom\"},{\"type\":\"README\",\"sidebarPosition\":1,\"template\":\"README\",\"name\":\"ReadMe\",\"args\":{\"entryFileContent\":\"content(./src/cli.ts)\"},\"files\":[{\"path\":\"package.json\",\"JSONPath\":[\"$.name\",\"$.description\",\"$.version\",\"$.homepage\",\"$.bugs\",\"$.author\",\"$.repository\",\"$.license\"]}]},{\"type\":\"README\",\"template\":\"overview_readme\",\"name\":\"How To\",\"path\":\"howto\",\"files\":[{\"path\":\"howto/*.md\"}],\"pages\":[{\"type\":\"howto\",\"template\":\"howto_create_howto\",\"name\":\"How to create HowTo\",\"files\":[{\"path\":\"code-narrator.config.js\"}]},{\"type\":\"howto\",\"template\":\"howto_use_cli\",\"name\":\"Use CLI\",\"files\":[{\"path\":\"src/cli.ts\"},{\"path\":\"package.json\",\"JSONPath\":[\"$.repository\"]}]},{\"type\":\"howto\",\"template\":\"howto_content_to_long\",\"name\":\"Content to long\"},{\"type\":\"howto\",\"template\":\"howto_create_custom_builder\",\"name\":\"Create your own custom builder\",\"files\":[{\"path\":\"code-narrator.config.js\",\"extract\":\"builders\"},{\"path\":\"src/documentation/builders/UserDefinedBuilderHelper.ts\",\"extract\":\"how code parses content(...) and extract:\"}]}]}]}"
			}
		],
		"id": "howto\\howto_create_custom_builder.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "How To"
		}
	},
	{
		"name": "JenkyllGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\Docusaurus\\JenkyllGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"fileContent": "import BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nexport default class JenkyllGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n\r\n        ConfigHelper.config.rootFileName = 'index';\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = path.basename(document.folderPath)\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\nparent: ${parent}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# JenkyllGenerator.ts\n\nThe `JenkyllGenerator.ts` file is a TypeScript code file that defines a class named `JenkyllGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a given `Document` object to generate a Jekyll-compatible documentation file.\n\n## Table of Contents\n\n- [Usage](#usage)\n- [Methods](#methods)\n  - [process](#process)\n- [Technical Concepts](#technical-concepts)\n\n## Usage\n\nTo use the `JenkyllGenerator` class, you need to import it and create an instance of the class. Then, you can call the `process` method with a `Document` object as its argument.\n\n```typescript\nimport JenkyllGenerator from \"./JenkyllGenerator\";\nimport Document from \"../../../Document\";\n\nconst generator = new JenkyllGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Methods\n\n### process\n\nThe `process` method takes a `Document` object as its input and processes it to generate a Jekyll-compatible documentation file. It returns the processed `Document` object.\n\n```typescript\npublic process(document: Document): Document\n```\n\n#### Parameters\n\n- `document` (Document): The `Document` object to be processed.\n\n## Technical Concepts\n\n- **Jekyll**: Jekyll is a static site generator that takes Markdown files and other content, and transforms them into a complete static website. It is widely used for creating documentation websites and blogs.\n\n- **Front Matter**: In Jekyll, the front matter is a block of YAML code at the beginning of a file that contains metadata about the file. The front matter is used to configure how Jekyll processes the file and generates the static site. In the `JenkyllGenerator` class, the front matter is generated and added to the `Document` object's `documentation` property.\n\n- **ConfigHelper**: The `ConfigHelper` class is used to manage the configuration settings for the application. In the `JenkyllGenerator` class, the `ConfigHelper` is used to set the `rootFileName` property to `'index'`.",
		"isFolder": false,
		"updated": "2023-04-15T09:50:57.770Z",
		"sidebar_position": 1,
		"sidebar_label": "JenkyllGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators\\Docusaurus",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"JenkyllGenerator.ts\"\r\nThe file name is: JenkyllGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"../BaseGenerator\";\r\nimport Document from '../../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nexport default class JenkyllGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n\r\n        ConfigHelper.config.rootFileName = 'index';\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = path.basename(document.folderPath)\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\nparent: ${parent}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\Docusaurus\\JenkyllGenerator.ts",
		"lastTouch": "2023-04-15T09:50:57.771Z"
	},
	{
		"name": "DocusaurusGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\DocusaurusGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "import BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# DocusaurusGenerator.ts\n\nThe `DocusaurusGenerator.ts` file is a TypeScript code file that defines a class called `DocusaurusGenerator`. This class extends the `BaseGenerator` class and is responsible for processing a `Document` object to generate documentation compatible with the Docusaurus static site generator.\n\n## Usage\n\nTo use the `DocusaurusGenerator` class, you need to import it and create an instance of the class. Then, you can call the `process()` method on the instance, passing a `Document` object as an argument.\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Class Methods\n\n### process(document: Document)\n\nThe `process()` method takes a `Document` object as its argument and processes it to generate documentation compatible with Docusaurus. It returns the processed `Document` object.\n\n#### Parameters\n\n- `document: Document` - The `Document` object to be processed.\n\n#### Technical Concepts\n\nThe `process()` method performs the following operations on the `Document` object:\n\n1. Removes any occurrences of `: Promise<[a-zA-Z]*>` and `: Partial<[a-zA-Z]*>` from the `documentation` property of the `Document` object. This is because Docusaurus does not support these types in its headers.\n\n2. Sets the `sidebar_label` and `sidebar_position` properties of the `Document` object. If these properties are not already set, it assigns default values.\n\n3. Prepends the `documentation` property of the `Document` object with the `sidebar_position` and `sidebar_label` properties in the Docusaurus frontmatter format.\n\n## Example\n\nHere's an example of how the `DocusaurusGenerator` class can be used to process a `Document` object:\n\n```typescript\nimport DocusaurusGenerator from './DocusaurusGenerator';\nimport Document from '../../Document';\n\nconst generator = new DocusaurusGenerator();\nconst document = new Document({\n  name: 'Example Document',\n  documentation: 'This is an example document.',\n  sidebar_label: 'Example',\n  sidebar_position: 2,\n});\n\nconst processedDocument = generator.process(document);\n\nconsole.log(processedDocument.documentation);\n```\n\nThis will output the following processed documentation:\n\n```\n---\nsidebar_position: 2\nsidebar_label: Example\n---\n\nThis is an example document.\n```",
		"isFolder": false,
		"updated": "2023-04-15T18:05:20.943Z",
		"sidebar_position": 1,
		"sidebar_label": "DocusaurusGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"DocusaurusGenerator.ts\"\r\nThe file name is: DocusaurusGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nexport default class DocusaurusGenerator extends BaseGenerator {\r\n\r\n    public process(document : Document) {\r\n        //docusaurus does not like to have Promise<> in its headers, so let's remove them\r\n        document.documentation = document.documentation\r\n            .replaceAll(/: Promise<[a-zA-Z]*>/gm, '')\r\n            .replaceAll(/: Partial<[a-zA-Z]*>/gm, '')\r\n            .trim();\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        document.documentation = `---\r\nsidebar_position: ${position}\r\nsidebar_label: ${sidebar_label}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\DocusaurusGenerator.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "generators"
		}
	},
	{
		"name": "JekyllGenerator.ts",
		"path": "src\\documentation\\plugins\\generators\\JekyllGenerator.ts",
		"folderPath": "src\\documentation\\plugins\\generators",
		"fileContent": "import BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\n\r\nexport default class JekyllGenerator extends BaseGenerator {\r\n\r\n    public process(document: Document) {\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = '';\r\n        let has_children = '';\r\n        if (document.name != 'README') {\r\n            let parentName = (document.data && document.data.parent) ? document.data.parent : ''\r\n            if (parentName == '') {\r\n                let folderDocument = DocumentationCache.getFolderByFolderPath(document.folderPath);\r\n\r\n                if (folderDocument) {\r\n                    parentName = folderDocument.path\r\n                }\r\n            }\r\n            if (parentName != '') {\r\n                parent = `parent: ${parentName}`\r\n            }\r\n        } else if (document.name == 'README' && document.folderPath != '') {\r\n            has_children = 'has_children: true'\r\n        }\r\n\r\n        if (document.data && document.data.has_children) {\r\n            has_children = 'has_children: true';\r\n        }\r\n        let permalink = '';\r\n        if (document.isFolder && document.folderPath != '') {\r\n            let fileName = `${ConfigHelper.config.folderRootFileName}${ConfigHelper.config.document_file_extension}`\r\n            permalink = `permalink: ${document.folderPath.replaceAll('\\\\', '/')}/${fileName}`\r\n        } else if (!document.isFolder && document.folderPath != '') {\r\n            permalink = `permalink: ${document.path.replaceAll('\\\\', '/')}${ConfigHelper.config.document_file_extension}`\r\n        }\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\n${parent}\r\n${has_children}\r\n${permalink}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}",
		"documentation": "# JekyllGenerator.ts\n\nThis is a TypeScript code file that defines the `JekyllGenerator` class, which extends the `BaseGenerator` class. The purpose of this class is to process a given `Document` object and generate the appropriate Jekyll front matter for it. This class is particularly useful when working with Jekyll-based documentation websites.\n\n## Usage\n\nTo use the `JekyllGenerator` class, you need to import it and create a new instance. Then, call the `process()` method with a `Document` object as its argument.\n\n```typescript\nimport JekyllGenerator from \"./JekyllGenerator\";\nimport Document from \"../../Document\";\n\nconst generator = new JekyllGenerator();\nconst document = new Document(/* ... */);\n\nconst processedDocument = generator.process(document);\n```\n\n## Methods\n\n### process(document: Document)\n\nThis method takes a `Document` object as its input and processes it to generate the Jekyll front matter. It returns the modified `Document` object with the front matter added to its `documentation` property.\n\n#### Parameters\n\n- `document: Document` - The `Document` object to be processed.\n\n## Technical Concepts\n\n### Jekyll Front Matter\n\nJekyll front matter is a block of YAML code at the beginning of a Markdown file that contains metadata about the file. It is used by Jekyll to generate the static website. In this class, the front matter is generated based on the properties of the `Document` object, such as its `sidebar_label`, `sidebar_position`, `parent`, and `has_children`.\n\n### Document Object\n\nThe `Document` object is a custom class that represents a documentation file. It contains properties such as `name`, `folderPath`, `data`, and `documentation`. The `JekyllGenerator` class processes these properties to generate the appropriate Jekyll front matter.\n\n### DocumentationCache\n\nThe `DocumentationCache` class is used to store and retrieve `Document` objects based on their folder paths. In the `JekyllGenerator` class, it is used to find the parent document of a given document, if any.\n\n### ConfigHelper\n\nThe `ConfigHelper` class is used to access the configuration settings of the application. In the `JekyllGenerator` class, it is used to get the `folderRootFileName` and `document_file_extension` settings, which are used to generate the `permalink` property in the Jekyll front matter.",
		"isFolder": false,
		"updated": "2023-04-24T11:01:11.945Z",
		"sidebar_position": 2,
		"sidebar_label": "JekyllGenerator.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\generators",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"JekyllGenerator.ts\"\r\nThe file name is: JekyllGenerator.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\n\r\nexport default class JekyllGenerator extends BaseGenerator {\r\n\r\n    public process(document: Document) {\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = '';\r\n        let has_children = '';\r\n        if (document.name != 'README') {\r\n            let parentName = (document.data && document.data.parent) ? document.data.parent : ''\r\n            if (parentName == '') {\r\n                let folderDocument = DocumentationCache.getFolderByFolderPath(document.folderPath);\r\n\r\n                if (folderDocument) {\r\n                    parentName = folderDocument.path\r\n                }\r\n            }\r\n            if (parentName != '') {\r\n                parent = `parent: ${parentName}`\r\n            }\r\n        } else if (document.name == 'README' && document.folderPath != '') {\r\n            has_children = 'has_children: true'\r\n        }\r\n\r\n        if (document.data && document.data.has_children) {\r\n            has_children = 'has_children: true';\r\n        }\r\n        let permalink = '';\r\n        if (document.isFolder && document.folderPath != '') {\r\n            let fileName = `${ConfigHelper.config.folderRootFileName}${ConfigHelper.config.document_file_extension}`\r\n            permalink = `permalink: ${document.folderPath.replaceAll('\\\\', '/')}/${fileName}`\r\n        } else if (!document.isFolder && document.folderPath != '') {\r\n            permalink = `permalink: ${document.path.replaceAll('\\\\', '/')}${ConfigHelper.config.document_file_extension}`\r\n        }\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\n${parent}\r\n${has_children}\r\n${permalink}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\generators\\JekyllGenerator.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "generators"
		}
	},
	{
		"name": "ConfigFileSerializer.ts",
		"path": "src\\config\\ConfigFileSerializer.ts",
		"folderPath": "src\\config",
		"fileContent": "import fs from \"fs\";\r\nimport path from \"path\";\r\nimport process from \"process\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\n\r\nexport default class ConfigFileSerializer {\r\n\r\n    public async serialize(config : ICodeNarratorConfig) {\r\n\r\n        const configContent = `\r\nconst ConfigurationBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/Configuration/ConfigurationBuilder\");\r\nconst FilesBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/Files/FilesBuilder\");\r\nconst FoldersBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/Folders/FoldersBuilder\");\r\nconst UserDefinedBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/UserDefined/UserDefinedBuilder\");\r\n        \r\n/**\r\n * You can find the documentation about code-narrator.config.js at\r\n * https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\r\n *\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    ${this.generateConfigString(config)}\r\n}\r\nmodule.exports = config;\r\n`;\r\n        fs.writeFileSync(path.join(process.cwd(), 'code-narrator.config.js'), configContent)\r\n\r\n        if (!fs.existsSync(path.join(process.cwd(), '.code-narrator'))) {\r\n            fs.mkdirSync(path.join(process.cwd(), '.code-narrator'))\r\n        }\r\n        if (!fs.existsSync(path.join(process.cwd(), '.code-narrator/gpt_questions'))) {\r\n            fs.mkdirSync(path.join(process.cwd(), '.code-narrator/gpt_questions'))\r\n        }\r\n        fs.copyFileSync(path.join(__dirname, 'README.liquid'), path.join(process.cwd(), '.code-narrator/gpt_questions/README.liquid'))\r\n        fs.copyFileSync(path.join(__dirname, 'overview_readme.liquid'), path.join(process.cwd(), '.code-narrator/gpt_questions/overview_readme.liquid'))\r\n        fs.copyFileSync(path.join(__dirname, 'howto_create_howto.liquid'), path.join(process.cwd(), '.code-narrator/gpt_questions/howto_create_howto.liquid'))\r\n\r\n    }\r\n\r\n\r\n    public generateConfigString(configObject : any, indentLevel = 1) {\r\n        let indent = '  '.repeat(indentLevel);\r\n        let configString = '';\r\n\r\n        for (const [key, value] of Object.entries(configObject)) {\r\n            if (typeof value === 'object' && !Array.isArray(value)) {\r\n                configString += this.getCommentByKey(key, indent);\r\n                configString += `${indent}${key}: {\\n`;\r\n                configString += this.generateConfigString(value, indentLevel + 1);\r\n                configString += `${indent}},\\n`;\r\n            } else if (Array.isArray(value)) {\r\n                configString += this.getCommentByKey(key, indent);\r\n                configString += `${indent}${key}: [\\n`;\r\n                configString += value\r\n                    .map((item) => {\r\n                        if (typeof item === 'object') {\r\n                            return (\r\n                                `${indent}  {\\n` +\r\n                                this.generateConfigString(item, indentLevel + 2) +\r\n                                `${indent}  },`\r\n                            );\r\n                        } else if (typeof item === 'function') {\r\n                            return `${indent} ${item.name},`\r\n                        } else {\r\n                            return `${indent}  ${JSON.stringify(item)},`;\r\n                        }\r\n                    })\r\n                    .join('\\n');\r\n                configString += `\\n${indent}],\\n`;\r\n            } else {\r\n                configString += this.getCommentByKey(key, indent);\r\n                configString += `${indent}${key}: ${JSON.stringify(value)},\\n`;\r\n            }\r\n        }\r\n\r\n        return configString;\r\n    }\r\n\r\n    map = new Map([\r\n        ['config_files', 'App specific configuration files. This could be something like project_name.json'],\r\n        ['repository_url', 'Url to the repository, code-narrator tries to extract this from project file'],\r\n        ['builderPlugins', 'These are the plugins used when building documentation. You can create your own plugin. Checkout the code-narrator docs HowTo create a builder plugin'],\r\n        ['gptSystemCommands', 'These are system commends send to GPT with every query'],\r\n        ['readmeRoot', 'Indicates if the documentation should create a README file in root of project'],\r\n        ['builders', 'Array of user defined documentations. See code-narrator How to create a user defined builder']\r\n    ])\r\n    private getCommentByKey(key: string, indent: string) {\r\n        let value = this.map.get(key);\r\n        if (!value) return '';\r\n        return `${indent}// ${value}\\n`;\r\n    }\r\n}",
		"documentation": "# ConfigFileSerializer.ts\n\nThis is a TypeScript code file that contains the `ConfigFileSerializer` class. This class is responsible for serializing configuration objects into a string format and writing them to a file. It also handles the creation of necessary directories and copying of template files.\n\n## Usage\n\nTo use the `ConfigFileSerializer` class, you need to import it and create a new instance. Then, you can call the `serialize` method with a configuration object to generate the configuration file.\n\n```typescript\nimport ConfigFileSerializer from './ConfigFileSerializer';\nimport ICodeNarratorConfig from './ICodeNarratorConfig';\n\nconst configSerializer = new ConfigFileSerializer();\nconst config: ICodeNarratorConfig = {\n  // Your configuration object\n};\n\nconfigSerializer.serialize(config);\n```\n\n## Methods\n\n### serialize(config: ICodeNarratorConfig): Promise<void>\n\nThis method takes a configuration object of type `ICodeNarratorConfig` and generates a configuration file named `code-narrator.config.js`. It also creates necessary directories and copies template files.\n\n#### Parameters\n\n- `config`: An object that implements the `ICodeNarratorConfig` interface.\n\n### generateConfigString(configObject: any, indentLevel?: number): string\n\nThis method takes a configuration object and an optional indentation level and returns a formatted configuration string.\n\n#### Parameters\n\n- `configObject`: The configuration object to be serialized.\n- `indentLevel`: An optional number representing the indentation level (default is 1).\n\n### getCommentByKey(key: string, indent: string): string\n\nThis method takes a key and an indentation string and returns a comment string for the given key.\n\n#### Parameters\n\n- `key`: The key for which the comment should be generated.\n- `indent`: The indentation string to be used in the comment.\n\n## Technical Concepts\n\n### ICodeNarratorConfig\n\nThis is an interface that defines the structure of the configuration object used in the `ConfigFileSerializer` class. It contains properties such as `config_files`, `repository_url`, `builderPlugins`, `gptSystemCommands`, `readmeRoot`, and `builders`.\n\n### Template Files\n\nThe `ConfigFileSerializer` class copies the following template files to the `.code-narrator/gpt_questions` directory:\n\n- `README.liquid`\n- `overview_readme.liquid`\n- `howto_create_howto.liquid`\n\nThese files are used as templates for generating documentation.",
		"isFolder": false,
		"updated": "2023-04-24T18:51:52.756Z",
		"sidebar_position": 0,
		"sidebar_label": "ConfigFileSerializer.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigFileSerializer.ts\"\r\nThe file name is: ConfigFileSerializer.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport process from \"process\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\n\r\nexport default class ConfigFileSerializer {\r\n\r\n    public async serialize(config : ICodeNarratorConfig) {\r\n\r\n        const configContent = `\r\nconst ConfigurationBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/Configuration/ConfigurationBuilder\");\r\nconst FilesBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/Files/FilesBuilder\");\r\nconst FoldersBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/Folders/FoldersBuilder\");\r\nconst UserDefinedBuilder = require(\"code-narrator/dist/src/documentation/plugins/builders/UserDefined/UserDefinedBuilder\");\r\n        \r\n/**\r\n * You can find the documentation about code-narrator.config.js at\r\n * https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\r\n *\r\n * @type {ICodeNarratorConfig}\r\n */\r\nconst config = {\r\n    ${this.generateConfigString(config)}\r\n}\r\nmodule.exports = config;\r\n`;\r\n        fs.writeFileSync(path.join(process.cwd(), 'code-narrator.config.js'), configContent)\r\n\r\n        if (!fs.existsSync(path.join(process.cwd(), '.code-narrator'))) {\r\n            fs.mkdirSync(path.join(process.cwd(), '.code-narrator'))\r\n        }\r\n        if (!fs.existsSync(path.join(process.cwd(), '.code-narrator/gpt_questions'))) {\r\n            fs.mkdirSync(path.join(process.cwd(), '.code-narrator/gpt_questions'))\r\n        }\r\n        fs.copyFileSync(path.join(__dirname, 'README.liquid'), path.join(process.cwd(), '.code-narrator/gpt_questions/README.liquid'))\r\n        fs.copyFileSync(path.join(__dirname, 'overview_readme.liquid'), path.join(process.cwd(), '.code-narrator/gpt_questions/overview_readme.liquid'))\r\n        fs.copyFileSync(path.join(__dirname, 'howto_create_howto.liquid'), path.join(process.cwd(), '.code-narrator/gpt_questions/howto_create_howto.liquid'))\r\n\r\n    }\r\n\r\n\r\n    public generateConfigString(configObject : any, indentLevel = 1) {\r\n        let indent = '  '.repeat(indentLevel);\r\n        let configString = '';\r\n\r\n        for (const [key, value] of Object.entries(configObject)) {\r\n            if (typeof value === 'object' && !Array.isArray(value)) {\r\n                configString += this.getCommentByKey(key, indent);\r\n                configString += `${indent}${key}: {\\n`;\r\n                configString += this.generateConfigString(value, indentLevel + 1);\r\n                configString += `${indent}},\\n`;\r\n            } else if (Array.isArray(value)) {\r\n                configString += this.getCommentByKey(key, indent);\r\n                configString += `${indent}${key}: [\\n`;\r\n                configString += value\r\n                    .map((item) => {\r\n                        if (typeof item === 'object') {\r\n                            return (\r\n                                `${indent}  {\\n` +\r\n                                this.generateConfigString(item, indentLevel + 2) +\r\n                                `${indent}  },`\r\n                            );\r\n                        } else if (typeof item === 'function') {\r\n                            return `${indent} ${item.name},`\r\n                        } else {\r\n                            return `${indent}  ${JSON.stringify(item)},`;\r\n                        }\r\n                    })\r\n                    .join('\\n');\r\n                configString += `\\n${indent}],\\n`;\r\n            } else {\r\n                configString += this.getCommentByKey(key, indent);\r\n                configString += `${indent}${key}: ${JSON.stringify(value)},\\n`;\r\n            }\r\n        }\r\n\r\n        return configString;\r\n    }\r\n\r\n    map = new Map([\r\n        ['config_files', 'App specific configuration files. This could be something like project_name.json'],\r\n        ['repository_url', 'Url to the repository, code-narrator tries to extract this from project file'],\r\n        ['builderPlugins', 'These are the plugins used when building documentation. You can create your own plugin. Checkout the code-narrator docs HowTo create a builder plugin'],\r\n        ['gptSystemCommands', 'These are system commends send to GPT with every query'],\r\n        ['readmeRoot', 'Indicates if the documentation should create a README file in root of project'],\r\n        ['builders', 'Array of user defined documentations. See code-narrator How to create a user defined builder']\r\n    ])\r\n    private getCommentByKey(key: string, indent: string) {\r\n        let value = this.map.get(key);\r\n        if (!value) return '';\r\n        return `${indent}// ${value}\\n`;\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\ConfigFileSerializer.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "ConfigQuestion.ts",
		"path": "src\\config\\ConfigQuestion.ts",
		"folderPath": "src\\config",
		"fileContent": "import FolderStructure from \"../utils/FolderStructure\";\r\nimport process from \"process\";\r\nimport OpenAIService from \"../services/OpenAIService\";\r\nimport Helper from \"../utils/Helper\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport ConfigHelper from \"./ConfigHelper\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default class ConfigQuestion {\r\n    aiService : IGenericAIService;\r\n    constructor() {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n    }\r\n    public async getProjectSetup() {\r\n        let foldersAndFiles = FolderStructure.getFoldersAndFiles(process.cwd()).join('\\n');\r\n\r\n        let question = `From the folder & file structure define for the project file, source path (where code is located), documentation folder path, test folder path. \r\n        DO NOT makeup value for JSON property \r\n        Return JSON scheme\r\n        {\r\n        project_file: string,\r\n        source_path: string,\r\n        documentation_path: string\r\n        test_path: string\r\n        }\r\n        Folders structure and files in root folder are\r\n        ###\r\n        ${foldersAndFiles}\r\n        ###\r\n        `\r\n\r\n        let response = await this.aiService.query([question]);\r\n        let jsons = Helper.getJsons(response.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error('Could not determine the project. You should set the config when calling ConfigHelper.load')\r\n        }\r\n\r\n        return jsons[0];\r\n    }\r\n\r\n    public async getProjectDetails(config : ICodeNarratorConfig) {\r\n        let foldersAndFiles = FolderStructure.getFoldersAndFiles(process.cwd()).join('\\n');\r\n        let projectFile = FileStructure.getContent(config.project_file)\r\n        let projectDetailQuestion = `Following is the project file (${config.project_file}). \r\nFrom the file determine the project name, entry file, cli file, repository url.\r\n\r\n        ### project file starts ###\r\n        ${projectFile}\r\n        ### project file ends ###       \r\n         \r\nFrom project name, try to identify app-specific config files from the file list.\r\nThis does NOT include project config files(e.g. package.json), environment files or configs for dependencies. \r\nThe app-specific config file should be something like project_name.config, project_name.json, project_name.xml. \r\nDO NOT makeup value for JSON property, set the value as empty if you cannot determine it\r\n           \r\n        ### folders and files starts ###\r\n        ${foldersAndFiles}\r\n        ### folders and files ends ###\r\n        \r\n        Return json \r\n        {\r\n        project_name: string,\r\n        entry_file: string,\r\n        cli_file: string,\r\n        config_files: string[]\r\n        repository_url : string\r\n        }\r\n        `\r\n        let projectDetailAnswer = await this.aiService.query([projectDetailQuestion]);\r\n\r\n        let jsons = Helper.getJsons(projectDetailAnswer.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error(`Could not get project info. GPT answer:\r\n            ${projectDetailAnswer.answer}`)\r\n        }\r\n        return jsons[0];\r\n    }\r\n}",
		"documentation": "# ConfigQuestion.ts\n\nThis is a TypeScript code file that defines a `ConfigQuestion` class. The class is responsible for retrieving project setup and project details using AI services. It uses various utility classes and interfaces to achieve this.\n\n## Table of Contents\n\n- [Class: ConfigQuestion](#class-configquestion)\n  - [Constructor](#constructor)\n  - [Methods](#methods)\n    - [getProjectSetup](#getprojectsetup)\n    - [getProjectDetails](#getprojectdetails)\n- [Examples](#examples)\n\n## Class: ConfigQuestion\n\nThe `ConfigQuestion` class is responsible for retrieving project setup and project details using AI services.\n\n### Constructor\n\nThe constructor initializes the `aiService` property with the AI service configured in `ConfigHelper`.\n\n```typescript\nconstructor() {\n    this.aiService = ConfigHelper.config.aiService;\n}\n```\n\n### Methods\n\n#### getProjectSetup\n\nThis method retrieves the project setup by analyzing the folder and file structure of the project. It returns a JSON object containing the project file, source path, documentation path, and test path.\n\n```typescript\npublic async getProjectSetup(): Promise<any>\n```\n\n#### getProjectDetails\n\nThis method retrieves the project details by analyzing the project file and folder structure. It takes an `ICodeNarratorConfig` object as a parameter and returns a JSON object containing the project name, entry file, CLI file, config files, and repository URL.\n\n```typescript\npublic async getProjectDetails(config: ICodeNarratorConfig): Promise<any>\n```\n\n##### Parameters\n\n- `config` (ICodeNarratorConfig): The configuration object for the Code Narrator.\n\n### Examples\n\nHere's an example of how to use the `ConfigQuestion` class:\n\n```typescript\nimport ConfigQuestion from \"./ConfigQuestion\";\nimport ConfigHelper from \"./ConfigHelper\";\n\n(async () => {\n  // Load the configuration\n  ConfigHelper.load();\n\n  // Create a new instance of ConfigQuestion\n  const configQuestion = new ConfigQuestion();\n\n  // Get the project setup\n  const projectSetup = await configQuestion.getProjectSetup();\n  console.log(\"Project Setup:\", projectSetup);\n\n  // Get the project details\n  const projectDetails = await configQuestion.getProjectDetails(ConfigHelper.config);\n  console.log(\"Project Details:\", projectDetails);\n})();\n```\n\nThis example demonstrates how to use the `ConfigQuestion` class to retrieve the project setup and project details using AI services.",
		"isFolder": false,
		"updated": "2023-04-29T15:17:58.210Z",
		"sidebar_position": 3,
		"sidebar_label": "ConfigQuestion.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\config",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"ConfigQuestion.ts\"\r\nThe file name is: ConfigQuestion.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport FolderStructure from \"../utils/FolderStructure\";\r\nimport process from \"process\";\r\nimport OpenAIService from \"../services/OpenAIService\";\r\nimport Helper from \"../utils/Helper\";\r\nimport FileStructure from \"../utils/FileStructure\";\r\nimport ICodeNarratorConfig from \"./ICodeNarratorConfig\";\r\nimport ConfigHelper from \"./ConfigHelper\";\r\nimport IGenericAIService from \"../services/IGenericAIService\";\r\n\r\nexport default class ConfigQuestion {\r\n    aiService : IGenericAIService;\r\n    constructor() {\r\n        this.aiService = ConfigHelper.config.aiService;\r\n    }\r\n    public async getProjectSetup() {\r\n        let foldersAndFiles = FolderStructure.getFoldersAndFiles(process.cwd()).join('\\n');\r\n\r\n        let question = `From the folder & file structure define for the project file, source path (where code is located), documentation folder path, test folder path. \r\n        DO NOT makeup value for JSON property \r\n        Return JSON scheme\r\n        {\r\n        project_file: string,\r\n        source_path: string,\r\n        documentation_path: string\r\n        test_path: string\r\n        }\r\n        Folders structure and files in root folder are\r\n        ###\r\n        ${foldersAndFiles}\r\n        ###\r\n        `\r\n\r\n        let response = await this.aiService.query([question]);\r\n        let jsons = Helper.getJsons(response.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error('Could not determine the project. You should set the config when calling ConfigHelper.load')\r\n        }\r\n\r\n        return jsons[0];\r\n    }\r\n\r\n    public async getProjectDetails(config : ICodeNarratorConfig) {\r\n        let foldersAndFiles = FolderStructure.getFoldersAndFiles(process.cwd()).join('\\n');\r\n        let projectFile = FileStructure.getContent(config.project_file)\r\n        let projectDetailQuestion = `Following is the project file (${config.project_file}). \r\nFrom the file determine the project name, entry file, cli file, repository url.\r\n\r\n        ### project file starts ###\r\n        ${projectFile}\r\n        ### project file ends ###       \r\n         \r\nFrom project name, try to identify app-specific config files from the file list.\r\nThis does NOT include project config files(e.g. package.json), environment files or configs for dependencies. \r\nThe app-specific config file should be something like project_name.config, project_name.json, project_name.xml. \r\nDO NOT makeup value for JSON property, set the value as empty if you cannot determine it\r\n           \r\n        ### folders and files starts ###\r\n        ${foldersAndFiles}\r\n        ### folders and files ends ###\r\n        \r\n        Return json \r\n        {\r\n        project_name: string,\r\n        entry_file: string,\r\n        cli_file: string,\r\n        config_files: string[]\r\n        repository_url : string\r\n        }\r\n        `\r\n        let projectDetailAnswer = await this.aiService.query([projectDetailQuestion]);\r\n\r\n        let jsons = Helper.getJsons(projectDetailAnswer.answer);\r\n        if (jsons.length == 0) {\r\n            throw new Error(`Could not get project info. GPT answer:\r\n            ${projectDetailAnswer.answer}`)\r\n        }\r\n        return jsons[0];\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\config\\ConfigQuestion.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "config"
		}
	},
	{
		"name": "README",
		"path": "howto\\overview_readme.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# Overview of Files in the Directory\n\n## 1. How to Create a HowTo Section\nThis guide will walk you through the process of adding a HowTo section in the config file for a software project. The HowTo section will help developers understand how to use specific features and functionalities of the software.\n\n## 2. Editing Long Content in Code Narrator\nWhen using Code Narrator, you may encounter a situation where the content is too long, and the generated documentation is not satisfactory. In such cases, you can manually edit the content to improve the documentation. This guide will walk you through the process of editing long content in Code Narrator using ChatGPT.\n\n## 3. Creating a Custom Builder\nThis guide will walk you through the process of creating a custom builder using the config file in a project that uses the Code Narrator documentation system. We will assume that you have already set up your project and have a `code-narrator.config.js` file in your root folder. The system uses the Liquid template engine for template files, and you must add a template file to the `.code-narrator/gpt_questions` directory.\n\n## 4. Running Code-Narrator CLI\nCode-Narrator is a powerful tool that helps you generate documentation for your software projects. This guide will walk you through the process of installing Code-Narrator, running it for the first time, and configuring it to suit your needs.",
		"isFolder": false,
		"updated": "2023-04-24T19:20:17.782Z",
		"sidebar_position": 11,
		"sidebar_label": "README",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Create a title and summary overview of files in this directory howto"
			},
			{
				"role": "assistant",
				"content": "\n### 1st paragraph of \"How to create HowTo\" ###\nThis guide will walk you through the process of adding a HowTo section in the config file for a software project. The HowTo section will help developers understand how to use specific features and functionalities of the software.\n### file ends ###\n                         \n### 1st paragraph of \"Content to long\" ###\nWhen using Code Narrator, you may encounter a situation where the content is too long, and the generated documentation is not satisfactory. In such cases, you can manually edit the content to improve the documentation. This guide will walk you through the process of editing long content in Code Narrator using ChatGPT.\n### file ends ###\n                         \n### 1st paragraph of \"Create your own custom builder\" ###\nThis guide will walk you through the process of creating a custom builder using the config file in a project that uses the Code Narrator documentation system. We will assume that you have already set up your project and have a `code-narrator.config.js` file in your root folder. The system uses the Liquid template engine for template files, and you must add a template file to the `.code-narrator/gpt_questions` directory.\n### file ends ###\n                         \n### 1st paragraph of \"HowTo run CLI\" ###\nCode-Narrator is a powerful tool that helps you generate documentation for your software projects. This guide will walk you through the process of installing Code-Narrator, running it for the first time, and configuring it to suit your needs.\n### file ends ###\n                         "
			}
		],
		"id": "howto\\overview_readme.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "HowTo run CLI",
		"path": "howto\\howto_run_cli.md",
		"folderPath": "howto",
		"fileContent": "",
		"documentation": "# How to Install and Use Code-Narrator\n\n## Introduction\n\nCode-Narrator is a powerful tool that helps you generate documentation for your software projects. This guide will walk you through the process of installing Code-Narrator, running it for the first time, and configuring it to suit your needs.\n\n## Step-by-Step Instructions\n\n### Step 1: Install Code-Narrator\n\nTo install Code-Narrator, run the following command in your terminal:\n\n```\nnpm install code-narrator -D\n```\n\n### Step 2: Run Code-Narrator\n\nTo run Code-Narrator, execute the following command:\n\n```\nnpx code-narrator\n```\n\n### Step 3: Review the Configuration\n\nUpon running Code-Narrator for the first time, a configuration file will be created. Make sure to review and modify the configuration before generating documentation. You can find the documentation for the configuration file at the following link:\n\n[Code-Narrator Configuration Documentation](https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md)\n\n### Step 4: Customize the Configuration (Optional)\n\nYou can customize the configuration by providing specific arguments when running Code-Narrator. Here are some available arguments:\n\n- `-c` or `--config`: Path to the configuration file (JSON or JavaScript)\n- `-i` or `--include`: Only include specific files or folders in the documentation process\n- `-g` or `--gpt`: GPT model. Default is `gpt-4`. If you do not have access, the next best option is `gpt-3.5-turbo`, but it is not as good.\n\nFor example, to run Code-Narrator with a custom configuration file and include only specific files or folders, use the following command:\n\n```\nnpx code-narrator -c path/to/config.js -i file1.js folder1\n```\n\n## Conclusion\n\nBy following these steps, you should now have a working installation of Code-Narrator and be able to generate documentation for your software projects. Remember to review and customize the configuration file to ensure the best results for your specific needs.",
		"isFolder": false,
		"updated": "2023-04-24T14:14:29.589Z",
		"sidebar_position": 14,
		"sidebar_label": "HowTo run CLI",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "howto",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "install code-narrator, npm code-narrator -D\r\nhow to run, npx code-narrator\r\nconfiguration is created on first run, make sure to read over it before generating documentation, documentation for configuration can be found at https://github.com/ingig/code-narrator/blob/master/docs/Configuration/code-narrator.config.js.md\r\narguments are available on run"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed How To guide from the user input.\n            It should have Title, Introduction, Step-by-Step Instructions"
			},
			{
				"role": "assistant",
				"content": "Content to help:\n{\"arguments\":[{\"name\":\"c\",\"type\":\"string\",\"description\":\"Path to configuration file (JSON or JavaScript)\",\"alias\":\"config\",\"demandOption\":false},{\"name\":\"i\",\"type\":\"array\",\"description\":\"Only include specific files or folders in the documentation process\",\"alias\":\"include\"},{\"name\":\"g\",\"type\":\"string\",\"description\":\"GPT model. Default is gpt-4, if you do not have access, next best is gpt-3.5-turbo, but it isn't not so good\",\"alias\":\"gpt\"}]}\n"
			}
		],
		"id": "howto\\howto_run_cli.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "README"
		}
	},
	{
		"name": "Tutorial - Create builder plugin",
		"path": "tutorial\\tutorial_create_builder_plugin.md",
		"folderPath": "tutorial",
		"fileContent": "",
		"documentation": "# Creating a Custom Builder Plugin: MyBuilder\n\nThis tutorial will guide you through the process of creating your own builder plugin called `MyBuilder`. By following these steps, you will learn how to extend the base class, implement necessary functions, and configure the plugin.\n\n## Target Audience\n\nThis tutorial is intended for developers who are familiar with JavaScript/TypeScript and have experience working with plugins.\n\n## Learning Objectives\n\nBy the end of this tutorial, you will be able to:\n\n1. Extend the base class for creating a custom builder plugin.\n2. Implement required functions for the plugin.\n3. Configure the plugin in the `code-narrator.config.js` file.\n\n## Prerequisites\n\n- Basic knowledge of JavaScript/TypeScript\n- Familiarity with plugins and their configuration\n\n## Step-by-Step Instructions\n\n### Step 1: Create a new file for MyBuilder\n\nCreate a new file called `MyBuilder.ts` in a directory of your choice.\n\n### Step 2: Extend the BaseBuilder class\n\nIn `MyBuilder.ts`, import the `BaseBuilder` class and extend it to create your custom builder plugin:\n\n```typescript\nimport BaseBuilder from \"../BaseBuilder\";\n\nexport default class MyBuilder extends BaseBuilder {\n  // Your custom implementation goes here\n}\n```\n\n### Step 3: Implement the generate function\n\nImplement the `generate` function in the `MyBuilder` class. This function will be responsible for generating the documentation.\n\n```typescript\npublic async generate() {\n  // Your custom implementation goes here\n}\n```\n\n### Step 4: Call retrieve document cache and generateDocumentationAndCache\n\nIn the `generate` function, call `retrieveDocumentCache` and `generateDocumentationAndCache` with the required arguments:\n\n```typescript\nimport DocumentationCache from \"../../../DocumentationCache\";\n\npublic async generate() {\n  // Retrieve the document cache\n  const document = DocumentationCache.get(\"your_file_path\");\n\n  // Generate documentation and cache\n  await super.generateDocumentationAndCache({\n    args: { /* your arguments */ },\n    name: \"your_name\",\n    pathToFile: \"your_file_path\",\n    folderPath: \"your_folder_path\",\n    sidebarPosition: 0,\n    sidebarLabel: \"your_label\",\n    assistantMessages: [],\n    data: { /* your data */ },\n    prevDocument: document,\n  });\n}\n```\n\nReplace the placeholders with the appropriate values for your use case.\n\n### Step 5: Add MyBuilder to the code-narrator.config.js file\n\nIn the `code-narrator.config.js` file, import your `MyBuilder` plugin and add it to the `builderPlugins` array:\n\n```javascript\nimport MyBuilder from \"./path/to/MyBuilder\";\n\nexport default {\n  // Other configurations...\n  builderPlugins: [\n    \"ConfigurationBuilder\",\n    \"FilesBuilder\",\n    \"FoldersBuilder\",\n    \"UserDefinedBuilder\",\n    MyBuilder, // Add your custom builder plugin here\n  ],\n};\n```\n\nMake sure to replace `./path/to/MyBuilder` with the actual path to your `MyBuilder.ts` file.\n\n## Conclusion\n\nCongratulations! You have successfully created a custom builder plugin called `MyBuilder`. By following these steps, you have learned how to extend the base class, implement necessary functions, and configure the plugin in the `code-narrator.config.js` file.",
		"isFolder": false,
		"updated": "2023-04-24T20:50:23.163Z",
		"sidebar_position": 12,
		"sidebar_label": "Tutorial - Create builder plugin",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "tutorial",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Use FilesBuilder as template to help you create the tutorial, DO NOT mention FilesBuilder\r\nGive user information how to build its own builder plugin called MyBuilder\r\nWhat class needs to be extended, what function need to be implemented\r\nPlugin can be located in any directory of users choice\r\nGive example how to call retrieve document cache and generateDocumentationAndCache with arguments in generate function\r\nShow how to add plugin to code-narrator.config.js builderPlugins and it needs to be imported\r\n\r\n"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed Tutorial from the user input.\n            Define the target audience, Set clear learning objectives,Provide a brief introduction,Prerequisites and system requirements,Step-by-step instructions,Include code samples"
			},
			{
				"role": "assistant",
				"content": "File Content for src/documentation/plugins/builders/Files/FilesBuilder.ts\nimport Document from \"../../../Document\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport BaseBuilder from \"../BaseBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ProjectStructure from \"../../../../utils/ProjectStructure\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport Ignore from \"ignore\";\r\n\r\n\r\nexport default class FilesBuilder extends BaseBuilder {\r\n\r\n\r\n    constructor() {\r\n        super('Files');\r\n    }\r\n\r\n\r\n    public async generate() {\r\n        let structure = new ProjectStructure();\r\n        let folder = await structure.getStructure();\r\n        await this.queryForFolder(folder);\r\n    }\r\n\r\n\r\n\r\n    public async queryForFolder(folder: FolderStructure) {\r\n        this.cleanDeletedFilesFromCache(folder);\r\n\r\n        let files = folder.files;\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            let file = files[i];\r\n            if (!this.shouldDocument(file)) {\r\n                continue;\r\n            }\r\n\r\n            let document = DocumentationCache.get(file.path)\r\n            if (document && document.generator != \"Files\") continue;\r\n            if (!this.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            let fileName = file.name;\r\n            let fileContent = FileStructure.getContent(file.path);\r\n\r\n            let assistantMessages = [];\r\n            let regex = /ref:\\s*([A-Z0-9a-z\\.\\/]*)/gm;\r\n            let match;\r\n            while ((match = regex.exec(fileContent)) !== null) {\r\n                let content = FileStructure.getContent(match[1]);\r\n                let assistantFiles = 'These files might help with documentation.'\r\n                if (content != '') {\r\n                    assistantFiles += `\r\n                    ## ${match[1]} start ##\r\n                    ${content}\r\n                    ## ${match[1]} ends ##`\r\n                }\r\n                assistantMessages.push(assistantFiles)\r\n            }\r\n\r\n            let args = {fileName, fileContent}\r\n\r\n            await super.generateDocumentationAndCache({\r\n                args: args,\r\n                name: fileName,\r\n                pathToFile: file.path,\r\n                folderPath: folder.path,\r\n                sidebarPosition: i,\r\n                sidebarLabel: fileName,\r\n                assistantMessages:assistantMessages,\r\n                data : {parent:folder.name},\r\n                prevDocument : document\r\n            })\r\n        }\r\n\r\n        for (let i = 0; i < folder.folders.length; i++) {\r\n            await this.queryForFolder(folder.folders[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private cleanDeletedFilesFromCache(folder: FolderStructure) {\r\n        let cachedFiles = DocumentationCache.getByFolderPath(folder.path);\r\n        for (let i=0;i<cachedFiles.length;i++) {\r\n            if (cachedFiles[i].isFolder && cachedFiles[i].generator != \"Files\") continue;\r\n\r\n            let fileExists = false;\r\n            for (let b=0;b<folder.files.length;b++) {\r\n                if (cachedFiles[i].path == folder.files[b].path) {\r\n                    b = folder.files.length;\r\n                    fileExists = true;\r\n                }\r\n            }\r\n            if (!fileExists) {\r\n                //console.warn(`Remove file ${cachedFiles[i].path} from cache`)\r\n                //DocumentationCache.remove(cachedFiles[i]);\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n    private shouldDocument(file: FileStructure) {\r\n        if (!this.config.include) return true;\r\n\r\n        const ignore = Ignore();\r\n        const includePatterns = ConfigHelper.config.include\r\n        ignore.add(includePatterns);\r\n        return ignore.ignores(file.path);\r\n    }\r\n}"
			},
			{
				"role": "assistant",
				"content": "Content to help:\n{\"builderPlugins\":[\"ConfigurationBuilder\",\"FilesBuilder\",\"FoldersBuilder\",\"UserDefinedBuilder\"]}\n"
			}
		],
		"id": "tutorial\\tutorial_create_builder_plugin.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "README"
		}
	},
	{
		"name": "Tutorial - Create generator plugin",
		"path": "tutorial\\tutorial_create_generator_plugin.md",
		"folderPath": "tutorial",
		"fileContent": "",
		"documentation": "# Introduction\n\nIn this tutorial, we will guide you through the process of creating your own generator plugin called `MyGenerator`. This plugin will help you customize the way your documentation is generated.\n\n# Setup\n\nBefore we begin, make sure you have a project set up with the necessary dependencies. You can use any directory of your choice for the plugin.\n\n# Code Examples\n\n1. First, create a new file called `MyGenerator.ts` in your desired directory.\n\n2. To create your custom generator plugin, you need to extend the `BaseGenerator` class and implement the `process` function. Here's a basic example:\n\n```typescript\nimport BaseGenerator from \"./BaseGenerator\";\nimport Document from '../../Document';\n\nexport default class MyGenerator extends BaseGenerator {\n    public process(document: Document) {\n        // Your custom processing logic goes here\n        return document;\n    }\n}\n```\n\n3. In the `process` function, you can add your custom logic to modify the `document` object as needed.\n\n4. Now, you need to add your custom generator plugin to the `code-narrator.config.js` file. First, import your `MyGenerator` class at the top of the file:\n\n```javascript\nimport MyGenerator from './path/to/MyGenerator';\n```\n\n5. Next, add the `MyGenerator` class to the `generatorPlugins` array in the `code-narrator.config.js` file:\n\n```javascript\nexport default {\n    // ...\n    generatorPlugins: [\n        // ...\n        new MyGenerator(),\n    ],\n    // ...\n};\n```\n\nThat's it! You have now successfully created and added your custom generator plugin called `MyGenerator`. This plugin will be used to process your documentation according to your custom logic.",
		"isFolder": false,
		"updated": "2023-04-24T20:41:49.124Z",
		"sidebar_position": 13,
		"sidebar_label": "Tutorial - Create generator plugin",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "tutorial",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Use JekyllGenerator as template to help you create a tutorial. DO NOT mention JekyllGenerator.\r\nGive user information how to build its own generator plugin called MyGenerator\r\nWhat class needs to be extended, what function need to be implemented\r\nPlugin can be located in any directory of users choice\r\nShow how to add plugin as class name to code-narrator.config.js generatorPlugins and it needs to be imported"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed Tutorial from the user input.\n            It should have Intro, Setup, Code Examples"
			},
			{
				"role": "assistant",
				"content": "File Content for src/documentation/plugins/generators/JekyllGenerator.ts\nimport BaseGenerator from \"./BaseGenerator\";\r\nimport Document from '../../Document'\r\nimport path from \"path\";\r\nimport ConfigHelper from \"../../../config/ConfigHelper\";\r\nimport DocumentationCache from \"../../DocumentationCache\";\r\n\r\nexport default class JekyllGenerator extends BaseGenerator {\r\n\r\n    public process(document: Document) {\r\n\r\n        let sidebar_label = (document.sidebar_label) ? document.sidebar_label : document.name;\r\n        let position = document.sidebar_position ?? 1;\r\n        let parent = '';\r\n        let has_children = '';\r\n        if (document.name != 'README') {\r\n            let parentName = (document.data && document.data.parent) ? document.data.parent : ''\r\n            if (parentName == '') {\r\n                let folderDocument = DocumentationCache.getFolderByFolderPath(document.folderPath);\r\n\r\n                if (folderDocument) {\r\n                    parentName = folderDocument.path\r\n                }\r\n            }\r\n            if (parentName != '') {\r\n                parent = `parent: ${parentName}`\r\n            }\r\n        } else if (document.name == 'README' && document.folderPath != '') {\r\n            has_children = 'has_children: true'\r\n        }\r\n\r\n        if (document.data && document.data.has_children) {\r\n            has_children = 'has_children: true';\r\n        }\r\n        let permalink = '';\r\n        if (document.isFolder && document.folderPath != '') {\r\n            let fileName = `${ConfigHelper.config.folderRootFileName}${ConfigHelper.config.document_file_extension}`\r\n            permalink = `permalink: ${document.folderPath.replaceAll('\\\\', '/')}/${fileName}`\r\n        } else if (!document.isFolder && document.folderPath != '') {\r\n            permalink = `permalink: ${document.path.replaceAll('\\\\', '/')}${ConfigHelper.config.document_file_extension}`\r\n        }\r\n        document.documentation = `---\r\nnav_order: ${position}\r\ntitle: ${sidebar_label}\r\n${parent}\r\n${has_children}\r\n${permalink}\r\n---\r\n\r\n` + document.documentation;\r\n        return document;\r\n    }\r\n\r\n}"
			}
		],
		"id": "tutorial\\tutorial_create_generator_plugin.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "README"
		}
	},
	{
		"name": "README",
		"path": "tutorial\\overview_readme.md",
		"folderPath": "tutorial",
		"fileContent": "",
		"documentation": "# Files in the Directory Tutorial\n\n## Overview\n\nThis directory contains tutorials on creating custom plugins for Jekyll. The tutorials cover the following topics:\n\n1. [Create Builder Plugin](#create-builder-plugin)\n2. [Create Generator Plugin](#create-generator-plugin)\n\n### Create Builder Plugin\n\nIn this tutorial, we will guide you through the process of creating your own builder plugin called `MyBuilder`. We will use the `FilesBuilder` as a template to help you understand the necessary steps and components.\n\n[Read the full tutorial](./create-builder-plugin.md)\n\n### Create Generator Plugin\n\nIn this tutorial, we will guide you through the process of creating your own generator plugin called `MyGenerator` for Jekyll. We will be using the `JekyllGenerator` as a template.\n\n[Read the full tutorial](./create-generator-plugin.md)",
		"isFolder": false,
		"updated": "2023-04-24T19:47:06.787Z",
		"sidebar_position": 11,
		"sidebar_label": "README",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "tutorial",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Create a title and summary overview of files in this directory tutorial"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detail README file for this project. Here is a description:"
			},
			{
				"role": "assistant",
				"content": "\n### 1st paragraph of \"Create builder plugin\" ###\nIn this tutorial, we will guide you through the process of creating your own builder plugin called `MyBuilder`. We will use the `FilesBuilder` as a template to help you understand the necessary steps and components.\n### file ends ###\n                         \n### 1st paragraph of \"Create generator plugin\" ###\nIn this tutorial, we will guide you through the process of creating your own generator plugin called `MyGenerator` for Jekyll. We will be using the `JekyllGenerator` as a template.\n### file ends ###\n                         "
			}
		],
		"id": "tutorial\\overview_readme.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "GenerateAppConfigFiles.ts",
		"path": "src\\documentation\\plugins\\builders\\Configuration\\GenerateAppConfigFiles.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "import DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\r\n\r\nexport default class GenerateAppConfigFiles {\r\n    configurationBuilder : ConfigurationBuilder;\r\n    constructor(configurationBuilder : ConfigurationBuilder) {\r\n        this.configurationBuilder = configurationBuilder;\r\n    }\r\n    public async generateAppConfigFiles() {\r\n        for (let i = 0; i < this.configurationBuilder.appSpecificConfigFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.configurationBuilder.appSpecificConfigFiles[i])\r\n            if (!this.configurationBuilder.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.configurationBuilder.updateSummary = true;\r\n            let content = FileStructure.getContent(this.configurationBuilder.appSpecificConfigFiles[i])\r\n            if (content == '') continue;\r\n\r\n            let data : any = {\r\n                parent : 'Configuration'\r\n            }\r\n            let args = {configFile: content, fileName: this.configurationBuilder.appSpecificConfigFiles[i]}\r\n            await this.configurationBuilder.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'app_config',\r\n                    name: this.configurationBuilder.appSpecificConfigFiles[i],\r\n                    pathToFile: './' + this.configurationBuilder.appSpecificConfigFiles[i],\r\n                    folderPath: './',\r\n                    sidebarPosition: i,\r\n                    saveToPath: './Configuration/',\r\n                    data : data,\r\n                    prevDocument : document\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n}",
		"documentation": "# GenerateAppConfigFiles.ts\n\nThis TypeScript file defines the `GenerateAppConfigFiles` class, which is responsible for generating application configuration files based on the provided `ConfigurationBuilder` instance. The class reads the configuration files, checks if they have changed, and generates the corresponding documentation and cache.\n\n## Table of Contents\n\n- [Class: GenerateAppConfigFiles](#class-generateappconfigfiles)\n  - [Constructor](#constructor)\n  - [Method: generateAppConfigFiles](#method-generateappconfigfiles)\n\n## Class: GenerateAppConfigFiles\n\n### Constructor\n\nThe constructor takes a single parameter:\n\n- `configurationBuilder: ConfigurationBuilder`: An instance of the `ConfigurationBuilder` class, which is used to manage the application configuration files.\n\n### Method: generateAppConfigFiles\n\nThis method is responsible for generating the application configuration files. It does not take any parameters and returns a Promise.\n\nThe method performs the following steps:\n\n1. Iterate through the `appSpecificConfigFiles` array in the `ConfigurationBuilder` instance.\n2. For each configuration file, get the corresponding document from the `DocumentationCache`.\n3. Check if the document has changed using the `hasChanged` method of the `ConfigurationBuilder` instance. If not, continue to the next configuration file.\n4. Set the `updateSummary` property of the `ConfigurationBuilder` instance to `true`.\n5. Get the content of the configuration file using the `FileStructure.getContent` method.\n6. If the content is empty, continue to the next configuration file.\n7. Define the `data` object with a `parent` property set to `'Configuration'`.\n8. Define the `args` object with the `configFile` and `fileName` properties.\n9. Call the `generateDocumentationAndCache` method of the `ConfigurationBuilder` instance with the necessary parameters.\n\nExample usage:\n\n```typescript\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\nimport GenerateAppConfigFiles from \"./GenerateAppConfigFiles\";\n\nconst configurationBuilder = new ConfigurationBuilder();\nconst generateAppConfigFiles = new GenerateAppConfigFiles(configurationBuilder);\n\ngenerateAppConfigFiles.generateAppConfigFiles().then(() => {\n  console.log(\"App configuration files generated successfully.\");\n});\n```\n\n## Technical Concepts\n\n- **DocumentationCache**: A cache that stores the documentation data for each configuration file.\n- **FileStructure**: A utility class that provides methods for working with file structures, such as reading file content.\n- **ConfigurationBuilder**: A class that manages the application configuration files and provides methods for generating documentation and cache.",
		"isFolder": false,
		"updated": "2023-04-24T20:01:48.148Z",
		"sidebar_position": 1,
		"sidebar_label": "GenerateAppConfigFiles.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"GenerateAppConfigFiles.ts\"\r\nThe file name is: GenerateAppConfigFiles.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\r\n\r\nexport default class GenerateAppConfigFiles {\r\n    configurationBuilder : ConfigurationBuilder;\r\n    constructor(configurationBuilder : ConfigurationBuilder) {\r\n        this.configurationBuilder = configurationBuilder;\r\n    }\r\n    public async generateAppConfigFiles() {\r\n        for (let i = 0; i < this.configurationBuilder.appSpecificConfigFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.configurationBuilder.appSpecificConfigFiles[i])\r\n            if (!this.configurationBuilder.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.configurationBuilder.updateSummary = true;\r\n            let content = FileStructure.getContent(this.configurationBuilder.appSpecificConfigFiles[i])\r\n            if (content == '') continue;\r\n\r\n            let data : any = {\r\n                parent : 'Configuration'\r\n            }\r\n            let args = {configFile: content, fileName: this.configurationBuilder.appSpecificConfigFiles[i]}\r\n            await this.configurationBuilder.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'app_config',\r\n                    name: this.configurationBuilder.appSpecificConfigFiles[i],\r\n                    pathToFile: './' + this.configurationBuilder.appSpecificConfigFiles[i],\r\n                    folderPath: './',\r\n                    sidebarPosition: i,\r\n                    saveToPath: './Configuration/',\r\n                    data : data,\r\n                    prevDocument : document\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration\\GenerateAppConfigFiles.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "GenerateGeneralConfigFiles.ts",
		"path": "src\\documentation\\plugins\\builders\\Configuration\\GenerateGeneralConfigFiles.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "import ConfigurationBuilder from \"./ConfigurationBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\n\r\nexport default class GenerateGeneralConfigFiles {\r\n    configurationBuilder : ConfigurationBuilder;\r\n    constructor(configurationBuilder : ConfigurationBuilder) {\r\n        this.configurationBuilder = configurationBuilder;\r\n    }\r\n\r\n\r\n    public async generateGeneralConfigFiles() {\r\n        for (let i = 0; i < this.configurationBuilder.configFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.configurationBuilder.configFiles[i])\r\n            if (!this.configurationBuilder.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.configurationBuilder.updateSummary = true;\r\n            let content = FileStructure.getContent(this.configurationBuilder.configFiles[i])\r\n            let args = {configFile: content}\r\n            await this.configurationBuilder.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'general_config',\r\n                    name: this.configurationBuilder.configFiles[i], pathToFile: './' + this.configurationBuilder.configFiles[i], folderPath: './', sidebarPosition: i,\r\n                    saveToPath: './Configuration/'\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n}",
		"documentation": "# GenerateGeneralConfigFiles.ts\n\nThis TypeScript file contains the `GenerateGeneralConfigFiles` class, which is responsible for generating general configuration files using the `ConfigurationBuilder` class. It also utilizes the `DocumentationCache` and `FileStructure` utilities.\n\n## Table of Contents\n\n- [Class: GenerateGeneralConfigFiles](#class-generategeneralconfigfiles)\n  - [Constructor](#constructor)\n  - [Method: generateGeneralConfigFiles](#method-generategeneralconfigfiles)\n- [Examples](#examples)\n\n## Class: GenerateGeneralConfigFiles\n\n### Constructor\n\nThe constructor takes a single parameter:\n\n- `configurationBuilder: ConfigurationBuilder`: An instance of the `ConfigurationBuilder` class.\n\n### Method: generateGeneralConfigFiles\n\nThis asynchronous method generates general configuration files based on the provided `ConfigurationBuilder` instance. It does not take any parameters and does not return any value.\n\nThe method performs the following steps:\n\n1. Iterate through the `configFiles` array in the `ConfigurationBuilder` instance.\n2. Retrieve the documentation from the `DocumentationCache` using the current config file.\n3. Check if the documentation has changed. If not, continue to the next iteration.\n4. Set the `updateSummary` property of the `ConfigurationBuilder` instance to `true`.\n5. Get the content of the current config file using the `FileStructure` utility.\n6. Create an `args` object with the `configFile` property set to the content.\n7. Call the `generateDocumentationAndCache` method of the `ConfigurationBuilder` instance with the appropriate parameters.\n\n## Examples\n\nHere's an example of how to use the `GenerateGeneralConfigFiles` class:\n\n```typescript\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\nimport GenerateGeneralConfigFiles from \"./GenerateGeneralConfigFiles\";\n\nconst configurationBuilder = new ConfigurationBuilder();\nconst generateGeneralConfigFiles = new GenerateGeneralConfigFiles(configurationBuilder);\n\n(async () => {\n  await generateGeneralConfigFiles.generateGeneralConfigFiles();\n})();\n```\n\nThis example demonstrates how to create an instance of the `GenerateGeneralConfigFiles` class and call its `generateGeneralConfigFiles` method to generate general configuration files.",
		"isFolder": false,
		"updated": "2023-04-24T20:03:08.957Z",
		"sidebar_position": 2,
		"sidebar_label": "GenerateGeneralConfigFiles.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"GenerateGeneralConfigFiles.ts\"\r\nThe file name is: GenerateGeneralConfigFiles.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport FileStructure from \"../../../../utils/FileStructure\";\r\n\r\nexport default class GenerateGeneralConfigFiles {\r\n    configurationBuilder : ConfigurationBuilder;\r\n    constructor(configurationBuilder : ConfigurationBuilder) {\r\n        this.configurationBuilder = configurationBuilder;\r\n    }\r\n\r\n\r\n    public async generateGeneralConfigFiles() {\r\n        for (let i = 0; i < this.configurationBuilder.configFiles.length; i++) {\r\n            let document = DocumentationCache.get(this.configurationBuilder.configFiles[i])\r\n            if (!this.configurationBuilder.hasChanged(document)) {\r\n                continue;\r\n            }\r\n            this.configurationBuilder.updateSummary = true;\r\n            let content = FileStructure.getContent(this.configurationBuilder.configFiles[i])\r\n            let args = {configFile: content}\r\n            await this.configurationBuilder.generateDocumentationAndCache({\r\n                    args: args,\r\n                    template: 'general_config',\r\n                    name: this.configurationBuilder.configFiles[i], pathToFile: './' + this.configurationBuilder.configFiles[i], folderPath: './', sidebarPosition: i,\r\n                    saveToPath: './Configuration/'\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration\\GenerateGeneralConfigFiles.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "PrepareSummary.ts",
		"path": "src\\documentation\\plugins\\builders\\Configuration\\PrepareSummary.ts",
		"folderPath": "src\\documentation\\plugins\\builders\\Configuration",
		"fileContent": "import ConfigurationBuilder from \"./ConfigurationBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport path from \"path\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport Document from \"../../../Document\";\r\n\r\nexport default class PrepareSummary {\r\n    configurationBuilder : ConfigurationBuilder;\r\n    constructor(configurationBuilder : ConfigurationBuilder) {\r\n        this.configurationBuilder = configurationBuilder;\r\n    }\r\n\r\n\r\n    public async prepareSummary() {\r\n        let document = DocumentationCache.get('Configuration');\r\n        if (document) {\r\n\r\n            if (document.data && this.appSpecificConfigAndCacheSameSize(document)) {\r\n                if (document.data.appSpecificConfigFiles) this.configurationBuilder.appSpecificConfigFiles = document.data.appSpecificConfigFiles;\r\n                if (document.data.configFiles) this.configurationBuilder.configFiles = document.data.configFiles;\r\n            }\r\n        }\r\n\r\n        if (document && !this.haveConfigFilesChanged()) {\r\n            return;\r\n        }\r\n        this.configurationBuilder.updateSummary = true;\r\n        let config = ConfigHelper.config;\r\n        let appName = config.project_name;\r\n        let listOfFilesAndFolders = '';\r\n        let project_path = process.cwd();\r\n        let files = FolderStructure.getFiles(project_path, 0);\r\n\r\n        let configPath = path.join(project_path, 'config');\r\n        if (FolderStructure.exists(configPath)) {\r\n            let configFiles = FolderStructure.getFiles(configPath, 0);\r\n            configFiles.forEach(configFile => {\r\n                files.push(configFile);\r\n            })\r\n        }\r\n        files.forEach(file => {\r\n            if (file.path.indexOf('/config') != -1) {\r\n                listOfFilesAndFolders += 'config/' + file.name + '\\n';\r\n            } else {\r\n                listOfFilesAndFolders += file.name + '\\n'\r\n            }\r\n        })\r\n\r\n        let response = await this.configurationBuilder.getAnswer('Configuration', {\r\n            appName,\r\n            listOfFilesAndFolders\r\n        }, 'what_are_config_files');\r\n        let jsons = Helper.getJsons(response.answer)\r\n        if (jsons.length > 0) {\r\n            let fileResults = jsons[0];\r\n            this.configurationBuilder.appSpecificConfigFiles = [];\r\n            this.configurationBuilder.configFiles = [];\r\n\r\n            fileResults.forEach((file: any) => {\r\n                if (file.isAppSpecific) {\r\n                    this.configurationBuilder.appSpecificConfigFiles.push(file.path);\r\n                } else if (file.isConfig) {\r\n                    this.configurationBuilder.configFiles.push(file.path)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private haveConfigFilesChanged() {\r\n        let needsUpdate = false;\r\n        if (this.configurationBuilder.appSpecificConfigFiles.length != ConfigHelper.config.config_files.length) return true;\r\n\r\n        for (let i = 0; i < this.configurationBuilder.appSpecificConfigFiles.length; i++) {\r\n            let configDoc = DocumentationCache.get(this.configurationBuilder.appSpecificConfigFiles[i]);\r\n            if (this.configurationBuilder.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.configurationBuilder.appSpecificConfigFiles.length;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; !needsUpdate && i < this.configurationBuilder.configFiles.length; i++) {\r\n            let configDoc = DocumentationCache.get(this.configurationBuilder.configFiles[i]);\r\n            if (this.configurationBuilder.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.configurationBuilder.configFiles.length;\r\n            }\r\n        }\r\n        return needsUpdate;\r\n    }\r\n    private appSpecificConfigAndCacheSameSize(document: Document) {\r\n        if (!document.data) return false;\r\n        return (document.data.appSpecificConfigFiles?.length == ConfigHelper.config.config_files.length)\r\n    }\r\n}",
		"documentation": "# PrepareSummary.ts\n\nThis is a TypeScript code file that contains the `PrepareSummary` class. The class is responsible for preparing a summary of configuration files and checking if any changes have occurred in the configuration files.\n\n## Table of Contents\n\n- [Class: PrepareSummary](#class-preparesummary)\n  - [Constructor](#constructor)\n  - [Methods](#methods)\n    - [prepareSummary](#preparesummary)\n    - [haveConfigFilesChanged](#haveconfigfileschanged)\n    - [appSpecificConfigAndCacheSameSize](#appspecificconfigandcachesamesize)\n\n## Class: PrepareSummary\n\nThe `PrepareSummary` class is responsible for preparing a summary of configuration files and checking if any changes have occurred in the configuration files.\n\n### Constructor\n\nThe constructor takes a single parameter:\n\n- `configurationBuilder: ConfigurationBuilder`: An instance of the `ConfigurationBuilder` class.\n\n### Methods\n\n#### prepareSummary\n\nThis method is responsible for preparing the summary of configuration files. It checks if there is a cached document for the configuration and updates the `ConfigurationBuilder` instance with the appropriate configuration files. If any changes have occurred in the configuration files, it updates the summary.\n\n```typescript\npublic async prepareSummary(): Promise<void>\n```\n\n#### haveConfigFilesChanged\n\nThis method checks if any changes have occurred in the configuration files. It returns `true` if any changes have been detected, otherwise, it returns `false`.\n\n```typescript\nprivate haveConfigFilesChanged(): boolean\n```\n\n#### appSpecificConfigAndCacheSameSize\n\nThis method checks if the size of the app-specific configuration files and the cache is the same. It returns `true` if the sizes are the same, otherwise, it returns `false`.\n\n```typescript\nprivate appSpecificConfigAndCacheSameSize(document: Document): boolean\n```\n\n## Usage\n\nTo use the `PrepareSummary` class, you need to import it and create an instance by passing a `ConfigurationBuilder` instance to the constructor. Then, you can call the `prepareSummary` method to prepare the summary of configuration files.\n\n```typescript\nimport PrepareSummary from \"./PrepareSummary\";\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\n\nconst configurationBuilder = new ConfigurationBuilder();\nconst prepareSummary = new PrepareSummary(configurationBuilder);\n\nawait prepareSummary.prepareSummary();\n```",
		"isFolder": false,
		"updated": "2023-04-24T20:05:13.506Z",
		"sidebar_position": 3,
		"sidebar_label": "PrepareSummary.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\documentation\\plugins\\builders\\Configuration",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"PrepareSummary.ts\"\r\nThe file name is: PrepareSummary.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport ConfigurationBuilder from \"./ConfigurationBuilder\";\r\nimport DocumentationCache from \"../../../DocumentationCache\";\r\nimport ConfigHelper from \"../../../../config/ConfigHelper\";\r\nimport FolderStructure from \"../../../../utils/FolderStructure\";\r\nimport path from \"path\";\r\nimport Helper from \"../../../../utils/Helper\";\r\nimport Document from \"../../../Document\";\r\n\r\nexport default class PrepareSummary {\r\n    configurationBuilder : ConfigurationBuilder;\r\n    constructor(configurationBuilder : ConfigurationBuilder) {\r\n        this.configurationBuilder = configurationBuilder;\r\n    }\r\n\r\n\r\n    public async prepareSummary() {\r\n        let document = DocumentationCache.get('Configuration');\r\n        if (document) {\r\n\r\n            if (document.data && this.appSpecificConfigAndCacheSameSize(document)) {\r\n                if (document.data.appSpecificConfigFiles) this.configurationBuilder.appSpecificConfigFiles = document.data.appSpecificConfigFiles;\r\n                if (document.data.configFiles) this.configurationBuilder.configFiles = document.data.configFiles;\r\n            }\r\n        }\r\n\r\n        if (document && !this.haveConfigFilesChanged()) {\r\n            return;\r\n        }\r\n        this.configurationBuilder.updateSummary = true;\r\n        let config = ConfigHelper.config;\r\n        let appName = config.project_name;\r\n        let listOfFilesAndFolders = '';\r\n        let project_path = process.cwd();\r\n        let files = FolderStructure.getFiles(project_path, 0);\r\n\r\n        let configPath = path.join(project_path, 'config');\r\n        if (FolderStructure.exists(configPath)) {\r\n            let configFiles = FolderStructure.getFiles(configPath, 0);\r\n            configFiles.forEach(configFile => {\r\n                files.push(configFile);\r\n            })\r\n        }\r\n        files.forEach(file => {\r\n            if (file.path.indexOf('/config') != -1) {\r\n                listOfFilesAndFolders += 'config/' + file.name + '\\n';\r\n            } else {\r\n                listOfFilesAndFolders += file.name + '\\n'\r\n            }\r\n        })\r\n\r\n        let response = await this.configurationBuilder.getAnswer('Configuration', {\r\n            appName,\r\n            listOfFilesAndFolders\r\n        }, 'what_are_config_files');\r\n        let jsons = Helper.getJsons(response.answer)\r\n        if (jsons.length > 0) {\r\n            let fileResults = jsons[0];\r\n            this.configurationBuilder.appSpecificConfigFiles = [];\r\n            this.configurationBuilder.configFiles = [];\r\n\r\n            fileResults.forEach((file: any) => {\r\n                if (file.isAppSpecific) {\r\n                    this.configurationBuilder.appSpecificConfigFiles.push(file.path);\r\n                } else if (file.isConfig) {\r\n                    this.configurationBuilder.configFiles.push(file.path)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    private haveConfigFilesChanged() {\r\n        let needsUpdate = false;\r\n        if (this.configurationBuilder.appSpecificConfigFiles.length != ConfigHelper.config.config_files.length) return true;\r\n\r\n        for (let i = 0; i < this.configurationBuilder.appSpecificConfigFiles.length; i++) {\r\n            let configDoc = DocumentationCache.get(this.configurationBuilder.appSpecificConfigFiles[i]);\r\n            if (this.configurationBuilder.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.configurationBuilder.appSpecificConfigFiles.length;\r\n            }\r\n        }\r\n\r\n        for (let i = 0; !needsUpdate && i < this.configurationBuilder.configFiles.length; i++) {\r\n            let configDoc = DocumentationCache.get(this.configurationBuilder.configFiles[i]);\r\n            if (this.configurationBuilder.hasChanged(configDoc)) {\r\n                needsUpdate = true;\r\n                i = this.configurationBuilder.configFiles.length;\r\n            }\r\n        }\r\n        return needsUpdate;\r\n    }\r\n    private appSpecificConfigAndCacheSameSize(document: Document) {\r\n        if (!document.data) return false;\r\n        return (document.data.appSpecificConfigFiles?.length == ConfigHelper.config.config_files.length)\r\n    }\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\documentation\\plugins\\builders\\Configuration\\PrepareSummary.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "Configuration"
		}
	},
	{
		"name": "FAQ",
		"path": "faq.md",
		"folderPath": "",
		"fileContent": "",
		"documentation": "## FAQ\n\n### 1. What is Code-narrator?\n\nCode-narrator is a tool that uses OpenAI to generate documentation for your source code, as well as easy HowTo guides and other custom pages. It is language and framework neutral.\n\n### 2. How can I install Code-narrator?\n\nYou can install Code-narrator using the following command: `npm i code-narrator -D`.\n\n### 3. What is the configuration file for Code-narrator?\n\nThe configuration file for Code-narrator is called `code-narrator.config.js`.\n\n### 4. How can I generate documentation in another language?\n\nTo generate documentation in another language, add \"Give result in {insert language}\" in `gptSystemCommands` in the configuration file.\n\n### 5. How can I generate documentation in a different format (e.g., HTML, LaTeX)?\n\nTo generate documentation in a different format, change the `documentation_type` in the configuration file.\n\n### 6. What is the main entry point for Code-narrator?\n\nThe main entry point for Code-narrator is `./dist/src/App.js`.\n\n### 7. What are the main dependencies of Code-narrator?\n\nSome of the main dependencies of Code-narrator include axios, dotenv, fs-extra, jsonpath, liquidjs, openai, and yargs.\n\n### 8. How can I contribute to Code-narrator?\n\nYou can contribute to Code-narrator by visiting its GitHub repository at https://github.com/ingig/code-narrator and submitting issues or pull requests.\n\n### 9. How can I report bugs or request features for Code-narrator?\n\nYou can report bugs or request features by visiting the GitHub issues page at https://github.com/ingig/code-narrator/issues.\n\n### 10. What is the license for Code-narrator?\n\nCode-narrator is licensed under the ISC license.\n\n### 11. Who is the author of Code-narrator?\n\nThe author of Code-narrator is Ingi Gauti Ragnarsson (@ingig).\n\n### 12. How can I build Code-narrator?\n\nYou can build Code-narrator by running the following command: `npm run compile && gulp`.\n\n### 13. How can I start Code-narrator?\n\nYou can start Code-narrator by running the following command: `npx ts-node .\\src\\cli.ts`.\n\n### 14. What is the purpose of the `./docs/ReadMe.md` file?\n\nThe `./docs/ReadMe.md` file serves as the main documentation file for Code-narrator.\n\n### 15. What are the development dependencies of Code-narrator?\n\nSome of the development dependencies of Code-narrator include gulp, jest, ts-jest, ts-node, and typescript.",
		"isFolder": false,
		"updated": "2023-04-28T09:27:01.883Z",
		"sidebar_position": 2,
		"sidebar_label": "FAQ",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": ".",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Headline should be FAQ.\r\nConfig file is called code-narrator.config.js.\r\nHere answers from me\r\n- to have doc in other lang, add \"Give result in {insert language}\" in gptSystemCommands in config\r\n- to have doc in different format(e.g. html, LaTex), change documentation_type in config\r\n\r\ngive 15 more FAQ on code-narrator and answer them.\r\nThis is project file, use it to build a FAQ\r\n{\n  \"name\": \"code-narrator\",\n  \"version\": \"1.0.9\",\n  \"description\": \"Uses OpenAI to generate documentation for your source code, as well as easy HowTo guides and other custom pages. Code-narrator documents it self and should be a validation of the documentation working, similar to a compiler compiling it self. Configuration code-narrator.config.js file is created on first run and sets the configuration for your project, such as project path, doc, documentation type and more. The package can be install using 'npm i code-narrator -D'. code-narrator is language & framework neutral\",\n  \"keywords\": [\n    \"documentation\",\n    \"openai\",\n    \"autodoc\",\n    \"gpt4\"\n  ],\n  \"homepage\": \"https://github.com/ingig/code-narrator\",\n  \"bugs\": {\n    \"url\": \"https://github.com/ingig/code-narrator/issues\"\n  },\n  \"repository\": {\n    \"url\": \"https://github.com/ingig/code-narrator\"\n  },\n  \"bin\": {\n    \"code-narrator-cli\": \"./dist/src/cli.js\"\n  },\n  \"readme\": \"./docs/ReadMe.md\",\n  \"scripts\": {\n    \"compile\": \"tsc\",\n    \"build\": \"npm run compile && gulp\",\n    \"start\": \"npx ts-node .\\\\src\\\\cli.ts\"\n  },\n  \"author\": \"Ingi Gauti Ragnarsson @ingig\",\n  \"license\": \"ISC\",\n  \"main\": \"./dist/src/App.js\",\n  \"types\": \"./dist/App.d.ts\",\n  \"files\": [\n    \"./dist\"\n  ],\n  \"dependencies\": {\n    \"@types/jsonpath\": \"^0.2.0\",\n    \"@types/multimatch\": \"^4.0.0\",\n    \"asynckit\": \"^0.4.0\",\n    \"axios\": \"^0.26.1\",\n    \"combined-stream\": \"^1.0.8\",\n    \"delayed-stream\": \"^1.0.0\",\n    \"dotenv\": \"^16.0.3\",\n    \"extract-json-from-string\": \"^1.0.1\",\n    \"fast-glob\": \"^3.2.12\",\n    \"follow-redirects\": \"^1.15.2\",\n    \"form-data\": \"^4.0.0\",\n    \"fs-extra\": \"^11.1.1\",\n    \"gulp-sourcemaps\": \"^3.0.0\",\n    \"ignore\": \"^5.2.4\",\n    \"jsonpath\": \"^1.1.1\",\n    \"liquidjs\": \"^10.7.0\",\n    \"mime-db\": \"^1.52.0\",\n    \"mime-types\": \"^2.1.35\",\n    \"multimatch\": \"^6.0.0\",\n    \"openai\": \"^3.1.0\",\n    \"yargs\": \"^17.7.1\"\n  },\n  \"devDependencies\": {\n    \"@babel/preset-typescript\": \"^7.21.0\",\n    \"@jest/globals\": \"^29.5.0\",\n    \"@types/jest\": \"^29.4.0\",\n    \"@types/node\": \"^18.11.19\",\n    \"gulp\": \"^4.0.2\",\n    \"gulp-copy\": \"^4.0.1\",\n    \"gulp-typescript\": \"^6.0.0-alpha.1\",\n    \"jest\": \"^29.4.2\",\n    \"ts-jest\": \"^29.0.5\",\n    \"ts-node\": \"^10.9.1\",\n    \"typescript\": \"^4.9.5\"\n  }\n}\n\r\n"
			},
			{
				"role": "assistant",
				"content": "Write a FAQ document from users answers. Do not create questions you cannot answer. DO NOT hallucinate answers."
			}
		],
		"id": "faq.md",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"has_children": true
		}
	},
	{
		"name": "Tutorial - Use Custom LLM service",
		"path": "tutorial\\tutorial_custom_llm.md",
		"folderPath": "tutorial",
		"fileContent": "",
		"documentation": "# Tutorial: Connecting a Custom LLM to Code-Narrator\n\n## Target Audience\nThis tutorial is aimed at developers who want to connect their custom Language Learning Model (LLM) to Code-Narrator instead of using OpenAI to generate documentation.\n\n## Learning Objectives\nBy the end of this tutorial, you will be able to:\n1. Implement the IGenericAIService interface\n2. Create a custom LLM service called MyLLMService\n3. Connect your custom LLM service to Code-Narrator\n\n## Introduction\nIn this tutorial, we will guide you through the process of connecting your custom LLM to Code-Narrator. You will need to implement the IGenericAIService interface and create a custom service called MyLLMService. We will also show you how to add your custom service to the Code-Narrator configuration.\n\n## Prerequisites and System Requirements\n- Basic knowledge of TypeScript and Node.js\n- A custom LLM that you want to connect to Code-Narrator\n- Code-Narrator package installed in your project\n\n## Step-by-step Instructions\n\n### Step 1: Implement the IGenericAIService Interface\nFirst, you need to implement the IGenericAIService interface in your custom LLM service. This interface is located in the `code-narrator` package and has the following structure:\n\n```typescript\nimport GenericAIResponse from \"../model/GenericAIResponse\";\n\nexport default interface IGenericAIService {\n    query(questions: string[], assistantMessages?: string[]): Promise<GenericAIResponse>;\n}\n```\n\n### Step 2: Create a Custom LLM Service called MyLLMService\nCreate a new TypeScript file called `MyLLMService.ts` in a directory of your choice. In this file, implement the IGenericAIService interface and create a class called `MyLLMService`. \n\nHere's an example of how to implement the `query` method using a simple `fetch()` function. :::info This is a generic example and may not fit your implementation to your LLM service.:::\n\n```typescript\nimport IGenericAIService from \"code-narrator/src/services/IGenericAIService\";\nimport GenericAIResponse from \"code-narrator/src/model/GenericAIResponse\";\n\nclass MyLLMService implements IGenericAIService {\n    async query(questions: string[], assistantMessages?: string[]): Promise<GenericAIResponse> {\n        // Your custom LLM API call logic here\n        const response = await fetch(\"your-llm-api-url\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                questions,\n                assistantMessages\n            })\n        });\n\n        const data = await response.json();\n\n        return {\n            answer: data.answer,\n            requestMessages: data.requestMessages\n        };\n    }\n}\n\nexport default MyLLMService;\n```\n\n### Step 3: Add Your Custom Service to Code-Narrator Configuration\nTo connect your custom LLM service to Code-Narrator, you need to add it to the `code-narrator.config.js` file. Import your custom service and add it as a property called `aiService` to the `config` object.\n\n```javascript\nimport MyLLMService from \"./path/to/MyLLMService\";\n\nconst config = {\n    // Other configuration properties\n    aiService: new MyLLMService()\n};\n\nexport default config;\n```\n\nNow, your custom LLM service is connected to Code-Narrator, and it will use your custom LLM instead of OpenAI to generate documentation.\n\n## Conclusion\nIn this tutorial, you learned how to connect a custom LLM to Code-Narrator by implementing the IGenericAIService interface, creating a custom LLM service called MyLLMService, and adding it to the Code-Narrator configuration. With this knowledge, you can now use your custom LLM to generate documentation for your projects.",
		"isFolder": false,
		"updated": "2023-04-29T15:33:54.808Z",
		"sidebar_position": 14,
		"sidebar_label": "Tutorial - Use Custom LLM service",
		"init": false,
		"postInit": false,
		"generator": "UserDefined",
		"saveToPath": "tutorial",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "tutorial to connect to own custom LLM to code-narrator instead of OpenAI to generate documentation\r\nIGenericAIService is the interface needed to be implemented, GenericAIResponse is the return object. They are both in code-narrator package\r\nGive user information how to build its own service called MyLLMService\r\nShow code example what needs to be implemented.\r\nUse a simple fetch() as example to that sends parameters and returns GenericAIResponse. ::info This is generic example and may not fit your implementation to your LLM service.\r\nService can be located in any directory of users choice\r\nShow how to add service as class name to code-narrator.config.js by adding property aiService to const config = { } and it needs to be imported"
			},
			{
				"role": "assistant",
				"content": "I want you to create a detailed Tutorial from the user input.\n            Define the target audience, Set clear learning objectives,Provide a brief introduction,Prerequisites and system requirements,Step-by-step instructions,Include code samples"
			},
			{
				"role": "assistant",
				"content": "File Content for src/services/IGenericAIService.ts\nimport GenericAIResponse from \"../model/GenericAIResponse\";\r\n\r\nexport default interface IGenericAIService {\r\n    query(questions : string[], assistantMessages? : string[]): Promise<GenericAIResponse>;\r\n}"
			},
			{
				"role": "assistant",
				"content": "File Content for src/model/GenericAIResponse.ts\nimport {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface GenericAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}"
			}
		],
		"id": "tutorial\\tutorial_custom_llm.md",
		"lastTouch": "2023-04-29T15:33:54.808Z",
		"data": {
			"parent": "README"
		}
	},
	{
		"name": "GenericAIResponse.ts",
		"path": "src\\model\\GenericAIResponse.ts",
		"folderPath": "src\\model",
		"fileContent": "import {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface GenericAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}",
		"documentation": "# GenericAIResponse.ts\n\nThis TypeScript file defines an interface called `GenericAIResponse`. The interface is used to represent a generic response from an AI system, which includes an answer and an array of request messages.\n\n## Table of Contents\n\n- [Interface Description](#interface-description)\n- [Usage Examples](#usage-examples)\n- [Methods and Properties](#methods-and-properties)\n  - [answer](#answer)\n  - [requestMessages](#requestmessages)\n\n## Interface Description\n\nThe `GenericAIResponse` interface is designed to provide a standardized structure for AI responses. It contains two properties: `answer` and `requestMessages`. The `answer` property is a string that represents the AI's response, while the `requestMessages` property is an array of `ChatCompletionRequestMessage` objects, which represent the messages sent to the AI system.\n\n## Usage Examples\n\nHere are some examples of how to use the `GenericAIResponse` interface:\n\n### Example 1: Creating a GenericAIResponse object\n\n```typescript\nimport { ChatCompletionRequestMessage } from \"openai\";\nimport GenericAIResponse from \"./GenericAIResponse\";\n\nconst response: GenericAIResponse = {\n  answer: \"Hello, how can I help you?\",\n  requestMessages: [\n    {\n      role: \"system\",\n      content: \"You are a helpful assistant.\",\n    },\n    {\n      role: \"user\",\n      content: \"Hello, I need some help.\",\n    },\n  ],\n};\n```\n\n### Example 2: Processing a GenericAIResponse object\n\n```typescript\nfunction processResponse(response: GenericAIResponse) {\n  console.log(\"AI's answer:\", response.answer);\n  console.log(\"Request messages:\");\n\n  response.requestMessages.forEach((message, index) => {\n    console.log(`Message ${index + 1}:`, message.content);\n  });\n}\n\nprocessResponse(response);\n```\n\n## Methods and Properties\n\n### answer\n\n- Type: `string`\n\nThe `answer` property is a string that represents the AI's response. It can be any text generated by the AI system based on the input messages.\n\n### requestMessages\n\n- Type: `ChatCompletionRequestMessage[]`\n\nThe `requestMessages` property is an array of `ChatCompletionRequestMessage` objects. Each object in the array represents a message sent to the AI system. The `ChatCompletionRequestMessage` type is imported from the \"openai\" package and has the following properties:\n\n- `role`: A string representing the role of the message sender. It can be either \"system\", \"user\", or \"assistant\".\n- `content`: A string containing the content of the message.\n\nFor more information on the `ChatCompletionRequestMessage` type, refer to the [OpenAI API documentation](https://beta.openai.com/docs/api-reference/completions/create).",
		"isFolder": false,
		"updated": "2023-04-29T15:26:17.107Z",
		"sidebar_position": 0,
		"sidebar_label": "GenericAIResponse.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\model",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"GenericAIResponse.ts\"\r\nThe file name is: GenericAIResponse.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {ChatCompletionRequestMessage} from \"openai\";\r\n\r\nexport default interface GenericAIResponse {\r\n    answer : string;\r\n    requestMessages :  ChatCompletionRequestMessage[];\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\model\\GenericAIResponse.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "model"
		}
	},
	{
		"name": "IGenericAIService.ts",
		"path": "src\\services\\IGenericAIService.ts",
		"folderPath": "src\\services",
		"fileContent": "import GenericAIResponse from \"../model/GenericAIResponse\";\r\n\r\nexport default interface IGenericAIService {\r\n    query(questions : string[], assistantMessages? : string[]): Promise<GenericAIResponse>;\r\n}",
		"documentation": "# IGenericAIService.ts\n\nIGenericAIService.ts is a TypeScript interface file that defines the structure for a generic AI service. This interface is designed to be implemented by various AI services, providing a consistent way to interact with different AI implementations.\n\n## Table of Contents\n\n- [Description](#description)\n- [Usage](#usage)\n- [Methods](#methods)\n  - [query](#query)\n- [Technical Concepts](#technical-concepts)\n\n## Description\n\nThe IGenericAIService interface contains a single method called `query`, which takes an array of questions and an optional array of assistant messages as input, and returns a Promise that resolves to a `GenericAIResponse` object.\n\n## Usage\n\nTo use the IGenericAIService interface, you need to create a class that implements this interface. Here's an example of how to create a class that implements the IGenericAIService interface:\n\n```typescript\nimport IGenericAIService from \"./IGenericAIService\";\nimport GenericAIResponse from \"../model/GenericAIResponse\";\n\nclass MyAIService implements IGenericAIService {\n  async query(questions: string[], assistantMessages?: string[]): Promise<GenericAIResponse> {\n    // Your implementation here\n  }\n}\n```\n\n## Methods\n\n### query\n\nThe `query` method is used to send an array of questions and an optional array of assistant messages to the AI service. The method returns a Promise that resolves to a `GenericAIResponse` object.\n\n#### Parameters\n\n- `questions: string[]`: An array of questions to be sent to the AI service.\n- `assistantMessages? : string[]`: An optional array of assistant messages to be sent to the AI service.\n\n#### Example\n\n```typescript\nconst aiService = new MyAIService();\nconst questions = [\"What is the weather like today?\", \"How old are you?\"];\nconst assistantMessages = [\"Hello, I am your assistant.\"];\n\naiService.query(questions, assistantMessages).then((response: GenericAIResponse) => {\n  console.log(response);\n});\n```\n\n## Technical Concepts\n\n- **TypeScript**: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript. It adds optional types, classes, and modules to JavaScript, making it easier to write and maintain large JavaScript applications.\n- **Interfaces**: In TypeScript, an interface is a way to define a contract for a class to follow. It specifies the shape of an object, ensuring that the class implementing the interface adheres to the defined structure.\n- **Promise**: A Promise is a JavaScript object representing the eventual completion (or failure) of an asynchronous operation and its resulting value. It allows you to associate handlers with an asynchronous action's eventual success or failure.",
		"isFolder": false,
		"updated": "2023-04-29T15:27:30.288Z",
		"sidebar_position": 0,
		"sidebar_label": "IGenericAIService.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"IGenericAIService.ts\"\r\nThe file name is: IGenericAIService.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport GenericAIResponse from \"../model/GenericAIResponse\";\r\n\r\nexport default interface IGenericAIService {\r\n    query(questions : string[], assistantMessages? : string[]): Promise<GenericAIResponse>;\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\services\\IGenericAIService.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "services"
		}
	},
	{
		"name": "OpenAIService.ts",
		"path": "src\\services\\OpenAIService.ts",
		"folderPath": "src\\services",
		"fileContent": "import {ChatCompletionRequestMessage, Configuration, OpenAIApi} from 'openai';\r\nimport {setTimeout} from 'timers/promises';\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport GenericAIResponse from \"../model/GenericAIResponse\";\r\nimport DefaultSettings from \"../config/DefaultSettings\";\r\nimport IGenericAIService from \"./IGenericAIService\";\r\n\r\nexport default class OpenAIService implements IGenericAIService {\r\n    openai: OpenAIApi;\r\n    models = new Map([\r\n        ['gpt-3.5-turbo', 4096],\r\n        ['gpt-4', 8192],\r\n        ['gpt-4-32k', 32768]\r\n    ]);\r\n    constructor() {\r\n        const configuration = new Configuration({\r\n            apiKey: ConfigHelper.OpenAiKey\r\n        });\r\n        this.openai = new OpenAIApi(configuration);\r\n    }\r\n\r\n    public async query(questions : string[], assistantMessages? : string[]): Promise<GenericAIResponse>  {\r\n        let config = ConfigHelper.config;\r\n        //config should only be undefined on first run\r\n        if (!config) config = DefaultSettings.get();\r\n        let model = '';\r\n        if (!model) {\r\n            model = config.gptModel;\r\n        }\r\n        return this.queryQuestions(questions, 0, model, assistantMessages)\r\n    }\r\n\r\n    private async queryQuestions(questions : string[], errorCount = 0, model : string, assistantMessages? : string[]): Promise<GenericAIResponse> {\r\n        let messages : ChatCompletionRequestMessage[] = []\r\n        try {\r\n            await setTimeout(1 * 500);\r\n\r\n            let config = ConfigHelper.config;\r\n            //config should only be undefined on first run\r\n            if (!config) config = DefaultSettings.get();\r\n\r\n            let messageLength = 0;\r\n\r\n            for (let i=0;config.gptSystemCommands && i<config.gptSystemCommands.length;i++) {\r\n                messageLength += config.gptSystemCommands[i][i].length;\r\n                messages.push({role:'system', content:config.gptSystemCommands[i].replace('{DocumentationType}', ConfigHelper.DocumentationType)})\r\n            }\r\n\r\n            let maxTokens = this.models.get(model) ?? 8192\r\n            for (let i=0;i<questions.length;i++){\r\n                let q = questions[i]\r\n                if (messageLength + q.length> maxTokens) {\r\n                    let length = parseInt(((maxTokens - messageLength)/1.20).toString());\r\n                    q = q.substring(0, length);\r\n                    console.warn(`Warning - Content to long: I had to trim a file, only using first ${length} character`)\r\n                }\r\n                messages.push({role:'user', content:q})\r\n                messageLength += q.length;\r\n            }\r\n            for (let i=0;assistantMessages && i<assistantMessages.length;i++) {\r\n                messageLength += assistantMessages[i].length;\r\n                messages.push({role:'assistant', content: assistantMessages[i]});\r\n            }\r\n\r\n            maxTokens = maxTokens - messageLength;\r\n            if (maxTokens < 0) {\r\n                console.error(`Message is to long (${messageLength}). Will not query gpt`)\r\n                return {answer:'', requestMessages:messages} as GenericAIResponse;\r\n            }\r\n            const completion = await this.openai.createChatCompletion({\r\n                model: model,\r\n                messages : messages,\r\n                temperature: 0.1,\r\n                max_tokens: parseInt(maxTokens.toString()),\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n\r\n            });\r\n            if (completion.data.choices.length == 0) {\r\n                throw new Error(`Did not get answer. ChatGPT is down. Run again. `)\r\n            }\r\n            let response : GenericAIResponse = {\r\n                answer : completion.data.choices[0].message!.content,\r\n                requestMessages : messages\r\n            }\r\n\r\n            return response;\r\n        } catch (e : any) {\r\n            let message = e.response?.data?.error?.message ?? '';\r\n            if (message.indexOf('You exceeded your current quota') != -1) {\r\n                throw new Error(message);\r\n            }\r\n\r\n            if (message.indexOf('The model') != -1 && message.indexOf('does not exist') != -1) {\r\n                console.warn(`You don't have access to ${DefaultSettings.gptModel}, downgrading to gtp-3.5-turbo`)\r\n                let model = 'gpt-3.5-turbo';\r\n                DefaultSettings.gptModel = model;\r\n                return this.queryQuestions(questions, errorCount, model, assistantMessages);\r\n            }\r\n\r\n            if (e && this.retryStatuses.includes(e.response?.status) && errorCount < 3) {\r\n                console.log('Sleep 3 sec')\r\n                await setTimeout(3 * 1000);\r\n                return this.queryQuestions(questions, ++errorCount, model);\r\n            }\r\n\r\n            console.error('OpenAI error:', message)\r\n            console.error('Error doing OpenAI query:', questions);\r\n\r\n            return  {answer:'', requestMessages: messages} as GenericAIResponse;\r\n\r\n        }\r\n    }\r\n\r\n    retryStatuses = [429, 500, 503]\r\n}",
		"documentation": "# OpenAIService.ts\n\nThis TypeScript file defines the `OpenAIService` class, which is responsible for interacting with the OpenAI API to generate responses based on user input. The class implements the `IGenericAIService` interface.\n\n## Table of Contents\n\n- [Class Description](#class-description)\n- [Constructor](#constructor)\n- [Methods](#methods)\n  - [query](#query)\n  - [queryQuestions](#queryquestions)\n- [Examples](#examples)\n\n## Class Description\n\nThe `OpenAIService` class is designed to interact with the OpenAI API using the `openai` package. It provides methods to send queries to the API and receive responses. The class also handles error handling and retries for certain error statuses.\n\n## Constructor\n\nThe constructor initializes the `OpenAIService` instance with the following properties:\n\n- `openai`: An instance of the `OpenAIApi` class, configured with the API key from `ConfigHelper.OpenAiKey`.\n- `models`: A `Map` containing the available GPT models and their respective token limits.\n\n## Methods\n\n### query\n\n```typescript\npublic async query(questions: string[], assistantMessages?: string[]): Promise<GenericAIResponse>\n```\n\nThis method takes an array of `questions` and an optional array of `assistantMessages`. It returns a `Promise` that resolves to a `GenericAIResponse` object containing the generated answer and the request messages.\n\nThe method first retrieves the configuration settings and the GPT model to use. Then, it calls the `queryQuestions` method to send the queries to the OpenAI API.\n\n### queryQuestions\n\n```typescript\nprivate async queryQuestions(questions: string[], errorCount = 0, model: string, assistantMessages?: string[]): Promise<GenericAIResponse>\n```\n\nThis private method is responsible for sending the queries to the OpenAI API and handling errors and retries. It takes the following parameters:\n\n- `questions`: An array of strings containing the questions to ask the API.\n- `errorCount`: An optional integer representing the number of errors encountered so far (default is 0).\n- `model`: A string representing the GPT model to use.\n- `assistantMessages`: An optional array of strings containing previous assistant messages.\n\nThe method constructs the `messages` array, which includes system commands, user questions, and assistant messages. It then sends the request to the OpenAI API and processes the response. If an error occurs, the method handles retries and downgrades the GPT model if necessary.\n\n## Examples\n\nTo use the `OpenAIService` class, first create an instance of the class:\n\n```typescript\nconst openAIService = new OpenAIService();\n```\n\nThen, call the `query` method with an array of questions:\n\n```typescript\nconst questions = [\"What is the capital of France?\", \"How many planets are in the solar system?\"];\nconst response = await openAIService.query(questions);\nconsole.log(response.answer);\n```\n\nIf you want to include previous assistant messages, pass them as a second argument:\n\n```typescript\nconst questions = [\"What is the capital of France?\", \"How many planets are in the solar system?\"];\nconst assistantMessages = [\"Hello, I am an AI assistant.\"];\nconst response = await openAIService.query(questions, assistantMessages);\nconsole.log(response.answer);\n```\n\nThe `response` object will contain the generated answer and the request messages:\n\n```typescript\n{\n  answer: \"The capital of France is Paris. There are 8 planets in the solar system.\",\n  requestMessages: [\n    // ...system commands, user questions, and assistant messages\n  ]\n}\n```",
		"isFolder": false,
		"updated": "2023-04-29T15:29:06.451Z",
		"sidebar_position": 1,
		"sidebar_label": "OpenAIService.ts",
		"init": false,
		"postInit": false,
		"generator": "Files",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about following file.\r\nHeadline of file should be \"OpenAIService.ts\"\r\nThe file name is: OpenAIService.ts\r\nIf this is a code file, then\r\n- Write a detailed description of the code that will follow.\r\n- Give multiple examples of how to use this class before listing each method\r\n- Create a description for each method in the code.\r\n- List out the parameters in methods (only if there are any) and describe each parameter.\r\n- Explain technical concepts that are not standard but come apparent in the code. Example of a standard concept is JSON.\r\n- Divide the document into sections with clear headings and subheadings.\r\nIf this is a template file\r\n- List the variables that are used in the template file\r\n- Display the template file\r\nElse\r\n- Write a detailed description of the file content that will follow.\r\n\r\nThis is the content of the file:\r\n###\r\nimport {ChatCompletionRequestMessage, Configuration, OpenAIApi} from 'openai';\r\nimport {setTimeout} from 'timers/promises';\r\nimport ConfigHelper from \"../config/ConfigHelper\";\r\nimport GenericAIResponse from \"../model/GenericAIResponse\";\r\nimport DefaultSettings from \"../config/DefaultSettings\";\r\nimport IGenericAIService from \"./IGenericAIService\";\r\n\r\nexport default class OpenAIService implements IGenericAIService {\r\n    openai: OpenAIApi;\r\n    models = new Map([\r\n        ['gpt-3.5-turbo', 4096],\r\n        ['gpt-4', 8192],\r\n        ['gpt-4-32k', 32768]\r\n    ]);\r\n    constructor() {\r\n        const configuration = new Configuration({\r\n            apiKey: ConfigHelper.OpenAiKey\r\n        });\r\n        this.openai = new OpenAIApi(configuration);\r\n    }\r\n\r\n    public async query(questions : string[], assistantMessages? : string[]): Promise<GenericAIResponse>  {\r\n        let config = ConfigHelper.config;\r\n        //config should only be undefined on first run\r\n        if (!config) config = DefaultSettings.get();\r\n        let model = '';\r\n        if (!model) {\r\n            model = config.gptModel;\r\n        }\r\n        return this.queryQuestions(questions, 0, model, assistantMessages)\r\n    }\r\n\r\n    private async queryQuestions(questions : string[], errorCount = 0, model : string, assistantMessages? : string[]): Promise<GenericAIResponse> {\r\n        let messages : ChatCompletionRequestMessage[] = []\r\n        try {\r\n            await setTimeout(1 * 500);\r\n\r\n            let config = ConfigHelper.config;\r\n            //config should only be undefined on first run\r\n            if (!config) config = DefaultSettings.get();\r\n\r\n            let messageLength = 0;\r\n\r\n            for (let i=0;config.gptSystemCommands && i<config.gptSystemCommands.length;i++) {\r\n                messageLength += config.gptSystemCommands[i][i].length;\r\n                messages.push({role:'system', content:config.gptSystemCommands[i].replace('{DocumentationType}', ConfigHelper.DocumentationType)})\r\n            }\r\n\r\n            let maxTokens = this.models.get(model) ?? 8192\r\n            for (let i=0;i<questions.length;i++){\r\n                let q = questions[i]\r\n                if (messageLength + q.length> maxTokens) {\r\n                    let length = parseInt(((maxTokens - messageLength)/1.20).toString());\r\n                    q = q.substring(0, length);\r\n                    console.warn(`Warning - Content to long: I had to trim a file, only using first ${length} character`)\r\n                }\r\n                messages.push({role:'user', content:q})\r\n                messageLength += q.length;\r\n            }\r\n            for (let i=0;assistantMessages && i<assistantMessages.length;i++) {\r\n                messageLength += assistantMessages[i].length;\r\n                messages.push({role:'assistant', content: assistantMessages[i]});\r\n            }\r\n\r\n            maxTokens = maxTokens - messageLength;\r\n            if (maxTokens < 0) {\r\n                console.error(`Message is to long (${messageLength}). Will not query gpt`)\r\n                return {answer:'', requestMessages:messages} as GenericAIResponse;\r\n            }\r\n            const completion = await this.openai.createChatCompletion({\r\n                model: model,\r\n                messages : messages,\r\n                temperature: 0.1,\r\n                max_tokens: parseInt(maxTokens.toString()),\r\n                top_p: 1,\r\n                frequency_penalty: 0,\r\n                presence_penalty: 0\r\n\r\n            });\r\n            if (completion.data.choices.length == 0) {\r\n                throw new Error(`Did not get answer. ChatGPT is down. Run again. `)\r\n            }\r\n            let response : GenericAIResponse = {\r\n                answer : completion.data.choices[0].message!.content,\r\n                requestMessages : messages\r\n            }\r\n\r\n            return response;\r\n        } catch (e : any) {\r\n            let message = e.response?.data?.error?.message ?? '';\r\n            if (message.indexOf('You exceeded your current quota') != -1) {\r\n                throw new Error(message);\r\n            }\r\n\r\n            if (message.indexOf('The model') != -1 && message.indexOf('does not exist') != -1) {\r\n                console.warn(`You don't have access to ${DefaultSettings.gptModel}, downgrading to gtp-3.5-turbo`)\r\n                let model = 'gpt-3.5-turbo';\r\n                DefaultSettings.gptModel = model;\r\n                return this.queryQuestions(questions, errorCount, model, assistantMessages);\r\n            }\r\n\r\n            if (e && this.retryStatuses.includes(e.response?.status) && errorCount < 3) {\r\n                console.log('Sleep 3 sec')\r\n                await setTimeout(3 * 1000);\r\n                return this.queryQuestions(questions, ++errorCount, model);\r\n            }\r\n\r\n            console.error('OpenAI error:', message)\r\n            console.error('Error doing OpenAI query:', questions);\r\n\r\n            return  {answer:'', requestMessages: messages} as GenericAIResponse;\r\n\r\n        }\r\n    }\r\n\r\n    retryStatuses = [429, 500, 503]\r\n}\r\n###\r\n"
			}
		],
		"id": "src\\services\\OpenAIService.ts",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"parent": "services"
		}
	},
	{
		"name": "README",
		"path": "src\\services",
		"folderPath": "src\\services",
		"fileContent": "",
		"documentation": "# Documentation\n\nThis folder contains the source code for the services used in the system. The services are responsible for handling various tasks, such as interacting with AI APIs and processing user input. The folder is divided into sections, each containing a file or folder with its own specific purpose.\n\n## Table of Contents\n\n- [IGenericAIService.ts](#igenericaiservicets)\n- [OpenAIService.ts](#openaiservicets)\n\n## IGenericAIService.ts\n\nIGenericAIService.ts is a TypeScript interface file that defines the structure for a generic AI service. This interface is designed to be implemented by various AI services, providing a consistent way to interact with different AI implementations.\n\n[Read the full documentation for IGenericAIService.ts](IGenericAIService.ts)\n\n## OpenAIService.ts\n\nThis TypeScript file defines the `OpenAIService` class, which is responsible for interacting with the OpenAI API to generate responses based on user input. The class implements the `IGenericAIService` interface.\n\n[Read the full documentation for OpenAIService.ts](OpenAIService.ts)\n\n---\n\n[View the repository on GitHub](https://github.com/ingig/code-narrator/src/services)",
		"isFolder": true,
		"updated": "2023-04-29T15:31:07.836Z",
		"sidebar_position": 33,
		"sidebar_label": "services",
		"init": false,
		"postInit": false,
		"generator": "Folders",
		"saveToPath": "src\\services",
		"documentation_type": "md",
		"question": "",
		"requestMessages": [
			{
				"role": "system",
				"content": "Act as a documentation expert for software"
			},
			{
				"role": "system",
				"content": "If there is :::note, :::info, :::caution, :::tip, :::danger in the text, extract that from its location and format it correctly"
			},
			{
				"role": "system",
				"content": "Return your answer in md format"
			},
			{
				"role": "system",
				"content": "If you notice any secret information, replace it with ***** in your response"
			},
			{
				"role": "user",
				"content": "Act as a documentation expert. Write in-depth documentation about the content of this folder.\r\n\r\nHeader of the file should be \"\".\r\nAfter the header, use the json content provided to generate description of what this folder is responsible for doing in the system\r\nDivide the document into sections with clear headings and subheadings.\r\n\r\nList each file and folder into its own section.\r\nWrite high level information in each section, DO NOT generate code examples.\r\nLink each section to its own documentation. The format of the link is simply the name of the folder or file.\r\n\r\nAt the end of the file add link to repository, the url is https://github.com/ingig/code-narrator/src/services\r\n\r\nHere is json of the data your need\r\n###\r\n[{\"name\":\"IGenericAIService.ts\",\"path\":\"src\\\\services\\\\IGenericAIService.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# IGenericAIService.ts\\n\\nIGenericAIService.ts is a TypeScript interface file that defines the structure for a generic AI service. This interface is designed to be implemented by various AI services, providing a consistent way to interact with different AI implementations.\\n\\n## Table of Contents\"},{\"name\":\"OpenAIService.ts\",\"path\":\"src\\\\services\\\\OpenAIService.ts\",\"fileOrFolder\":\"file\",\"summary\":\"# OpenAIService.ts\\n\\nThis TypeScript file defines the `OpenAIService` class, which is responsible for interacting with the OpenAI API to generate responses based on user input. The class implements the `IGenericAIService` interface.\\n\\n## Table of Contents\"}]\r\n###"
			}
		],
		"id": "src\\services",
		"lastTouch": "2023-04-29T15:32:05.836Z",
		"data": {
			"has_children": true
		}
	}
]